#cheat vicewheels cyclone chamber set
moveto(-1511.25,-1160.72,15.47);  object(0x1CB2,90,270,18);
move(-12.24,0.67,0.00);  object(0x1CB2,90,270,348);
move(-9.67,-5.92,0.00);  object(0x1CB2,90,270,311);
move(-6.28,-10.60,0.00);  object(0x1CB2,90,270,291);
move(-3.47,-12.91,0.00);  object(0x1CB2,90,270,280);
move(-1.02,-13.40,0.00);  object(0x1CB2,90,270,270);
move(2.20,-13.22,0.00);  object(0x1CB2,90,270,252);
move(4.29,-13.44,0.00);  object(0x1CB2,90,270,252);
move(6.08,-12.14,0.00);  object(0x1CB2,90,270,235);
move(8.95,-9.91,0.00);  object(0x1CB2,90,270,221);
move(20.22,83.79,0.04);  object(0x1CB2,90,270,56);
move(5.87,-8.97,0.50);  object(0x1CAA,0,0,147);
move(3.87,-5.43,2.60);  object(0x1CAA,0,355,147);
move(4.68,-6.69,3.00);  object(0x1CAA,0,350,147);
move(4.83,-3.23,2.20);  object(0x1CAA,0,340,122);
move(7.48,-1.79,2.70);  object(0x1CAA,0,335,106);
move(7.53,0.31,2.60);  object(0x1CAA,0,325,94);
move(5.30,2.68,1.80);  object(0x1CAA,0,315,64);
move(2.74,4.56,1.90);  object(0x1CAA,0,305,31);
move(-29.90,17.84,-16.40);  object(0x1CB2,0,310,85);
move(12.56,-0.13,0.00);  object(0x1CB2,0,310,96);
move(12.53,-3.31,0.00);  object(0x1CB2,0,310,117);
move(10.30,-7.55,0.00);  object(0x1CB2,0,310,137);
move(6.19,-11.17,0.00);  object(0x1CB2,0,310,166);
move(-0.78,-12.09,0.00);  object(0x1CB2,0,310,202);
move(-7.39,-9.96,0.00);  object(0x1CB2,0,310,232);
move(-11.60,-5.76,0.00);  object(0x1CB2,0,310,255);
move(-11.49,-0.57,0.00);  object(0x1CB2,0,310,284);
move(-11.87,4.78,0.00);  object(0x1CB2,0,310,300);
move(-10.19,8.20,0.00);  object(0x1CB2,0,310,316);
move(-6.31,10.74,0.00);  object(0x1CB2,0,310,344);
move(-0.12,11.93,0.00);  object(0x1CB2,0,310,17);
move(1.23,4.43,0.00);  object(0x1CB2,0,310,33);
move(16.50,13.27,3.60);  object(0x1CB2,0,330,85);
move(12.85,0.01,0.00);  object(0x1CB2,0,330,96);
move(13.44,-3.29,0.00);  object(0x1CB2,0,330,112);
move(9.21,-5.36,0.00);  object(0x1CB2,0,330,129);
move(5.25,-6.08,0.00);  object(0x1CB2,0,330,144);
move(4.62,-11.35,0.00);  object(0x1CB2,0,330,169);
move(-1.42,-12.42,0.00);  object(0x1CB2,0,330,200);
move(-7.23,-10.14,0.00);  object(0x1CB2,0,330,232);
move(-11.55,-6.55,0.00);  object(0x1CB2,0,330,250);
move(-7.95,-1.99,0.00);  object(0x1CB2,0,330,267);
move(-8.45,1.27,0.00);  object(0x1CB2,0,330,287);
move(-12.18,5.33,0.00);  object(0x1CB2,0,330,301);
move(-9.79,7.67,0.00);  object(0x1CB2,0,330,319);
move(-6.46,11.06,0.00);  object(0x1CB2,0,330,341);
move(-2.01,12.74,0.00);  object(0x1CB2,0,330,5);
move(1.96,5.70,0.00);  object(0x1CB2,0,330,29);
move(0.97,1.76,0.00);  object(0x1CB2,0,330,29);
move(18.55,13.84,4.50);  object(0x1CB2,0,340,85);
move(13.24,-0.04,0.00);  object(0x1CB2,0,340,95);
move(12.84,-3.10,0.00);  object(0x1CB2,0,340,112);
move(10.37,-5.75,0.00);  object(0x1CB2,0,340,130);
move(6.80,-7.54,0.00);  object(0x1CB2,0,340,147);
move(4.19,-10.50,0.00);  object(0x1CB2,0,340,169);
move(-0.88,-13.35,0.00);  object(0x1CB2,0,340,201);
move(-6.92,-11.27,0.00);  object(0x1CB2,0,340,223);
move(-2.87,-1.71,0.00);  object(0x1CB2,0,340,231);
move(-9.29,-5.60,0.00);  object(0x1CB2,0,340,246);
move(-6.28,-2.17,0.00);  object(0x1CB2,0,340,259);
move(-12.28,0.77,0.00);  object(0x1CB2,0,340,286);
move(-12.91,5.43,0.00);  object(0x1CB2,0,340,301);
move(-9.54,7.09,0.00);  object(0x1CB2,0,340,311);
move(-1.03,1.35,0.00);  object(0x1CB2,0,340,316);
move(-4.43,5.99,0.00);  object(0x1CB2,0,340,330);
move(-3.09,7.27,0.00);  object(0x1CB2,0,340,339);
move(-1.96,7.79,0.00);  object(0x1CB2,0,340,355);
move(2.98,11.26,0.00);  object(0x1CB2,0,340,28);
move(0.36,1.34,0.00);  object(0x1CB2,0,340,31);
move(20.71,14.58,4.80);  object(0x1CB2,0,340,85);
move(12.98,-0.09,0.00);  object(0x1CB2,0,340,95);
move(13.09,-2.95,0.00);  object(0x1CB2,0,340,112);
move(11.63,-6.55,0.00);  object(0x1CB2,0,340,130);
move(6.82,-7.45,0.00);  object(0x1CB2,0,340,146);
move(4.70,-11.43,0.00);  object(0x1CB2,0,340,168);
move(-0.65,-13.25,0.00);  object(0x1CB2,0,340,200);
move(-7.13,-11.69,0.00);  object(0x1CB2,0,340,223);
move(-3.42,-2.89,0.00);  object(0x1CB2,0,340,227);
move(-9.42,-5.86,0.00);  object(0x1CB2,0,340,245);
move(-8.48,-2.69,0.00);  object(0x1CB2,0,340,258);
move(-11.91,0.89,0.00);  object(0x1CB2,0,340,285);
move(-11.83,4.62,0.00);  object(0x1CB2,0,340,297);
move(-9.95,7.37,0.00);  object(0x1CB2,0,340,312);
move(-7.74,9.70,0.00);  object(0x1CB2,0,340,327);
move(-2.65,6.90,0.00);  object(0x1CB2,0,340,338);
move(-1.95,9.02,0.00);  object(0x1CB2,0,340,354);
move(1.96,8.83,0.00);  object(0x1CB2,0,340,26);
move(1.90,3.83,0.00);  object(0x1CB2,0,340,26);
move(5.78,8.11,0.00);  object(0x1CB2,0,340,44);
move(8.49,4.81,0.00);  object(0x1CB2,0,340,80);
move(0.58,1.65,5.10);  object(0x1CB2,0,345,82);
move(6.43,0.54,0.00);  object(0x1CB2,0,345,86);
move(12.57,0.18,0.00);  object(0x1CB2,0,345,95);
move(12.73,-2.60,0.00);  object(0x1CB2,0,345,108);
move(7.25,-2.53,0.00);  object(0x1CB2,0,345,110);
move(6.60,-4.15,0.00);  object(0x1CB2,0,345,125);
move(7.08,-7.95,0.00);  object(0x1CB2,0,345,144);
move(5.14,-11.59,0.00);  object(0x1CB2,0,345,168);
move(0.68,-11.82,0.00);  object(0x1CB2,0,345,188);
move(-0.93,-2.47,0.00);  object(0x1CB2,0,345,199);
move(-6.33,-11.32,0.00);  object(0x1CB2,0,345,222);
move(-6.20,-6.07,0.00);  object(0x1CB2,0,345,225);
move(-6.29,-3.67,0.00);  object(0x1CB2,0,345,243);
move(-9.83,-3.81,0.00);  object(0x1CB2,0,345,254);
move(-12.06,0.32,0.00);  object(0x1CB2,0,345,284);
move(-12.11,4.34,0.00);  object(0x1CB2,0,345,296);
move(-9.58,6.13,0.00);  object(0x1CB2,0,345,312);
move(-9.12,10.03,0.00);  object(0x1CB2,0,345,325);
move(-3.19,6.93,0.00);  object(0x1CB2,0,345,338);
move(-3.14,12.01,0.00);  object(0x1CB2,0,345,353);
move(2.10,10.05,0.00);  object(0x1CB2,0,345,23);
move(5.61,9.80,0.00);  object(0x1CB2,0,345,38);
move(4.26,4.40,0.00);  object(0x1CB2,0,345,43);
move(45.21,-15.87,0.70);  object(0x1CB2,15,35,350);
move(-2.59,-1.73,-4.10);  object(0x1CB2,15,35,349);
move(-5.07,10.17,-2.30);  object(0x1CB2,15,35,334);
move(2.50,2.41,4.30);  object(0x1CB2,15,35,334);
move(-6.58,7.96,-1.60);  object(0x1CB2,15,35,322);
move(-2.76,-2.16,-5.10);  object(0x1CB2,15,35,322);
move(-3.71,4.06,11.96);  object(0x1CB2,0,350,93);
move(12.44,-2.43,0.00);  object(0x1CB2,0,350,108);
move(12.40,-5.04,0.00);  object(0x1CB2,0,350,118);
move(4.27,-3.11,0.00);  object(0x1CB2,0,350,125);
move(5.77,-6.72,0.00);  object(0x1CB2,0,350,142);
move(4.68,-10.73,0.00);  object(0x1CB2,0,350,168);
move(0.52,-2.39,0.00);  object(0x1CB2,0,350,168);
move(0.79,-12.27,0.00);  object(0x1CB2,0,350,187);
move(-4.85,-9.97,0.00);  object(0x1CB2,0,350,222);
move(-6.38,-6.40,0.00);  object(0x1CB2,0,350,223);
move(-9.64,-6.98,0.00);  object(0x1CB2,0,350,243);
move(-9.48,-3.71,0.00);  object(0x1CB2,0,350,253);
move(-12.20,-0.09,0.00);  object(0x1CB2,0,350,280);
move(-7.23,2.25,0.00);  object(0x1CB2,0,350,285);
move(-6.25,3.01,0.00);  object(0x1CB2,0,350,297);
move(-10.75,7.63,0.00);  object(0x1CB2,0,350,312);
move(-7.99,9.21,0.00);  object(0x1CB2,0,350,324);
move(-3.50,7.36,0.00);  object(0x1CB2,0,350,335);
move(-3.13,10.56,0.00);  object(0x1CB2,0,350,353);
move(2.75,11.71,0.00);  object(0x1CB2,0,350,23);
move(7.20,10.63,0.00);  object(0x1CB2,0,350,42);
move(10.52,6.51,0.00);  object(0x1CB2,0,350,80);
move(8.55,0.78,0.00);  object(0x1CB2,0,350,84);
move(-1.87,0.45,5.30);  object(0x1CB2,0,355,85);
move(12.92,0.46,0.00);  object(0x1CB2,0,355,92);
move(12.77,-2.39,0.00);  object(0x1CB2,0,355,107);
move(12.38,-5.35,0.00);  object(0x1CB2,0,355,124);
move(10.41,-9.50,0.00);  object(0x1CB2,0,355,140);
move(4.88,-9.84,0.00);  object(0x1CB2,0,355,168);
move(1.53,-13.18,0.00);  object(0x1CB2,0,355,182);
move(-2.03,-9.77,0.00);  object(0x1CB2,0,355,205);
move(-4.18,-5.03,0.00);  object(0x1CB2,0,355,223);
move(-5.52,-5.50,0.00);  object(0x1CB2,0,355,222);
move(-10.26,-7.30,0.00);  object(0x1CB2,0,355,242);
move(-9.30,-3.90,0.00);  object(0x1CB2,0,355,249);
move(-11.72,0.62,0.00);  object(0x1CB2,0,355,285);
move(-13.15,4.54,0.00);  object(0x1CB2,0,355,294);
move(-10.42,7.28,0.00);  object(0x1CB2,0,355,311);
move(-9.35,10.37,0.00);  object(0x1CB2,0,355,323);
move(-3.23,6.75,0.00);  object(0x1CB2,0,355,335);
move(-3.65,12.45,0.00);  object(0x1CB2,0,355,353);
move(1.99,9.86,0.00);  object(0x1CB2,0,355,19);
move(6.76,11.10,0.00);  object(0x1CB2,0,355,42);
move(7.15,7.20,0.00);  object(0x1CB2,0,355,43);
move(4.87,0.56,0.00);  object(0x1CB2,0,355,80);
moveto(-1444.00,-1174.41,48.81);  object(0x1CB2,0,10,318);
move(-10.85,8.69,0.00);  object(0x1CB2,0,10,300);
move(0.09,0.18,0.00);  object(0x1CB2,0,10,300);
move(-0.10,-0.17,0.00);  object(0x1CB2,0,10,300);
move(0.60,1.04,0.00);  object(0x1CB2,0,10,300);
move(-0.41,-0.66,0.00);  object(0x1CB2,0,10,301);
move(-11.32,4.92,0.00);  object(0x1CB2,0,10,287);
move(-13.41,2.11,0.00);  object(0x1CB2,0,10,270);
move(-13.91,-0.41,0.00);  object(0x1CB2,0,10,267);
move(-9.05,-0.74,-0.10);  object(0x1CB2,0,10,263);
move(-5.33,-3.00,0.00);  object(0x1CB2,0,10,221);
move(-4.44,-4.73,0.00);  object(0x1CB2,0,10,226);
move(-6.63,-10.60,0.00);  object(0x1CB2,0,10,200);
move(-1.39,-12.88,0.00);  object(0x1CB2,0,10,171);
move(3.55,-11.57,0.00);  object(0x1CB2,0,10,155);
move(6.03,-9.92,0.00);  object(0x1CB2,0,10,139);
move(7.29,-7.31,0.00);  object(0x1CB2,0,10,132);
move(10.32,-6.84,0.00);  object(0x1CB2,0,10,115);
move(0.04,0.09,0.00);  object(0x1CB2,0,10,115);
move(0.08,0.18,0.00);  object(0x1CB2,0,10,115);
move(11.86,-4.44,0.00);  object(0x1CB2,0,10,107);
move(11.43,-0.08,0.00);  object(0x1CB2,0,10,70);
moveto(-1438.64,-1184.79,48.66);  object(0x1CB2,0,355,169);
move(1.66,-12.92,0.00);  object(0x1CB2,0,355,180);
move(-1.67,-9.63,0.00);  object(0x1CB2,0,355,201);
move(-5.11,-6.58,0.00);  object(0x1CB2,0,355,223);
move(0.20,-0.11,5.50);  object(0x1CB2,0,0,222);
move(5.95,10.90,0.00);  object(0x1CB2,0,0,191);
move(0.07,13.85,0.00);  object(0x1CB2,0,0,171);
move(-1.64,8.56,0.00);  object(0x1CB2,0,0,170);
move(-2.09,4.10,0.00);  object(0x1CB2,0,0,138);
move(-3.08,3.46,0.00);  object(0x1CB2,0,0,138);
move(-10.57,8.18,0.00);  object(0x1CB2,0,0,119);
move(-11.75,5.27,0.00);  object(0x1CB2,0,0,107);
move(-12.74,1.97,0.00);  object(0x1CB2,0,0,89);
move(-14.47,-0.35,0.00);  object(0x1CB2,0,0,88);
move(-7.05,-0.69,0.00);  object(0x1CB2,0,0,85);
move(-4.80,-1.00,0.00);  object(0x1CB2,0,0,48);
move(-7.01,-6.28,0.00);  object(0x1CB2,0,0,48);
move(0.46,-0.50,0.00);  object(0x1CB2,0,0,47);
move(1.50,1.41,0.00);  object(0x1CB2,0,0,47);
move(2.99,2.81,0.00);  object(0x1CB2,0,0,47);
move(-11.37,-15.24,0.00);  object(0x1CB2,0,0,19);
move(-1.46,-11.24,0.00);  object(0x1CB2,0,0,354);
move(3.25,-12.42,0.00);  object(0x1CB2,0,0,337);
move(6.57,-11.56,0.00);  object(0x1CB2,0,0,322);
move(0.47,-0.59,0.00);  object(0x1CB2,0,0,324);
move(-1.04,-0.52,0.00);  object(0x1CB2,0,0,309);
move(6.68,-5.16,0.00);  object(0x1CB2,0,0,311);
move(0.00,0.00,0.00);  object(0x1CB2,0,0,311);
move(11.13,-7.20,0.00);  object(0x1CB2,0,0,295);
move(5.73,-8.41,0.00);  object(0x1CB2,0,0,262);
move(6.55,3.74,0.00);  object(0x1CB2,0,0,287);
moveto(-1461.55,-1229.88,48.07);  object(0x1CA4,0,10,67);
move(0.08,-0.18,2.00);  object(0x1CA4,0,10,67);
move(-0.18,0.57,-3.70);  object(0x1CA4,0,10,67);
move(14.87,9.21,0.80);  object(0x1CA4,0,5,33);
move(0.32,-0.13,2.80);  object(0x1CA4,0,5,34);
move(0.00,0.00,-0.20);  object(0x1CA4,0,5,34);
move(-2.85,-0.95,-2.60);  object(0x1CA4,270,0,312);
move(-1.83,-1.99,0.00);  object(0x1CA4,270,0,312);
move(-2.96,-1.94,0.00);  object(0x1CA4,270,0,330);
move(-3.74,-2.13,0.00);  object(0x1CA4,270,0,330);
move(-2.17,-1.24,0.00);  object(0x1CA4,270,0,330);
move(0.30,-0.52,0.00);  object(0x1CA4,270,0,330);
move(2.61,1.48,0.00);  object(0x1CA4,270,0,330);
move(3.13,1.78,0.00);  object(0x1CA4,270,0,330);
move(6.08,3.72,0.00);  object(0x1CA4,270,0,315);
move(-2.08,-1.88,0.00);  object(0x1CA4,270,0,315);
move(-2.74,-1.61,0.00);  object(0x1CA4,270,0,343);
move(-16.85,-5.44,6.90);  object(0x1CB2,0,0,68);
move(12.02,6.46,0.00);  object(0x1CB2,0,0,56);
move(7.78,5.29,0.00);  object(0x1CB2,0,0,56);
move(-1.71,-4.48,-2.50);  object(0x1CB2,0,270,53);
move(-3.72,-3.00,0.00);  object(0x1CB2,0,270,58);
move(1.75,-2.32,-4.30);  object(0x1CB2,0,255,61);
move(3.34,2.74,0.00);  object(0x1CB2,0,255,46);
move(9.97,-25.89,-6.06);  object(0x1CB2,0,255,228);
move(10.43,9.51,0.00);  object(0x1CB2,0,255,228);
move(4.18,-4.58,-1.50);  object(0x1CB2,0,255,228);
move(-9.99,-9.11,0.00);  object(0x1CB2,0,255,228);
move(3.91,-4.28,-1.70);  object(0x1CB2,0,255,228);
move(9.88,9.01,0.00);  object(0x1CB2,0,255,228);
move(-12.20,13.50,4.80);  object(0x1CB2,0,255,228);
move(-9.96,-9.09,0.00);  object(0x1CB2,0,255,228);
move(-4.18,4.58,1.70);  object(0x1CB2,0,255,228);
move(9.87,9.00,0.00);  object(0x1CB2,0,255,228);
move(19.41,-21.94,-7.90);  object(0x1CB2,320,255,227);
move(-9.51,-8.63,0.00);  object(0x1CB2,230,255,228);
move(2.28,5.43,0.50);  object(0x1CB2,270,255,228);
move(1.48,1.34,0.00);  object(0x1CB2,270,255,228);
move(6.02,-8.58,-2.60);  object(0x1CB2,270,255,228);
move(-31.69,15.36,11.80);  object(0x1CB2,15,180,321);
move(20.54,18.61,0.00);  object(0x1CB2,15,180,316);
move(9.07,-9.59,-3.50);  object(0x1CB2,15,180,318);
move(2.42,-3.24,-1.20);  object(0x1CB2,15,180,318);
move(-23.42,-15.27,1.20);  object(0x1CB2,15,180,318);
move(2.82,-3.09,-1.20);  object(0x1CB2,15,180,318);
move(10.93,-3.89,-3.30);  object(0x1CB2,15,180,276);
move(-3.30,0.32,0.90);  object(0x1CB2,15,180,276);
move(15.50,11.09,-0.80);  object(0x1CB2,15,180,9);
move(4.29,-18.43,-6.90);  object(0x1CB2,90,255,228);
move(4.42,-8.53,-2.50);  object(0x1CB2,90,260,264);
move(-2.08,-10.29,-2.00);  object(0x1CB2,90,260,299);
move(-7.38,-8.24,-2.20);  object(0x1CB2,90,260,325);
move(-10.03,-3.61,-1.80);  object(0x1CB2,90,260,0);
move(-10.34,1.33,-1.90);  object(0x1CB2,90,260,18);
move(-8.97,3.86,-1.70);  object(0x1CB2,90,260,34);
move(-8.43,5.74,-1.00);  object(0x1CB2,90,270,34);
move(-11.65,7.93,0.00);  object(0x1CB2,90,270,34);
move(-11.49,7.82,0.00);  object(0x1CB2,90,270,34);
move(-11.40,7.77,0.00);  object(0x1CB2,90,270,34);
move(-11.16,7.60,0.00);  object(0x1CB2,90,270,34);
move(-11.32,7.71,0.00);  object(0x1CB2,90,270,34);
move(-11.57,7.88,0.00);  object(0x1CB2,90,270,34);
move(-8.81,8.52,0.00);  object(0x1CB2,90,270,53);
move(-4.68,6.24,0.00);  object(0x1CB2,90,270,53);
move(-8.11,10.79,0.00);  object(0x1CB2,90,270,53);
move(-4.49,11.27,0.00);  object(0x1CB2,90,270,81);
move(-2.14,13.53,0.00);  object(0x1CB2,90,270,81);
move(1.46,11.72,0.00);  object(0x1CB2,90,270,113);
move(5.12,12.17,0.00);  object(0x1CB2,90,270,113);
moveto(-1532.49,-1224.15,11.25);  object(0x1CA4,0,0,113);
move(-6.03,-1.07,4.60);  object(0x1CB2,270,250,64);
move(4.03,2.96,0.00);  object(0x1CB2,270,250,42);
move(-1.12,-1.22,0.00);  object(0x1CB2,270,250,42);
move(5.29,-8.31,2.50);  object(0x1CB2,270,270,138);
move(-7.64,13.63,-2.90);  object(0x1CB2,270,270,51);
move(-0.93,47.14,3.00);  object(0x1CB2,270,270,23);
move(12.81,-5.40,-2.40);  object(0x1CB2,270,290,23);
teleport(-1511.25,-1160.72,19.47);

#cheat Custom Pastel Outfit
//try using it on a game that loads in the pastel suite. it may only possibly work on the EUR version of the game.
//face
sethex(0x9b263b0, 0xC8, 0x94, 0x78, 0xFF, 0x97, 0x75, 0x65, 0xFE, 0x81, 0x6A, 0x5F, 0xFF, 0xAC, 0x80, 0x6A, 0xFF, 0x8B, 0x6F, 0x62, 0xFF, 0xB6, 0x87, 0x6F, 0xFF, 0x75, 0x64, 0x5C, 0xFF, 0x9E, 0x76, 0x62, 0xFF, 0xB6, 0x86, 0x6C, 0xFF, 0x8B, 0x6D, 0x5F, 0xFF, 0x68, 0x5B, 0x56, 0xFF, 0xAC, 0x7E, 0x66, 0xFF, 0xA9, 0x73, 0x61, 0xFE, 0xA3, 0x78, 0x63, 0xFE, 0x77, 0x62, 0x59, 0xFF, 0x81, 0x68, 0x5B, 0xFF);
//hands
sethex(0x9b23b00, 0xCF, 0x95, 0x71, 0xFF, 0xA8, 0x78, 0x61, 0xFF, 0x97, 0x6F, 0x5B, 0xFE, 0xBB, 0x85, 0x65, 0xFF, 0x8F, 0x69, 0x57, 0xFF, 0x9F, 0x73, 0x5E, 0xFF, 0xC4, 0x8C, 0x6A, 0xFF, 0xB1, 0x7E, 0x62, 0xFF, 0xA4, 0x76, 0x5F, 0xFE, 0x8A, 0x66, 0x56, 0xFF, 0x9B, 0x71, 0x5C, 0xFF, 0x94, 0x6C, 0x58, 0xFF, 0xAC, 0x7B, 0x62, 0xFE, 0xCA, 0x90, 0x6D, 0xFF, 0xBE, 0x88, 0x68, 0xFF, 0xB5, 0x82, 0x64, 0xFF);
//shirt back
sethex(0x9b29140, 0x31, 0x31, 0x31, 0xFF, 0x13, 0x13, 0x13, 0xFF, 0x16, 0x16, 0x16, 0xFE, 0x0D, 0x0D, 0x0D, 0xFF, 0x18, 0x18, 0x18, 0xFF, 0x0A, 0x0A, 0x0A, 0xFF, 0x12, 0x12, 0x12, 0xFF, 0x1A, 0x1A, 0x1A, 0xFE, 0x15, 0x15, 0x15, 0xFE, 0x11, 0x11, 0x11, 0xFF, 0x1E, 0x1E, 0x1E, 0xFF, 0x05, 0x06, 0x05, 0xFF, 0x19, 0x19, 0x19, 0xFF, 0x0F, 0x0F, 0x0F, 0xFF, 0x11, 0x11, 0x11, 0xFF, 0x14, 0x14, 0x14, 0xFE);
//shoes
sethex(0x9b29d60, 0x3B, 0x3B, 0x3B, 0xFF, 0x0B, 0x0B, 0x0B, 0xFE, 0x1C, 0x1C, 0x1C, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x14, 0x14, 0x14, 0xFF, 0x2E, 0x2E, 0x2E, 0xFF, 0x01, 0x01, 0x01, 0xFE, 0x0D, 0x0D, 0x0D, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x04, 0x04, 0x04, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x23, 0x23, 0x23, 0xFF, 0x18, 0x18, 0x18, 0xFF, 0x28, 0x28, 0x28, 0xFF, 0x35, 0x35, 0x35, 0xFF);
//inside shirt
sethex(0x9b2ca10, 0x00, 0xB1, 0xB1, 0xFF, 0x00, 0x6D, 0x6D, 0xFF, 0x00, 0x93, 0x93, 0xFE, 0x00, 0x42, 0x42, 0xFF, 0x00, 0x7C, 0x7C, 0xFE, 0x00, 0xA1, 0xA1, 0xFF, 0x00, 0x5A, 0x5A, 0xFF, 0x00, 0x2B, 0x2B, 0xFF, 0x00, 0x85, 0x85, 0xFE, 0x00, 0xAC, 0xAC, 0xFF, 0x00, 0x8B, 0x8B, 0xFE, 0x00, 0x99, 0x99, 0xFF, 0x00, 0x64, 0x64, 0xFE, 0x00, 0xA6, 0xA6, 0xFF, 0x00, 0x53, 0x53, 0xFF, 0x00, 0x74, 0x74, 0xFE);
//pants
sethex(0x9b25790, 0x4C, 0x4C, 0x4C, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x0F, 0x0F, 0xFF, 0x07, 0x07, 0x07, 0xFF, 0x16, 0x16, 0x16, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFE, 0x21, 0x21, 0x21, 0xFF, 0x12, 0x12, 0x12, 0xFE, 0x0C, 0x0C, 0x0C, 0xFE, 0x19, 0x19, 0x19, 0xFF, 0x03, 0x03, 0x03, 0xFF, 0x1A, 0x1A, 0x1A, 0xFF, 0x0A, 0x0A, 0x0A, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x1D, 0x1D, 0x1D, 0xFF);
//shirt front
sethex(0x9b22e70, 0x22, 0x22, 0x22, 0xFF, 0x14, 0x14, 0x14, 0xFE, 0x11, 0x11, 0x11, 0xFF, 0x1B, 0x1B, 0x1B, 0xFF, 0x0A, 0x0A, 0x0A, 0xFF, 0x17, 0x17, 0x17, 0xFE, 0x0D, 0x0D, 0x0D, 0xFF, 0x1F, 0x1F, 0x1F, 0xFF, 0x12, 0x12, 0x12, 0xFF, 0x10, 0x10, 0x10, 0xFF, 0x15, 0x15, 0x15, 0xFE, 0x13, 0x13, 0x13, 0xFE, 0x19, 0x19, 0x19, 0xFF, 0x08, 0x08, 0x08, 0xFF, 0x1D, 0x1D, 0x1D, 0xFF, 0x19, 0x19, 0x19, 0xFE);

#cheat Camoflauge Weapons
//this is only known to work on some weapons. the sniper, rocket launcher, ak-47, and I think an uzi are some of them. but it may work on others.
sethex(0x9da34e0, 0x00, 0x20, 0x00, 0xFF, 0x00, 0x40, 0x00, 0xFF, 0x00, 0x60, 0x00, 0xFF, 0x00, 0x80, 0x00, 0xFF, 0x00, 0xA0, 0x00, 0xFF, 0x00, 0xC0, 0x00, 0xFF, 0x00, 0x10, 0x00, 0xFF, 0x00, 0x30, 0x00, 0xFF, 0x00, 0x50, 0x00, 0xFF, 0x00, 0x70, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xB0, 0x00, 0xFF, 0x00, 0xD0, 0x00, 0xFF, 0x00, 0x30, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF);
sethex(0x9d97fe0, 0x00, 0x20, 0x00, 0xFF, 0x00, 0x40, 0x00, 0xFF, 0x00, 0x60, 0x00, 0xFF, 0x00, 0x80, 0x00, 0xFF, 0x00, 0xA0, 0x00, 0xFF, 0x00, 0xC0, 0x00, 0xFF, 0x00, 0x10, 0x00, 0xFF, 0x00, 0x30, 0x00, 0xFF, 0x00, 0x50, 0x00, 0xFF, 0x00, 0x70, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xB0, 0x00, 0xFF, 0x00, 0xD0, 0x00, 0xFF, 0x00, 0x30, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF);
sethex(0x9d91100, 0x00, 0x20, 0x00, 0xFF, 0x00, 0x40, 0x00, 0xFF, 0x00, 0x60, 0x00, 0xFF, 0x00, 0x80, 0x00, 0xFF, 0x00, 0xA0, 0x00, 0xFF, 0x00, 0xC0, 0x00, 0xFF, 0x00, 0x10, 0x00, 0xFF, 0x00, 0x30, 0x00, 0xFF, 0x00, 0x50, 0x00, 0xFF, 0x00, 0x70, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xB0, 0x00, 0xFF, 0x00, 0xD0, 0x00, 0xFF, 0x00, 0x30, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF);
sethex(0x9d8ae30, 0x00, 0x20, 0x00, 0xFF, 0x00, 0x40, 0x00, 0xFF, 0x00, 0x60, 0x00, 0xFF, 0x00, 0x80, 0x00, 0xFF, 0x00, 0xA0, 0x00, 0xFF, 0x00, 0xC0, 0x00, 0xFF, 0x00, 0x10, 0x00, 0xFF, 0x00, 0x30, 0x00, 0xFF, 0x00, 0x50, 0x00, 0xFF, 0x00, 0x70, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xB0, 0x00, 0xFF, 0x00, 0xD0, 0x00, 0xFF, 0x00, 0x30, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF);
sethex(0x9d9f280, 0x00, 0x20, 0x00, 0xFF, 0x00, 0x40, 0x00, 0xFF, 0x00, 0x60, 0x00, 0xFF, 0x00, 0x80, 0x00, 0xFF, 0x00, 0xA0, 0x00, 0xFF, 0x00, 0xC0, 0x00, 0xFF, 0x00, 0x10, 0x00, 0xFF, 0x00, 0x30, 0x00, 0xFF, 0x00, 0x50, 0x00, 0xFF, 0x00, 0x70, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xB0, 0x00, 0xFF, 0x00, 0xD0, 0x00, 0xFF, 0x00, 0x30, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF);

#cheat Sky Ramp
//the ramp at the top of the thing is a little screwed up, and keeping balance on this is hard.
moveto(-1724.99,-913.95,28.67);  object(0x1CA6,345,0,0);
move(-0.00,0.60,-2.40);  object(0x1CA6,340,0,0);
move(-0.00,0.40,-1.50);  object(0x1CA6,335,0,0);
move(-0.00,0.30,-0.80);  object(0x1CA6,330,0,0);
move(-0.05,0.52,-1.50);  object(0x1CA6,320,0,0);
move(0.00,0.50,-1.40);  object(0x1CA6,310,0,0);
move(0.01,1.10,-1.30);  object(0x1CA6,300,0,0);
move(0.01,1.90,-1.20);  object(0x1CA6,290,0,0);
move(0.01,2.10,-1.00);  object(0x1CA6,280,0,0);
move(0.01,2.60,-0.60);  object(0x1CA6,270,0,0);
move(0.02,3.40,-0.10);  object(0x1CA6,265,0,0);
move(0.01,2.30,0.10);  object(0x1CA6,260,0,0);
move(0.01,2.20,0.30);  object(0x1CA6,255,0,0);
move(0.01,2.10,0.40);  object(0x1CA6,250,0,0);
move(0.01,2.00,0.60);  object(0x1CA6,245,0,0);
move(0.01,2.80,1.20);  object(0x1CA6,240,0,0);
move(0.01,2.60,1.40);  object(0x1CA6,235,0,0);
move(0.01,2.20,1.40);  object(0x1CA6,230,0,0);
move(0.01,2.40,1.90);  object(0x1CA6,225,0,0);
move(0.01,2.30,2.30);  object(0x1CA6,220,0,0);
move(0.01,1.70,1.90);  object(0x1CA6,215,0,0);
move(0.01,1.60,2.20);  object(0x1CA6,210,0,0);
move(0.01,1.50,2.40);  object(0x1CA6,205,0,0);
move(0.01,1.10,2.10);  object(0x1CA6,200,0,0);
move(0.00,0.80,1.80);  object(0x1CA6,195,0,0);
move(0.00,0.80,2.60);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
moveto(-1724.99,-730.02,847.36);  object(0x1CA6,340,0,180);
move(-0.00,2.06,3.60);  object(0x1CA6,330,0,180);
move(-0.00,2.51,3.00);  object(0x1CA6,320,0,180);
move(-0.00,3.06,2.60);  object(0x1CA6,310,0,180);
move(-0.00,3.32,1.90);  object(0x1CA6,300,0,180);
move(-0.00,3.66,1.30);  object(0x1CA6,290,0,180);
move(-0.00,4.04,0.70);  object(0x1CA6,280,0,180);
move(-0.00,4.12,0.00);  object(0x1CA6,270,0,180);
move(0.00,-2.60,0.00);  object(0x1CA6,270,0,180);
move(-0.01,6.50,0.00);  object(0x1CA6,270,0,180);
moveto(-1734.79,-913.95,28.67);  object(0x1CA6,345,0,0);
move(-0.00,0.60,-2.40);  object(0x1CA6,340,0,0);
move(-0.00,0.40,-1.50);  object(0x1CA6,335,0,0);
move(-0.00,0.30,-0.80);  object(0x1CA6,330,0,0);
move(-0.05,0.52,-1.50);  object(0x1CA6,320,0,0);
move(0.00,0.50,-1.40);  object(0x1CA6,310,0,0);
move(0.01,1.10,-1.30);  object(0x1CA6,300,0,0);
move(0.01,1.90,-1.20);  object(0x1CA6,290,0,0);
move(0.01,2.10,-1.00);  object(0x1CA6,280,0,0);
move(0.01,2.60,-0.60);  object(0x1CA6,270,0,0);
move(0.02,3.40,-0.10);  object(0x1CA6,265,0,0);
move(0.01,2.30,0.10);  object(0x1CA6,260,0,0);
move(0.01,2.20,0.30);  object(0x1CA6,255,0,0);
move(0.01,2.10,0.40);  object(0x1CA6,250,0,0);
move(0.01,2.00,0.60);  object(0x1CA6,245,0,0);
move(0.01,2.80,1.20);  object(0x1CA6,240,0,0);
move(0.01,2.60,1.40);  object(0x1CA6,235,0,0);
move(0.01,2.20,1.40);  object(0x1CA6,230,0,0);
move(0.01,2.40,1.90);  object(0x1CA6,225,0,0);
move(0.01,2.30,2.30);  object(0x1CA6,220,0,0);
move(0.01,1.70,1.90);  object(0x1CA6,215,0,0);
move(0.01,1.60,2.20);  object(0x1CA6,210,0,0);
move(0.01,1.50,2.40);  object(0x1CA6,205,0,0);
move(0.01,1.10,2.10);  object(0x1CA6,200,0,0);
move(0.00,0.80,1.80);  object(0x1CA6,195,0,0);
move(0.00,0.80,2.60);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
move(0.00,0.70,4.00);  object(0x1CA6,190,0,0);
moveto(-1734.79,-730.02,847.36);  object(0x1CA6,340,0,180);
move(-0.00,2.06,3.60);  object(0x1CA6,330,0,180);
move(-0.00,2.51,3.00);  object(0x1CA6,320,0,180);
move(-0.00,3.06,2.60);  object(0x1CA6,310,0,180);
move(-0.00,3.32,1.90);  object(0x1CA6,300,0,180);
move(-0.00,3.66,1.30);  object(0x1CA6,290,0,180);
move(-0.00,4.04,0.70);  object(0x1CA6,280,0,180);
move(-0.00,4.12,0.00);  object(0x1CA6,270,0,180);
move(0.00,-2.60,0.00);  object(0x1CA6,270,0,180);
move(-0.01,6.50,0.00);  object(0x1CA6,270,0,180);
teleport(-1724.99,-913.95,32);

#cheat (T)=2B
teleport(50,0,2000000000);

#cheat cs (T)
teleport(-845.27, 1218.44, 16.20);

#cheat car spawns
//these are spawns for my showroom I made in the drifting topic. it contains pmg'd cars, but the spawn angles are screwed up, I never got around to fixing them, but the code still works.
pspawn = 0x08E81260;
setint(pspawn, 200);
setfloat(pspawn + 4, -845.27, 1218.44, 16.20, 310);
pspawn += 0x30;
setint(pspawn, 255);
setfloat(pspawn + 4, -814.99, 1215.15, 16.58, 180);
pspawn += 0x30;
setint(pspawn, 200);
setfloat(pspawn + 4, -846, 1252.7, 19.47, 190);
pspawn += 0x30;
setint(pspawn, 211);
setfloat(pspawn + 4, -843.44, 1236.49, 19.47, 190);
pspawn += 0x30;
setint(pspawn, 256);
setfloat(pspawn + 4, -843.52, 1227.88, 19.46, 190);
pspawn += 0x30;
setint(pspawn, 186);
setfloat(pspawn + 4, -827.93, 1228.93, 19.47, 315);
pspawn += 0x30;
setint(pspawn, 254);
setfloat(pspawn + 4, -798.99, 1199.17, 19.46, 90);
pspawn += 0x30;
setint(pspawn, 175);
setfloat(pspawn + 4, -808.84, 1199.17, 19.46, 90);
pspawn += 0x30;
setint(pspawn, 245);
setfloat(pspawn + 4, -807.07, 1217.25, 19.46, 225);
pspawn += 0x30;
setint(pspawn, 206);
setfloat(pspawn + 4, -821.96, 1205.52, 16.09, 225);
pspawn += 0x30;
setint(pspawn, 172);
setfloat(pspawn + 4, -826.27, 1211.18, 16.01, 225);
pspawn += 0x30;
setint(pspawn, 187);
setfloat(pspawn + 4, -835.75, 1217.63, 16.01, 225);
pspawn += 0x30;
setint(pspawn, 209);
setfloat(pspawn + 4, -830.91, 1203.96, 16.11, 225);
pspawn += 0x30;
setint(pspawn, 184);
setfloat(pspawn + 4, -846.73, 1211.31, 16.01, 270);
pspawn += 0x30;
setint(pspawn, 275);
setfloat(pspawn + 4, -844.26, 1274.23, 24.06, 270);
pspawn += 0x30;
setint(pspawn, 246);
setfloat(pspawn + 4, -770.52, 1242.46, 24.34, 180);
pspawn += 0x30;
setint(pspawn, 252);
setfloat(pspawn + 4, -788.92, 1250, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 231);
setfloat(pspawn + 4, -788.92, 1253, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 229);
setfloat(pspawn + 4, -788.92, 1256, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 212);
setfloat(pspawn + 4, -788.92, 1259, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 205);
setfloat(pspawn + 4, -788.92, 1262, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 178);
setfloat(pspawn + 4, -788.92, 1265, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 230);
setfloat(pspawn + 4, -788.92, 1268, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 232);
setfloat(pspawn + 4, -788.92, 1271, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 259);
setfloat(pspawn + 4, -787.49, 1276.50, 25.04, 0);
pspawn += 0x30;
setint(pspawn, 170);
setfloat(pspawn + 4, -826.69, 1241.57, 24.72, 45);
pspawn += 0x30;
setint(pspawn, 198);
setfloat(pspawn + 4, -814.75, 1275.91, 24.72, 180);
pspawn += 0x30;
setint(pspawn, 213);
setfloat(pspawn + 4, -812.10, 1263.10, 24.72, 0);
pspawn += 0x30;
//pmg cars
//quad
setint(0x08C739B0,  230);
setfloat(0x9633fc0+0x74, 0.4);
setfloat(0x9633fc0+0x78, 0.3);
setfloat(0x9633fc0+0x7c, .5);
setfloat(0x9633fc0+0x80, -0.2);
setfloat(0x9633fc0+0x84, 0.4);
setfloat(0x9633fc0+0x88, 1);
setfloat(0x936e578, 1.085, 1.085);
setfloat(0x9633fc0+0xc4, 0.80);
setfloat(0x9633fc0+0x70, 0.50);
setfloat(0x9633fc0+0x6c, 0.95);
setfloat(0x9633fc0+0xbc, 250000, 796870);
setfloat(0x9633fc0+0xa0, 0);
setfloat(0x9633fc0+0xa4, -.1);
setfloat(0x9633fc0+0xa8, -1.2);
setfloat(0x9633fc0+0x68, 35);
setchar(0x9633fc0+0x5c, '4', 'D', 5);
//caddy
setint(0x08C739B0,  206);
setchar(0x08C739d4, 127, 0, 255, 255);
setchar(0x08C739d8,  255, 255, 255, 255);
setfloat(0x962f3e0+0x88, 0);
setfloat(0x962f3e0+0xc4, 0.6);
setfloat(0x962f3e0+0x70, 0.5);
setfloat(0x962f3e0+0x6c, 0.8);
setfloat(0x962f3e0+0xbc, 2000);
setfloat(0x962f3e0+0xc0, 1600);
setfloat(0x962f3e0+0xa0, 0);
setfloat(0x962f3e0+0xa4, .1);
setfloat(0x962f3e0+0xa8, 0);
setfloat(0x962f3e0+0x68, 50);
setfloat(0x962f3e0+0xb8, 500);
setfloat(0x962f3e0+0xb4, 30);
setfloat(0x962f3e0+0xb0, 75);
setchar(0x962f3e0+0x5c, 'R', 'P', 5);
//phoenix
setint(0x08C739B0, 187);
setchar(0x08C739d4, 0, 100, 255, 255);
setfloat(0x96334A0+0x88, 0);
setfloat(0x96334A0+0xc4, 0.55);
setfloat(0x96334A0+0x70, 0.5);
setfloat(0x96334A0+0x6c, 0.85);
setfloat(0x96334A0+0xbc, 2000);
setfloat(0x96334A0+0xc0, 1700);
setfloat(0x96334A0+0xa0, 0);
setfloat(0x96334A0+0xa4, .1);
setfloat(0x96334A0+0xa8, 0);
setfloat(0x96334A0+0x68, 50);
setfloat(0x96334A0+0xb8, 500);
setfloat(0x96334A0+0xb4, 30);
setint(0x96334A0+0xb0, 75);
setchar(0x96334A0+0x5c, 'R', 'P', 5);
//deluxo
//setfloat(0x962f680+0x74, .96);
//setfloat(0x962f680+0x78, .091);
//setfloat(0x962f680+0x7c, 0.255);
//setfloat(0x962f680+0x80, 0.5);
//setfloat(0x962f680+0x84, 0.23);
setfloat(0x962f680+0x88, .2);
setfloat(0x962f680+0xc4, 0.748);
setfloat(0x962f680+0x70, 0.52);
setfloat(0x962f680+0x6c, 0.748);
setfloat(0x962f680+0xbc, 1800);
setfloat(0x962f680+0xc0, 3700);
setfloat(0x962f680+0xa0, 0);
setfloat(0x962f680+0xa4, 0.1);
setfloat(0x962f680+0xa8, .25);
setfloat(0x962f680+0x68, 31);
setchar(0x962f680+0x5c, '4', 'P', 5);
setfloat(0x962f680+0xb8, 25.8);
setfloat(0x962f680+0xb4, 4250);
setint(0x962f680+0xb0, 75);
setfloat(0x9360e38, .75, .75);
R = 0;
G = 255;
B = 255;
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon, R, G, B);}
//mesa
setshort(0x98a30ca, 'R', 'o', 'c', 'k', 'C', 'r', 'a', 'w', 'l', 'e', 'r');
setfloat(0x9633200+0x74, 0.6);
setfloat(0x9633200+0x78, 5);
setfloat(0x9633200+0x7c, 0);
setfloat(0x9633200+0x80, -0.9);
setfloat(0x9633200+0x84, 0.5);
setfloat(0x9633200+0x88, 0);
setfloat(0x936cb38, 1.6, 1.6);
setfloat(0x9633200+0xc4, 0.75);
setfloat(0x9633200+0x70, 0.50);
setfloat(0x9633200+0x6c, 0.95);
setfloat(0x9633200+0xbc, 1250);
setfloat(0x9633200+0xc0, 3000);
setfloat(0x9633200+0xa0, 0);
setfloat(0x9633200+0xa4, 0);
setfloat(0x9633200+0xa8, -1.5);
setfloat(0x9633200+0x68, 35);
setchar(0x9633200+0x5c, '4', 'D', 4);
//stallion
setint(0x08C739B0,  206);
setchar(0x08C739d4, 127, 0, 255, 255);
setchar(0x08C739d8,  255, 255, 255, 255);
setfloat(0x9630800+0x74, .25);
setfloat(0x9630800+0x78, 1.5);
setfloat(0x9630800+0x7c, .03);
setfloat(0x9630800+0x80, -0.02);
setfloat(0x9630800+0x84, 0.5);
setfloat(0x9630800+0x88, 0);
setfloat(0x9367f18, 1.35, 1.35);
setfloat(0x9630800+0xc4, 0.6);
setfloat(0x9630800+0x70, 0.5);
setfloat(0x9630800+0x6c, 0.8);
setfloat(0x9630800+0xbc, 2000);
setfloat(0x9630800+0xc0, 1600);
setfloat(0x9630800+0xa0, 0);
setfloat(0x9630800+0xa4, .1);
setfloat(0x9630800+0xa8, 0);
setfloat(0x9630800+0x68, 50);
setfloat(0x9630800+0xb8, 250);
setfloat(0x9630800+0xb4, 30);
setfloat(0x9630800+0xb0, 75);
setchar(0x9630800+0x5c, 'R', 'P', 5);
off();
 
#cheat Map Maker
//I believe this is just the cheat I used to allow me to make the top down map of Vice City. I'll be uploading the fullsize map.
//TOP DOWN
setfloat(0x8BC7FC4, -2);
//direction
setchar(pplayer+0x10, 0x18, 0x32, 0x15, 0x3c);
//camera distance
setfloat(0x8bc86c0, 150);
//invisible car
setchar(pcar+0x4A,  0x15);
//no traffic
static counter;
if(counter++ % 30 == 0) {
 for(p=0x098edcc0; p <= 0x099019a0; p+=0x820) {
      if(p != pcar) setchar(p + 0x4c,  1);
 }
}
//kill all peds
{
player = getint(0x08bc8170); //address of pplayer
for(i=0; 0x098b4a40+i<=0x098ecf90; i+=0xd10) {
  if(0x098b4a40 + i != player) setfloat(0x098b4a40 + i + 0x4e4,  0);
}
}
//invisible Vic
setchar(pplayer+0x4C,  0x10);
setchar(pplayer+0x4D,  0x20);
//sunny weather
setchar(0x8bb458c, 0);
setchar(0x8bb3df8, 0);
setchar(0x8bb3e00, 0);
//time minutes
setchar(0x8bb3b41, 0);
//invisible traffic
setchar(0x08bb2450,  1);
#off
setchar(0x08bb2450,  0);
setchar(pplayer+0x4C,  0x00);
setchar(pplayer+0x4D,  0x00);
setchar(pcar+0x4A,  0x18);
 
#cheat Mclaren F1
//I ported over someones mclaren f1 from LCS, but never actually posted it. I don't think I told anyone about it.
setshort(0x98a2edc, 'M', 'c', 'l', 'a', 'r', 'e', 'n', ' ', 'F', '1');
setint(0x08C739B0,  186);
setfloat(0x9631d60+0x74, 1);
setfloat(0x9631d60+0x78, .13);
setfloat(0x9631d60+0x7c, 0.075);
setfloat(0x9631d60+0x80, -0.0625);
setfloat(0x9631d60+0x84, 0.45);
setfloat(0x9631d60+0x88, .3);
setfloat(0x9360b98, .875, .875);
setfloat(0x9631d60+0xc4, 0.975);
setfloat(0x9631d60+0x70, 0.48);
setfloat(0x9631d60+0x6c, 1.6);
setfloat(0x9631d60+0xbc, 1112.5);
setfloat(0x9631d60+0xc0, 4000);
setfloat(0x9631d60+0xa0, 0);
setfloat(0x9631d60+0xa4, -0.1499);
setfloat(0x9631d60+0xa8, -0.199);
setfloat(0x9631d60+0x68, 30);
setchar(0x9631d60+0x5c, '4', 'P', 6);
off();

#cheat Gameplay speed really really slow
setfloat(0x08BB3B58, 0);
 
#cheat gameplay speed slower
setfloat(0x08BB3B58, .5);
 
#cheat gameplay speed fast
setfloat(0x08BB3B58, 2);
 
#cheat gameplay speed really fast
setfloat(0x08BB3B58, 10);
 
#cheat gameplay speed normal
setfloat(0x08BB3B58, 1);

#cheat Tall Ramp
//my first attempt at making a tall ramp thing. it's not too ridable but I'll release it anyways. it's at the tall control tower at the airport.
moveto(-1690.38,-931.18,89.38);  object(0x1CA4,90,0,0);
move(4.00,0.02,0.00);  object(0x1CA4,90,0,0);
move(4.00,0.02,0.00);  object(0x1CA4,90,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,90,0,0);
move(0.02,-2.70,0.00);  object(0x1CA4,90,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,90,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,90,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,90,0,0);
move(0.02,-2.60,0.00);  object(0x1CA4,90,0,0);
move(4.00,0.02,0.00);  object(0x1CA4,90,0,0);
move(4.00,0.02,0.00);  object(0x1CA4,90,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,90,0,0);
move(0.02,-2.80,-0.30);  object(0x1CA4,80,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,80,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,80,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,80,0,0);
move(10.46,-2.44,-0.70);  object(0x1CA4,70,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,70,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,70,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,70,0,0);
move(10.52,-2.44,-1.20);  object(0x1CA4,60,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,60,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,60,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,60,0,0);
move(10.51,-2.14,-1.60);  object(0x1CA4,50,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,50,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,50,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,50,0,0);
move(10.49,-1.94,-2.00);  object(0x1CA4,40,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,40,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,40,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,40,0,0);
move(10.51,-1.54,-2.30);  object(0x1CA4,30,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,30,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,30,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,30,0,0);
move(10.52,-1.04,-2.40);  object(0x1CA4,20,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,20,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,20,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,20,0,0);
move(10.49,-0.64,-2.70);  object(0x1CA4,10,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,10,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,10,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,10,0,0);
move(10.46,-0.14,-2.80);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,0.00);  object(0x1CA4,0,0,0);
move(-0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(10.50,-0.26,-2.80);  object(0x1CA4,10,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,10,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,10,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,10,0,0);
move(10.50,-0.66,-2.60);  object(0x1CA4,20,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,20,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,20,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,20,0,0);
move(10.50,-0.66,-1.20);  object(0x1CA4,30,0,0);
move(-2.40,-0.01,0.00);  object(0x1CA4,30,0,0);
move(-4.10,-0.01,0.00);  object(0x1CA4,30,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,30,0,0);
move(10.50,-0.86,-1.20);  object(0x1CA4,40,0,0);
move(-2.40,-0.01,0.00);  object(0x1CA4,40,0,0);
move(-4.10,-0.01,0.00);  object(0x1CA4,40,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,40,0,0);
move(10.50,-0.96,-0.90);  object(0x1CA4,50,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,50,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,50,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,50,0,0);
move(10.50,-1.06,-0.70);  object(0x1CA4,60,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,60,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,60,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,60,0,0);
move(10.48,-1.36,-0.50);  object(0x1CA4,75,0,0);
move(-2.40,-0.01,0.00);  object(0x1CA4,75,0,0);
move(-4.10,-0.01,0.00);  object(0x1CA4,75,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,75,0,0);
move(10.64,-39.35,0.00);  object(0x1CA4,100,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,100,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,100,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,100,0,0);
move(10.51,-2.36,0.70);  object(0x1CA4,110,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,110,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,110,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,110,0,0);
move(10.51,-1.66,0.80);  object(0x1CA4,120,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,120,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,120,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,120,0,0);
move(10.51,-1.56,1.10);  object(0x1CA4,130,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,130,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,130,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,130,0,0);
move(10.47,-1.06,1.10);  object(0x1CA4,145,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,145,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,145,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,145,0,0);
off();
 
#cheat Deluxo Drift V2.0
//This is my final version of the drifitng deluxo. ALL OF THE PMG ELEMENTS ARE CLEARLY DEFINED. have a ball.
//garage information//
setint(0x08C739B0,  187); //vehicle identifier
setchar(0x08C739d4, 0, 100, 255, 255); //vehicle base color RGB values
setchar(0x08C739d4, 0, 100, 255, 255); //vehicle stripe color RGB.
//suspension information//
//setfloat(0x962f680+0x74, .96); //suspension force
//setfloat(0x962f680+0x78, .091); //suspension damping
//setfloat(0x962f680+0x7c, 0.255); //upper limit
//setfloat(0x962f680+0x80, 0.5); //lower limit
//setfloat(0x962f680+0x84, 0.23); //bias
setfloat(0x962f680+0x88, .2); //anti-dive
//tire information//
setfloat(0x962f680+0xc4, 0.748); //traction loss
setfloat(0x962f680+0x70, 0.52); //traction bias
setfloat(0x962f680+0x6c, 0.748); //traction multiplier
//handling information//
setfloat(0x962f680+0xbc, 1800); //mass
setfloat(0x962f680+0xc0, 3700); //turn mass
setfloat(0x962f680+0xa0, 0); //center of mass X
setfloat(0x962f680+0xa4, 0.1); //center of mass Y
setfloat(0x962f680+0xa8, .25); //center of mass Z
setfloat(0x962f680+0x68, 31); //steering lo

#cheat Deluxo Drift V6.0 UtraX
//This is my final version of the drifitng deluxo. ALL OF THE PMG ELEMENTS ARE CLEARLY DEFINED. have a ball.
//garage information//
setint(0x08C739B0,  187); //vehicle identifier
setchar(0x08C739d4, 0, 100, 255, 255); //vehicle base color RGB values
setchar(0x08C739d4, 0, 10, 155, 25); //vehicle stripe color RGB.
//suspension information//
//setfloat(0x962f680+0x74, 1); //suspension force
//setfloat(0x962f680+0x78, .099); //suspension damping
//setfloat(0x962f680+0x7c, 0.4); //upper limit
//setfloat(0x962f680+0x80, 0.81); //lower limit
//setfloat(0x962f680+0x84, 0.7); //bias
setfloat(0x962f680+0x88, .5); //anti-dive
//tire information//
setchar(0x9632f680+0x5c, '340', '5500', 70); // Drive type / Engine type / Gears
setfloat(0x962f680+0xc4, 0.848); //traction loss
setfloat(0x962f680+0x70, 0.62); //traction bias
setfloat(0x962f680+0x6c, 0.848); //traction multiplier
//handling information//
setfloat(0x962f680+0xbc, 2100); //mass
setfloat(0x962f680+0xc0, 3900); //turn mass
setfloat(0x962f680+0xa0, 0); //center of mass X
setfloat(0x962f680+0xa4, 0.1); //center of mass Y
setfloat(0x962f680+0xa8, .25); //center of mass Z
setfloat(0x962f680+0x68, 33); //steering lo

#cheat rocket launcher infinate ammo ( Rapid Fire Included )
//by: Psphacker108
setchar(0x98B5088, 0x0c, 0x00, 0x01);
setchar(0x98B5084, 0x50);
#cheat Rocket Launcher Infinate amo
//by: Psphacker108
setchar(0x98B5088, 0x0c, 0x00, 0x01);
#cheat Pistol Counts up ( untill reload then the process starts all over again )
//by: Psphacker108
setchar(0x98B5018, 0x50);

#cheat Infinate Adrenaline
//by psphacker
setchar(0x08BB3B5B, 0x8f);
#off
setchar(0x08BB3B5B, 0x3f);

#cheat Custom Pastel Outfit 2
//all credit goes to vettefan88
//face
sethex(0x9b263b0, 0xC8, 0x94, 0x78, 0xFF, 0x97, 0x75, 0x65, 0xFE, 0x81, 0x6A, 0x5F, 0xFF, 0xAC, 0x80, 0x6A, 0xFF, 0x8B, 0x6F, 0x62, 0xFF, 0xB6, 0x87, 0x6F, 0xFF, 0x75, 0x64, 0x5C, 0xFF, 0x9E, 0x76, 0x62, 0xFF, 0xB6, 0x86, 0x6C, 0xFF, 0x8B, 0x6D, 0x5F, 0xFF, 0x68, 0x5B, 0x56, 0xFF, 0xAC, 0x7E, 0x66, 0xFF, 0xA9, 0x73, 0x61, 0xFE, 0xA3, 0x78, 0x63, 0xFE, 0x77, 0x62, 0x59, 0xFF, 0x81, 0x68, 0x5B, 0xFF);
//hands
sethex(0x9b23b00, 0x4F, 0x4F, 0x4F, 0xFF, 0x28, 0x28, 0x28, 0xFF, 0x08, 0x08, 0x08, 0xFE, 0x3B, 0x3B, 0x3B, 0xFF, 0x0F, 0x0F, 0x0F, 0xFF, 0x0F, 0x0F, 0x0F, 0xFF, 0x34, 0x34, 0x34, 0xFF, 0x21, 0x21, 0x21, 0xFF, 0x14, 0x14, 0x14, 0xFE, 0x0A, 0x0A, 0x0A, 0xFF, 0x0B, 0x0B, 0x0B, 0xFF, 0x04, 0x04, 0x04, 0xFF, 0x1C, 0x1C, 0x1C, 0xFE, 0x3A, 0x3A, 0x3A, 0xFF, 0x2E, 0x2E, 0x2E, 0xFF, 0x25, 0x25, 0x25, 0xFF);
//shirt back
sethex(0x9b29140, 0x31, 0x31, 0x31, 0xFF, 0x13, 0x13, 0x13, 0xFF, 0x16, 0x16, 0x16, 0xFE, 0x0D, 0x0D, 0x0D, 0xFF, 0x18, 0x18, 0x18, 0xFF, 0x0A, 0x0A, 0x0A, 0xFF, 0x12, 0x12, 0x12, 0xFF, 0x1A, 0x1A, 0x1A, 0xFE, 0x15, 0x15, 0x15, 0xFE, 0x11, 0x11, 0x11, 0xFF, 0x1E, 0x1E, 0x1E, 0xFF, 0x05, 0x06, 0x05, 0xFF, 0x19, 0x19, 0x19, 0xFF, 0x0F, 0x0F, 0x0F, 0xFF, 0x11, 0x11, 0x11, 0xFF, 0x14, 0x14, 0x14, 0xFE);
//shoes
sethex(0x9b29d60, 0x3B, 0x3B, 0x3B, 0xFF, 0x0B, 0x0B, 0x0B, 0xFE, 0x1C, 0x1C, 0x1C, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x14, 0x14, 0x14, 0xFF, 0x2E, 0x2E, 0x2E, 0xFF, 0x01, 0x01, 0x01, 0xFE, 0x0D, 0x0D, 0x0D, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x04, 0x04, 0x04, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x23, 0x23, 0x23, 0xFF, 0x18, 0x18, 0x18, 0xFF, 0x28, 0x28, 0x28, 0xFF, 0x35, 0x35, 0x35, 0xFF);
//inside shirt
sethex(0x9b2ca10, 0xB1, 0x00, 0x00, 0xFF, 0x6D, 0x00, 0x00, 0xFF, 0x93, 0x00, 0x00, 0xFE, 0x42, 0x00, 0x00, 0xFF, 0x7C, 0x00, 0x00, 0xFE, 0xA1, 0x00, 0x00, 0xFF, 0x5A, 0x00, 0x00, 0xFF, 0x2B, 0x00, 0x00, 0xFF, 0x85, 0x00, 0x00, 0xFE, 0xAC, 0x00, 0x00, 0xFF, 0x8B, 0x00, 0x00, 0xFE, 0x99, 0x00, 0x00, 0xFF, 0x64, 0x00, 0x00, 0xFE, 0xA6, 0x00, 0x00, 0xFF, 0x53, 0x00, 0x00, 0xFF, 0x74, 0x00, 0x00, 0xFE);
//pants
sethex(0x9b25790, 0x4C, 0x4C, 0x4C, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x0F, 0x0F, 0x0F, 0xFF, 0x07, 0x07, 0x07, 0xFF, 0x16, 0x16, 0x16, 0xFE, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFE, 0x21, 0x21, 0x21, 0xFF, 0x12, 0x12, 0x12, 0xFE, 0x0C, 0x0C, 0x0C, 0xFE, 0x19, 0x19, 0x19, 0xFF, 0x03, 0x03, 0x03, 0xFF, 0x1A, 0x1A, 0x1A, 0xFF, 0x0A, 0x0A, 0x0A, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x1D, 0x1D, 0x1D, 0xFF);
//shirt front
sethex(0x9b22e70, 0x22, 0x22, 0x22, 0xFF, 0x14, 0x14, 0x14, 0xFE, 0x11, 0x11, 0x11, 0xFF, 0x1B, 0x1B, 0x1B, 0xFF, 0x0A, 0x0A, 0x0A, 0xFF, 0x17, 0x17, 0x17, 0xFE, 0x0D, 0x0D, 0x0D, 0xFF, 0x1F, 0x1F, 0x1F, 0xFF, 0x12, 0x12, 0x12, 0xFF, 0x10, 0x10, 0x10, 0xFF, 0x15, 0x15, 0x15, 0xFE, 0x13, 0x13, 0x13, 0xFE, 0x19, 0x19, 0x19, 0xFF, 0x08, 0x08, 0x08, 0xFF, 0x1D, 0x1D, 0x1D, 0xFF, 0x19, 0x19, 0x19, 0xFE);

#cheat w-200
setfloat(0x96C96B0, -200);

#cheat w-100
setfloat(0x96C96B0, -100);

#cheat w-50
setfloat(0x96C96B0, -50);

#cheat w-10
setfloat(0x96C96B0, -10);

#cheat w-5
setfloat(0x96C96B0, -5);

#cheat w0
setfloat(0x96C96B0, 0);

#cheat w2
setfloat(0x96C96B0, 2);

#cheat w4
setfloat(0x96C96B0, 4);

#cheat w8
setfloat(0x96C96B0, 8);

#cheat w10
setfloat(0x96C96B0, 10);

#cheat w15
setfloat(0x96C96B0, 15);

#cheat w30
setfloat(0x96C96B0, 30);

#cheat w50
setfloat(0x96C96B0, 50);

#cheat w100
setfloat(0x96C96B0, 100);

#cheat w200
setfloat(0x96C96B0, 200);

#cheat w500
setfloat(0x96C96B0, 500);

#cheat w1000
setfloat(0x96C96B0, 1000);

#cheat w10000
setfloat(0x96C96B0, 10000);

#cheat w100000
setfloat(0x96C96B0, 100000);

#cheat w1999999999
setfloat(0x96C96B0, 1999999999);

#cheat Default water Height
setfloat(0x96C96B0, 6);

#cheat Flood the city
setfloat(0x96C96B0, 20);

#cheat Real low water
setfloat(0x96C96B0, -20);

#cheat Drifting Caddy
//by vettefan88
setfloat(0x962f3e0+0x88, 0);
setfloat(0x962f3e0+0xc4, 0.6);
setfloat(0x962f3e0+0x70, 0.5);
setfloat(0x962f3e0+0x6c, 0.8);
setfloat(0x962f3e0+0xbc, 2000);
setfloat(0x962f3e0+0xc0, 1600);
setfloat(0x962f3e0+0xa0, 0);
setfloat(0x962f3e0+0xa4, .1);
setfloat(0x962f3e0+0xa8, 0);
setfloat(0x962f3e0+0x68, 50);
setfloat(0x962f3e0+0xb8, 250);
setfloat(0x962f3e0+0xb4, 30);
setfloat(0x962f3e0+0xb0, 75);
setchar(0x962f3e0+0x5c, 'R', 'P', 5);
off();

#cheat banshee test.
//garage information
setint(0x08C739B0,  175); 
//vehicle identifier
setchar(0x08C739d4, 0, 0, 1, 255); 
//vehicle base color RGB values
setchar(0x08C739d8,  255, 255, 255, 255); 
//vehicle stripe color RGB values
//suspension information
setfloat(0x096312E0+0x74, 0.6); 
//suspension force
setfloat(0x096312E0+0x78, 5); 
//suspension damping
setfloat(0x096312E0+0x7c, 0); 
//upper limit
setfloat(0x096312E0+0x80, -0.75); 
//lower limit
setfloat(0x096312E0+0x84, 0.5); 
//bias
setfloat(0x096312E0+0x88, 1); 
//anti-dive
//tire information
setfloat(0x096312E0+0xc4, 0.75); 
//traction loss
setfloat(0x096312E0+0x70, 0.50); 
//traction bias
setfloat(0x096312E0+0x6c, 0.95); 
//traction multiplier
//handling information
setfloat(0x096312E0+0xbc, 6000); 
//mass
setfloat(0x096312E0+0xc0, 6000); 
//turn mass
setfloat(0x096312E0+0xa0, 0); 
//center of mass X
setfloat(0x096312E0+0xa4, 0); 
//center of mass Y
setfloat(0x096312E0+0xa8, -1.2); 
//center of mass Z
setfloat(0x096312E0+0x68, 35); 
//steering lock
setchar(0x096312E0+0x5c, '4', 'D', 4); 
//transmission data (drive type/engine type/# of gears)
off();

#cheat T
teleport(-1495.23 -1084.42, 14.87);

#cheat Windy Shirts 
//by psphacker108
speed = sqrt(getfloat(pcar + 0x140) * getfloat(pcar + 0x140) + getfloat(pcar + 0x144) * getfloat(pcar + 0x144));
if(speed<0.0) {
setchar(0x8BACDE7, 0x3E);}
if(speed<1.0) {
setchar(0x8BACDE7, 0x3F);}
if(speed<2.0) {
setchar(0x8BACDE6, 0x00);
setchar(0x8BACDE7, 0x3F);}
#off
setchar(0x8BACDE6, 0x00);
setchar(0x8BACDE7, 0x00);
#cheat shirts all over the place on bikes ( works with peds to )
setchar(0x8BACDE7, 0x43);
#cheat shirts all over the place on bikes ( works with peds to ) X2
setchar(0x8BACDE7, 0x44);
#cheat Vic has no shirt while driving a bike
setchar(0x8BACDE7, 0xff);

#cheat Ridge Racer 7 Nos
static Nos;
static boost;
static R;
static G;
static B;
static time;
static x;
if(pcar) {
if(getchar(pcar+0x764)  || getchar(pcar+0x768)  || getchar(pcar+0x76C)  || getchar(pcar+0x770)) { 
if(!boost && Nos < 2.97) {   
x += 0.000005;   
Nos += x; }}
else { 
x = 0.0025;}
if(Nos < .33) { 
setshort(0x08e90bd8,  1,  'N',  'o',  's',  ':',  ' ',  '[',  ' ',  ' ',  ' ',  ']',  ' ',  '[',  ' ',  ' ',  ' ',  ']',  ' ',  '[',  ' ',  ' ',  ' ',  ']',  0); }
if(Nos > .33 && Nos < .66) { 
setshort(0x08e90bd8,  1,  'N',  'o',  's',  ':',  ' ',  '[',  'l',  ' ',  ' ',  ']',  ' ',  '[',  ' ',  ' ',  ' ',  ']',  ' ',  '[',  ' ',  ' ',  ' ',  ']',  0); }
if(Nos > .66 && Nos < .99) { 
setshort(0x08e90bd8,  1,  'N',  'o',  's',  ':',  ' ',  '[',  'l',  'l',  ' ',  ']',  ' ',  '[',  ' ',  ' ',  ' ',  ']',  ' ',  '[',  ' ',  ' ',  ' ',  ']',  0); }
if(Nos > .99 && Nos < 1.32) { 
setshort(0x08e90bd8,  1,  'N',  'o',  's',  ':',  ' ',  '[',  'l',  'l',  'l',  ']',  ' ',  '[',  ' ',  ' ',  ' ',  ']',  ' ',  '[',  ' ',  ' ',  ' ',  ']',  0); }
if(Nos > 1.32 && Nos < 1.65) { 
setshort(0x08e90bd8,  1,  'N',  'o',  's',  ':',  ' ',  '[',  'l',  'l',  'l',  ']',  ' ',  '[',  'l',  ' ',  ' ',  ']',  ' ',  '[',  ' ',  ' ',  ' ',  ']',  0); }
if(Nos > 1.65 && Nos < 1.98) { 
setshort(0x08e90bd8,  1,  'N',  'o',  's',  ':',  ' ',  '[',  'l',  'l',  'l',  ']',  ' ',  '[',  'l',  'l',  ' ',  ']',  ' ',  '[',  ' ',  ' ',  ' ',  ']',  0); }
if(Nos > 1.98 && Nos < 2.31) { 
setshort(0x08e90bd8,  1,  'N',  'o',  's',  ':',  ' ',  '[',  'l',  'l',  'l',  ']',  ' ',  '[',  'l',  'l',  'l',  ']',  ' ',  '[',  ' ',  ' ',  ' ',  ']',  0); }
if(Nos > 2.31 && Nos < 2.64) { 
setshort(0x08e90bd8,  1,  'N',  'o',  's',  ':',  ' ',  '[',  'l',  'l',  'l',  ']',  ' ',  '[',  'l',  'l',  'l',  ']',  ' ',  '[',  'l',  ' ',  ' ',  ']',  0); }
if(Nos > 2.64 && Nos < 2.97) { 
setshort(0x08e90bd8,  1,  'N',  'o',  's',  ':',  ' ',  '[',  'l',  'l',  'l',  ']',  ' ',  '[',  'l',  'l',  'l',  ']',  ' ',  '[',  'l',  'l',  ' ',  ']',  0); }
if(Nos > 2.97) { 
setshort(0x08e90bd8,  1,  'N',  'o',  's',  ':',  ' ',  '[',  'l',  'l',  'l',  ']',  ' ',  '[',  'l',  'l',  'l',  ']',  ' ',  '[',  'l',  'l',  'l',  ']',  0); }
if(press & CTRL_CIRCLE && Nos > 2.96 && Nos < 2.98 && !boost) {
boost = 1;
time = 15;
R = 127;
G = 255;
B = 0;
speed = 3;}
if(press & CTRL_RTRIGGER && Nos - 0.99 > 0 && !boost) {
boost = 1;
time = 5;
R = 255;
G = 157;
B = 0;
speed = 1;}
if(press & CTRL_LTRIGGER && Nos - 1.98 > 0 && !boost) {
boost = 1;
time = 10;
R = 0;
G = 127;
B = 255;
speed = 1.5;}
static On;
static going;
if(boost) {  
On = 2;}
if(On) {
static timepassed;
static init;
if(!init){  
lasttime = getchar( 0x08bb3b41 );  
init = 1;}
if( lasttime != getchar( 0x08bb3b41 ) ){  
Nos -= 0.198;  
timepassed++;  
lasttime = getchar( 0x08bb3b41 );}
if( timepassed < time ){   
going = 1;}
else { 
On = 0; 
timepassed = 0;
going = 0;}}
if(going) {  
setchar(0x09569B90,    0x10);  
setchar(0x09569B94,    R,    G,    B);  
speed = 1.5;
thrust = speed * 0.00333;
if(buttons & CTRL_CROSS) {
setfloat(pcar + 0x0140,    getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);
setfloat(pcar + 0x0144,    getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust);}}
else{  
boost = 0;  
setchar(0x09569B90,    0x4);  
setchar(0x09569B94,    63,    63,    63);}}

#cheat firespawn
setchar(0x08be3a20, 1);
setfloat(0x08be3a30, 541.16, -463.72, 12.34);
setchar(0x08be3a60, 1);
setfloat(0x08be3a70, 540.44, -428.56, 12.34);
setchar(0x08be3aa0, 1);
setfloat(0x08be3ab0, 527.02, -423.4, 12.34);
setchar(0x08be3ae0, 1);
setfloat(0x08be3af0, 527.65, -428.54, 12.34);

#cheat Heavy Cars
if (getfloat(pcar+0xD0) <= 50000){
setfloat(pcar+0xD0, getfloat(pcar+0xD0)*1000);
setfloat(pcar+0xD4, getfloat(pcar+0xD4)*1000);}
#off
setfloat(pcar+0xD0, getfloat(pcar+0xD0)/1000);
setfloat(pcar+0xD4, getfloat(pcar+0xD4)/1000);

#cheat M 249 Always loaded and Maxed
setchar(0x98B5080,  0x00);
setchar(0x98B5074,  0x00);
setchar(0x98B507C,  0x22);
setchar(0x98B5089,  0xff);

#cheat menu
static menu;
choices = 10;
setchar(0x08E93604, 0x1);
if(press & CTRL_DOWN && menu < choices - 1) {  
menu++;
setchar(0x08E93604, 0x0);}
if(press & CTRL_UP && menu > 0) {  
menu--;
setchar(0x08E93604, 0x0);}
setshort(0x08E92FFC, 'm', 'e', 'n', 'u');
setshort(0x08E931FC, 'm', 'e', 'n', 'u');
setshort(0x08E933FC, 'm', 'e', 'n', 'u');
if(menu == 0) {
setshort(0x08E92FFC + 8, '~', 'n', '~', '>', '1');
setshort(0x08E931FC + 8, '~', 'n', '~', '>', '1');
setshort(0x08E933FC + 8, '~', 'n', '~', '>', '1');}
if(menu == 1) {
setshort(0x08E92FFC + 16, '~', 'n', '~', '>', '2');
setshort(0x08E931FC + 16, '~', 'n', '~', '>', '2');
setshort(0x08E933FC + 16, '~', 'n', '~', '>', '2');}
if(menu == 2) {
setshort(0x08E92FFC + 24, '~', 'n', '~', '>', '3');
setshort(0x08E931FC + 24, '~', 'n', '~', '>', '3');
setshort(0x08E933FC + 24, '~', 'n', '~', '>', '3');}
if(menu == 3) {
setshort(0x08E92FFC + 32, '~', 'n', '~', '>', '4');
setshort(0x08E931FC + 32, '~', 'n', '~', '>', '4');
setshort(0x08E933FC + 32, '~', 'n', '~', '>', '4');}
if(menu == 4) {
setshort(0x08E92FFC + 40, '~', 'n', '~', '>', '5');
setshort(0x08E931FC + 40, '~', 'n', '~', '>', '5');
setshort(0x08E933FC + 40, '~', 'n', '~', '>', '5');}
if(menu == 5) {
setshort(0x08E92FFC + 48, '~', 'n', '~', '>', '6');
setshort(0x08E931FC + 48, '~', 'n', '~', '>', '6');
setshort(0x08E933FC + 48, '~', 'n', '~', '>', '6');}
if(menu == 6) {
setshort(0x08E92FFC + 56, '~', 'n', '~', '>', '7');
setshort(0x08E931FC + 56, '~', 'n', '~', '>', '7');
setshort(0x08E933FC + 56, '~', 'n', '~', '>', '7');}
if(menu == 7) {
setshort(0x08E92FFC + 64, '~', 'n', '~', '>', '8');
setshort(0x08E931FC + 64, '~', 'n', '~', '>', '8');
setshort(0x08E933FC + 64, '~', 'n', '~', '>', '8');}
if(menu == 8) {
setshort(0x08E92FFC + 72, '~', 'n', '~', '>', '9');
setshort(0x08E931FC + 72, '~', 'n', '~', '>', '9');
setshort(0x08E933FC + 72, '~', 'n', '~', '>', '9');}
if(menu == 9) {
setshort(0x08E92FFC + 80, '~', 'n', '~', '>', '1', '0');
setshort(0x08E931FC + 80, '~', 'n', '~', '>', '1', '0');
setshort(0x08E933FC + 80, '~', 'n', '~', '>', '1', '0');}
if(menu > 0) {
setshort(0x08E92FFC + 8, '~', 'n', '~', '1');
setshort(0x08E931FC + 8, '~', 'n', '~', '1');
setshort(0x08E933FC + 8, '~', 'n', '~', '1');}
if(menu > 1) {
setshort(0x08E92FFC + 16, '~', 'n', '~', '2');
setshort(0x08E931FC + 16, '~', 'n', '~', '2');
setshort(0x08E933FC + 16, '~', 'n', '~', '2');}
if(menu > 2) {
setshort(0x08E92FFC + 24, '~', 'n', '~', '3');
setshort(0x08E931FC + 24, '~', 'n', '~', '3');
setshort(0x08E933FC + 24, '~', 'n', '~', '3');}
if(menu > 3) {
setshort(0x08E92FFC + 32, '~', 'n', '~', '4');
setshort(0x08E931FC + 32, '~', 'n', '~', '4');
setshort(0x08E933FC + 32, '~', 'n', '~', '4');}
if(menu > 4) {
setshort(0x08E92FFC + 40, '~', 'n', '~', '5');
setshort(0x08E931FC + 40, '~', 'n', '~', '5');
setshort(0x08E933FC + 40, '~', 'n', '~', '5');}
if(menu > 5) {
setshort(0x08E92FFC + 48, '~', 'n', '~', '6');
setshort(0x08E931FC + 48, '~', 'n', '~', '6');
setshort(0x08E933FC + 48, '~', 'n', '~', '6');}
if(menu > 6) {
setshort(0x08E92FFC + 56, '~', 'n', '~', '7');
setshort(0x08E931FC + 56, '~', 'n', '~', '7');
setshort(0x08E933FC + 56, '~', 'n', '~', '7');}
if(menu > 7) {
setshort(0x08E92FFC + 64, '~', 'n', '~', '8');
setshort(0x08E931FC + 64, '~', 'n', '~', '8');
setshort(0x08E933FC + 64, '~', 'n', '~', '8');}
if(menu > 8) {
setshort(0x08E92FFC + 72, '~', 'n', '~', '9');
setshort(0x08E931FC + 72, '~', 'n', '~', '9');
setshort(0x08E933FC + 72, '~', 'n', '~', '9');}
if(menu > 9) {
setshort(0x08E92FFC + 80, '~', 'n', '~', '1', '0');
setshort(0x08E931FC + 80, '~', 'n', '~', '1', '0');
setshort(0x08E933FC + 80, '~', 'n', '~', '1', '0');}
if(menu < 0) {
setshort(0x08E92FFC +0x2 + 8, '~', 'n', '~', '1');
setshort(0x08E931FC +0x2 + 8, '~', 'n', '~', '1');
setshort(0x08E933FC +0x2 + 8, '~', 'n', '~', '1');}
if(menu < 1) {
setshort(0x08E92FFC +0x2 + 16, '~', 'n', '~', '2');
setshort(0x08E931FC +0x2 + 16, '~', 'n', '~', '2');
setshort(0x08E933FC +0x2 + 16, '~', 'n', '~', '2');}
if(menu < 2) {
setshort(0x08E92FFC +0x2 + 24, '~', 'n', '~', '3');
setshort(0x08E931FC +0x2 + 24, '~', 'n', '~', '3');
setshort(0x08E933FC +0x2 + 24, '~', 'n', '~', '3');}
if(menu < 3) {
setshort(0x08E92FFC +0x2 + 32, '~', 'n', '~', '4');
setshort(0x08E931FC +0x2 + 32, '~', 'n', '~', '4');
setshort(0x08E933FC +0x2 + 32, '~', 'n', '~', '4');}
if(menu < 4) {
setshort(0x08E92FFC +0x2 + 40, '~', 'n', '~', '5');
setshort(0x08E931FC +0x2 + 40, '~', 'n', '~', '5');
setshort(0x08E933FC +0x2 + 40, '~', 'n', '~', '5');}
if(menu < 5) {
setshort(0x08E92FFC +0x2 + 48, '~', 'n', '~', '6');
setshort(0x08E931FC +0x2 + 48, '~', 'n', '~', '6');
setshort(0x08E933FC +0x2 + 48, '~', 'n', '~', '6');}
if(menu < 6) {
setshort(0x08E92FFC +0x2 + 56, '~', 'n', '~', '7');
setshort(0x08E931FC +0x2 + 56, '~', 'n', '~', '7');
setshort(0x08E933FC +0x2 + 56, '~', 'n', '~', '7');}
if(menu < 7) {
setshort(0x08E92FFC +0x2 + 64, '~', 'n', '~', '8');
setshort(0x08E931FC +0x2 + 64, '~', 'n', '~', '8');
setshort(0x08E933FC +0x2 + 64, '~', 'n', '~', '8');}
if(menu < 8) {
setshort(0x08E92FFC +0x2 + 72, '~', 'n', '~', '9');
setshort(0x08E931FC +0x2 + 72, '~', 'n', '~', '9');
setshort(0x08E933FC +0x2 + 72, '~', 'n', '~', '9');}
if(menu < 9) {
setshort(0x08E92FFC +0x2 + 80, '~', 'n', '~', '1', '0');
setshort(0x08E931FC +0x2 + 80, '~', 'n', '~', '1', '0');
setshort(0x08E933FC +0x2 + 80, '~', 'n', '~', '1', '0');}

#cheat Freeze Everything
//Thanks to Waterbottle for his kill all peds and blow up all cars cheats.
player = getint(0x08bc8170);//address of pplayer
for(i=0; 0x098b4a40+i<=0x098ecf90; i+=0xd10)   
if(0x098b4a40 + i != player) 
setchar(0x098b4a40 + i + 0xef,  0x80); 
for(p=0x098edcc0; p <= 0x099019a0; p+=0x820)   
if(p != pcar) 
setchar(p + 0xef,  0x80); 

#cheat setchar(0x08C42CF4, 120);
setchar(0x08C42CF4, 120);

#cheat Aggressive Drivers
// By edisoncarter
setchar(0x08bb32c8, 1);

#cheat Instant MINFAST (HIT CROSS)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==60) 
setfloat(pcar+0x140,  60);

#cheat Instant FAST (HIT CROSS)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==120) 
setfloat(pcar+0x140,  120);

#cheat Instant VERY FAST (HIT CROSS)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==240) 
setfloat(pcar+0x140,  240);

#cheat Instant FASTER (HIT CROSS)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==480) 
setfloat(pcar+0x140,  480);

#cheat Instant FASTEST (HIT CROSS)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==700) 
setfloat(pcar+0x140,  700);

#cheat Instant MEGAFAST (HIT CROSS)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==1200) 
setfloat(pcar+0x140,  1200);

#cheat Instant Brake (HIT Square)
// If x speed and forward-vector's x direction have the same sign, and same for y.
if( getfloat(pcar+0x20) * getfloat(pcar+0x140) >= 0 && getfloat(pcar+0x24) * getfloat(pcar+0x144) >= 0 ){  
if(buttons & CTRL_SQUARE && getshort(pcar+0x1c8)==0 )      
setfloat(pcar+0x140,  0,  0);}

#cheat Lock Camera
setchar(pplayer + 0x550,  1);
#off
setchar(pplayer + 0x550,  0);}

#cheat Monster Bardking at The Clymenus Suite
//Author:buzbegone
//Helped with the suspension by Vette
//Any problems, PM me
//Basics
setint(0x8C73B30, 245); //Car Id
setchar(0x8C73B30+0x24, 255,0,0, 255); //Color 1
setchar(0x8C73B30+0x28, 0,0,255, 255); //Color2
setshort(0x98a2fb2, 1, 'M','o','n','s','t','e','r',' ','B','a','r','d','k','i','n','g', 0); 
//Wheels
setfloat(0x936A678, 1.6, 1.6); //wheel size
setfloat(0x96329e0+0x6c, 0.9); //Traction Multiplier
setfloat(0x96329e0+0xc4, 0.95); //Traction Loss
setfloat(0x96329e0+0x70, 0.75); //Traction Bias
//Engine
setchar(0x96329e0+0x5c, '40', '20', 11); // Drive type / Engine type / Gears
//Suspension
setfloat(0x96329e0+0x7c, 0.82); //Suspension Upper Limit
setfloat(0x96329e0+0x80, -1.05); //Suspension Lower Limit
setfloat(0x96329e0+0x78, 0.1); //Suspension Damping Level
setfloat(0x96329e0+0x74, 1.30); //Suspension Force Level
setfloat(0x96329e0+0x84, 0.8); //Suspension Bias
setfloat(0x96329e0+0x88, 1.1); //Anti-Dive Multiplier
//Handling
setfloat(0x96329e0+0x68, 35); //Steering Lock
setfloat(0x96329e0+0xbc, 10000); //Vehilce Mass
setfloat(0x96329e0+0xc0, 12000); //Turn Mass
setfloat(0x96329e0+0xa0, 0); //Centre of Mass - X
setfloat(0x96329e0+0xa4, 0); //Centre of Mass - Y
setfloat(0x96329e0+0xa8, 0); //Centre of Mass - Z
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat Fixed Wanted Level Cheat
//Designed so you won't crash if you die/get busted with the cheat on
static level;
static init;
static delay;
static check;
static textdelay;
if(!init){
level=getint(pplayer+0x910);
init=1;}
checker = getchar(pplayer+0x8B4);
if(checker != 0x39 && checker != 0x3A && checker != 0x41 && !delay){
if(buttons & CTRL_RTRIGGER && press & CTRL_DOWN && level > 0){ 
level--;
textdelay=150;}
if(buttons & CTRL_RTRIGGER && press & CTRL_UP && level < 99){ 
level++; 
textdelay=150;}
if(textdelay>0){ 
textdelay--; 
setshort(0x08e90bd8, 1, 'W', 'a', 'n', 't', 'e', 'd', ' ', 'L', 'e', 'v', 'e', 'l', ':', '0', '0'+level, 00 );}
setint(pplayer+0x910, level, level);
setchar(pplayer+0x920, 0x1);
check=1;} 
else 
if(check){
delay=20;
check=0;}
if(delay>0)
delay--;
#off
delay=0;
check=0;
init=0;

#cheat Private Airport Stunt Land
moveto(-1809.47, -406.34, 14.96); object(0x028E, 0, 0, 267);
move(-7.18, -0.40, 4.70); object(0x028E, 340, 0, 267);
move(-5.34, -0.30, 7.10); object(0x028E, 320, 0, 267);
move(-2.19, -0.13, 8.40); object(0x028E, 295, 0, 267);
move(1.66, 0.10, 8.70); object(0x028E, 270, 0, 267);
move(4.85, 0.28, 7.50); object(0x028E, 250, 0, 267);
move(7.52, 0.44, 4.60); object(0x028E, 220, 0, 267);
move(0.34, -0.30, -9.60); object(0x028E, 20, 0, 89);
move(8.71, 0.26, -0.20); object(0x028E, 25, 0, 89);
move(8.23, 0.23, 0.40); object(0x1CA9, 270, 0, 359);
move(8.90, 0.14, 0.00); object(0x1CA9, 270, 0, 359);
move(8.73, 0.24, 0.00); object(0x1CA9, 270, 0, 359);
move(6.50, -2.02, 0.00); object(0x1CA9, 270, 0, 269);
move(0.24, -8.80, 0.00); object(0x1CA9, 270, 0, 269);
move(0.23, -8.70, 0.00); object(0x1CA9, 270, 0, 269);
move(0.17, -8.80, 0.00); object(0x1CA9, 270, 0, 269);
move(0.24, -8.80, 0.00); object(0x1CA9, 270, 0, 269);
move(0.18, -6.70, 1.00); object(0x028E, 0, 0, 179);
move(246.05, -77.77, 1.70); object(0x02A5, 5, 350, 91);
move(7.80, 0.92, 4.00); object(0x02A5, 345, 345, 90);
move(6.27, 1.81, 5.70); object(0x02A5, 330, 340, 90);
move(4.40, 3.05, 7.00); object(0x02A5, 315, 335, 89);
move(2.14, 3.84, 7.20); object(0x02A5, 300, 330, 89);
move(0.01, 4.80, 7.20); object(0x02A5, 285, 325, 89);
move(-3.13, 4.74, 6.30); object(0x02A5, 260, 320, 89);
moveto(-1510.71, -505.20, 90.75); object(0x02A5, 225, 320, 86);
moveto(-1514.41, -507.37, 82.45); object(0x1CA9, 270, 0, 92);
move(-4.68, 0.04, 0.00); object(0x1CA9, 270, 0, 91);
move(-4.68, 0.12, 0.00); object(0x1CA9, 270, 0, 91);
move(-4.58, 0.10, 0.00); object(0x1CA9, 270, 0, 91);
move(12.06, 6.53, 0.00); object(0x1CA9, 270, 0, 1);
move(-8.82, 0.20, 0.00); object(0x1CA9, 270, 0, 1);
move(8.12, -13.68, 0.00); object(0x1CA9, 270, 0, 3);
move(-8.97, 0.53, 0.00); object(0x1CA9, 270, 0, 3);
move(-9.20, 2.10, 0.80); object(0x02A5, 5, 0, 272);
move(0.68, 8.79, -0.10); object(0x02A5, 5, 0, 273);
move(-8.36, 0.44, 3.00); object(0x02A5, 0, 0, 272);
move(-0.43, -8.92, 0.00); object(0x02A5, 0, 0, 272);
move(26.03, 6.49, -10.20); object(0x1CBA, 0, 0, 273);
move(-2.50, -19.17, -22.80); object(0x1CBA, 40, 0, 269);
move(-48.10, 12.60, 32.30); object(0x1CA9, 90, 0, 269);
move(-0.09, 8.92, 0.00); object(0x1CA9, 90, 0, 269);
move(4.68, -0.26, 0.00); object(0x1CA9, 90, 0, 268);
move(-0.54, -9.18, 0.00); object(0x1CA9, 90, 0, 268);
move(-8.55, 0.61, 0.00); object(0x1CA9, 90, 0, 269);
move(0.00, 0.00, 0.00); object(0x1CA9, 90, 0, 269);
move(-0.32, 8.75, 0.00); object(0x1CA9, 270, 0, 269);
move(-6.00, -4.39, 0.00); object(0x1CA9, 90, 0, 179);
move(-0.21, 2.52, 2.10); object(0x1CA9, 0, 0, 359);
move(-0.35, -5.09, 0.00); object(0x1CA9, 0, 0, 359);
move(-8.42, 2.39, -2.20); object(0x1CA9, 270, 0, 359);
move(-8.88, -0.18, 0.00); object(0x1CA9, 270, 0, 359);
move(-8.71, -0.20, 0.00); object(0x1CA9, 270, 0, 359);
move(-8.91, -0.18, 0.00); object(0x1CA9, 270, 0, 359);
move(-8.94, -0.42, 1.50); object(0x028E, 355, 0, 268);
move(-7.40, -0.27, 4.80); object(0x028E, 345, 0, 268);
move(-6.37, -0.23, 6.40); object(0x028E, 330, 0, 268);
move(120.05, 18.57, -46.90); object(0x028E, 345, 0, 89);
move(-0.12, 4.42, 0.00); object(0x028E, 345, 0, 89);
move(45.55, 129.20, -32.20); object(0x028E, 350, 0, 28);
move(3.15, 5.96, 5.70); object(0x028E, 335, 0, 28);
move(-300.60, -101.78, -5.90); object(0x028E, 350, 0, 229);
move(-39.49, -47.36, 0.10); object(0x028E, 350, 0, 179);
move(-0.05, -6.84, 5.40); object(0x028E, 340, 0, 180);
move(23.91, -43.14, 0.20); object(0x028E, 340, 0, 180);
move(283.16, 5.96, 0.20); object(0x028E, 340, 0, 91);
move(-6.12, -6.19, 0.00); object(0x028E, 340, 0, 178);
move(-285.70, 6.11, -0.20); object(0x028E, 340, 0, 268);
move(281.08, 82.37, 0.00); object(0x028E, 340, 0, 3);
teleport(-1585.75, -395.19, 14.65);
 
#cheat Villa under bridge
moveto(-73.88, 68.86, 8.58); object(0x1CB2, 0, 90, 347);
move(6.58, 1.51, 0.00); object(0x1CB2, 0, 90, 347);
move(6.62, 1.51, 0.00); object(0x1CB2, 0, 90, 347);
move(-9.98, -16.95, 0.00); object(0x1CB2, 0, 90, 347);
move(6.51, 1.53, 0.00); object(0x1CB2, 0, 90, 347);
move(6.58, 1.62, 0.00); object(0x1CB2, 0, 90, 347);
moveto(-81.10, 88.92, 9.20); object(0x01A4, 0, 0, 78);
moveto(-79.33, 80.68, 9.16); object(0x01A4, 0, 0, 78);
move(1.82, -8.51, 0.00); object(0x01A4, 0, 0, 78);
move(1.78, -8.31, 0.00); object(0x01A4, 0, 0, 78);
move(1.88, -8.60, 0.00); object(0x01A4, 0, 0, 78);
moveto(-76.80, 66.26, 5.26); object(0x1CB2, 0, 0, 347);
moveto(-74.04, 54.17, 5.30); object(0x1CB2, 0, 0, 347);
move(8.71, -5.33, -0.10); object(0x1CB2, 0, 0, 256);
move(3.26, 0.75, 0.00); object(0x1CB2, 0, 0, 256);
move(1.10, -2.56, 1.20); object(0x1CB2, 0, 230, 257);
moveto(-65.66, 86.88, 8.98); object(0x01C4, 0, 0, 80);
move(0.24, -1.38, 0.00); object(0x01C4, 0, 0, 80);
moveto(-61.30, 60.83, 8.58); object(0x1D04, 0, 0, 79);
move(-1.15, 4.57, 0.00); object(0x1D04, 0, 0, 79);
move(-1.07, 4.48, 0.00); object(0x1D04, 0, 0, 79);
move(-5.84, -1.15, 0.00); object(0x1D04, 0, 0, 79);
move(0.88, -4.62, 0.00); object(0x1D04, 0, 0, 79);
moveto(-67.51, 59.55, 8.62); object(0x1D04, 0, 0, 80);
moveto(-65.16, 83.89, 9.19); object(0x020B, 0, 0, 255);
move(0.12, -0.89, 0.00); object(0x0209, 0, 0, 255);
moveto(-60.38, 98.98, 9.99); object(0x1D01, 0, 0, 137);
move(-16.88, -20.67, -1.30); object(0x1D01, 0, 0, 107);
moveto(-67.37, 89.00, 8.68); object(0x1D02, 0, 0, 37);
move(-11.72, -3.17, 0.00); object(0x1D01, 0, 0, 298);
moveto(-70.71, 49.27, 8.62); object(0x1CCF, 0, 0, 78);
move(1.13, -0.37, 0.00); object(0x1CCF, 0, 0, 78);
move(7.05, 26.10, 0.00); object(0x1D01, 0, 0, 78);
moveto(-60.28, 56.19, 8.62); object(0x1D04, 0, 0, 80);
move(-6.24, -1.22, 0.00); object(0x1D04, 0, 0, 80);
moveto(-66.75, 87.97, 8.68); object(0x1D02, 0, 0, 60);
teleport(-60.23, 95.09, 17.62);

#cheat Runner
static counter;
player = getint(0x08bc8170);
if(counter++ % 30 == 0) {
for(p=0x098b4a40; p <= 0x098ecf90; p+=0xd10) {
if(p != player)
pguard = getchar(p + 0x8C4);
if(p &&pguard == 0x4){
setchar(p+0x8C4, 0x05);}}}