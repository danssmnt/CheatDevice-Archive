#cheat test1
//made with Portal Maker by DDM
static Made;
X1 = -887.07;
Y1 = -1014.83;
Z1 = 14.38;
X2 = -905.57;
Y2 = 1021.84;
Z2 = 78.71;
if(!Made)
{
for( rot = 0; rot<270; rot += 10.8 )
{
moveto(X1 + cos(rot) * 3, Y1 + sin(rot) * 3, Z1); object(0x1B3, 0, 0, -rot + 90);
}
for( rot2 = 0; rot2 < 270; rot2 += 10.8 )
{
moveto(X2 + cos(rot2) * 3, Y2 + sin(rot2) * 3, Z2); object(0x1B3, 0, 0, -rot2 + 90);
}
Made = 1;
}
checkx1 = X1 - getfloat(pobj+0x30);
checky1 = Y1 - getfloat(pobj+0x34);
checkx2 = X2 - getfloat(pobj+0x30);
checky2 = Y2 - getfloat(pobj+0x34);
if(sqrt(checkx1*checkx1+checky1*checky1) < 2 )
{
setfloat(pobj+0x30, X2 + 5, Y2 + 5, Z2);
}
if(sqrt(checkx2*checkx2+checky2*checky2) < 2 )
{
setfloat(pobj+0x30, X1 + 5, Y1 + 5, Z1);
}
moveto(-887.85,-1014.73,14.38);  object(0x1CA4,0,0,275);

#cheat test1 (T)
teleport(-887.85,-1009.73,14.38);

#cheat Drifter+ at 101 Bayshore Avenue
 //Created By Sunshine Customs
 //Sunshine Customs Created By emcp
 //Addresses Found By Vette
 //Basics
 setint(0x08C739B0, 273); //Car Id
 setchar(0x08C739B0+0x24, 0,30,160, 255); //Color 1
 setchar(0x08C739B0+0x28, 255,0,10, 255); //Color2
 setshort(0x98a2fd6, 1, 'D','r','i','f','t','e','r','+', 0); 
 //Wheels
 setfloat(0x936EFF8, 1.2, 1.2); //wheel size
 setfloat(0x9634420+0x6c, 0.8); //Traction Multiplier
 setfloat(0x9634420+0xc4, 1); //Traction Loss
 setfloat(0x9634420+0x70, 0.9); //Traction Bias
 //Engine
 setchar(0x9634420+0x5c, '7', '160', 14); // Drive type / Engine type / Gears
 //Suspension
 setfloat(0x9634420+0x7c, 0.2); //Suspension Upper Limit
 setfloat(0x9634420+0x80, -0.19); //Suspension Lower Limit
 setfloat(0x9634420+0x78, 0.11); //Suspension Damping Level
 setfloat(0x9634420+0x74, 1.75); //Suspension Force Level
 setfloat(0x9634420+0x84, 0.67); //Suspension Bias
 setfloat(0x9634420+0x88, 4); //Anti-Dive Multiplier
 //Handling
 setfloat(0x9634420+0x68, 50); //Steering Lock
 setfloat(0x9634420+0xbc, 3250); //Vehilce Mass
 setfloat(0x9634420+0xc0, 3250); //Turn Mass
 setfloat(0x9634420+0xa0, 0); //Centre of Mass - X
 setfloat(0x9634420+0xa4, 0); //Centre of Mass - Y
 setfloat(0x9634420+0xa8, 0); //Centre of Mass - Z
 //Effects
 //Exhaust

#cheat Interactive Door Test
moveto(-1095.99,288.11,13.26); object(0x1C99,0,0,180);
moveto(-1096.00,299.31,13.26); object(0x1C99,0,0,180);
static Marker1;
X1 = -1096.00;
Y1 = 293.71;
if(!Marker1){
Marker1 = 1;}
checkx1 = X1-getfloat(pobj+0x30);
checky1 = Y1-getfloat(pobj+0x34);
if(sqrt(checkx1*checkx1+checky1*checky1)<5){
setchar(0x08E93604, 0x1);
setshort(0x08E92FFC, 'P', 'r', 'e', 's', 's', ' ', '~', 'h', '~', 'U', 'p', '~', 'w', '~', '/', '~', 'h', '~', 'D', 'o', 'w', 'n', '~', 'w', '~', ' ', 't', 'o', ' ', 'o', 'p', 'e', 'n', '/','c', 'l', 'o', 's', 'e', ' ', 't', 'h', 'e', ' ', 'd', 'o', 'o', 'r', '!');
setshort(0x08E931FC, 'P', 'r', 'e', 's', 's', ' ', '~', 'h', '~', 'U', 'p', '~', 'w', '~', '/', '~', 'h', '~', 'D', 'o', 'w', 'n', '~', 'w', '~', ' ', 't', 'o', ' ', 'o', 'p', 'e', 'n', '/','c', 'l', 'o', 's', 'e', ' ', 't', 'h', 'e', ' ', 'd', 'o', 'o', 'r', '!');
setshort(0x08E933FC, 'P', 'r', 'e', 's', 's', ' ', '~', 'h', '~', 'U', 'p', '~',
'w', '~', '/', '~', 'h', '~', 'D', 'o', 'w', 'n', '~', 'w', '~', ' ', 't', 'o',
' ', 'o', 'p', 'e', 'n', '/','c', 'l', 'o', 's', 'e', ' ', 't', 'h', 'e', ' ', 'd', 'o', 'o', 'r', '!');}
top = 15.66;
bottom = 13.26;
xpos = -1096.00;
ypos = 293.71;
static obj;
static state;
if(!obj){
moveto(xpos,ypos,bottom);
obj = object(0x1C99,0,0,180);}
else{
selectobject(obj);
if(state == 0){
if(getfloat(obj+0x38) >= top&&buttons&CTRL_DOWN&&sqrt(checkx1*checkx1+checky1*checky1)<5){ state = 2;}
if(getfloat(obj+0x38) <=
bottom&&buttons&CTRL_UP&&sqrt(checkx1*checkx1+checky1*checky1)<5){ state = 1;}}
if(state == 1){
setfloat(obj+0x38, getfloat(obj+0x38)+0.01);
if(getfloat(obj+0x38) >= top) state = 0;}
else if(state == 2){
setfloat(obj+0x38, getfloat(obj+0x38)-0.01);
if(getfloat(obj+0x38) <= bottom) state = 0;}
propagateobject();}
#off
obj = state = 0;

#cheat door (T)
teleport(-1085.99,288.11,13.26);

#cheat Money-Money
count = 0;
for(i = 0x01B5; i <= 0x01B5; i++)
    if(i != 0x01B5)){
         pickup = 0x08C6A330 + count*0x40;
         setfloat(pickup, getfloat(pobj+0x30) + 15*cos(count*360/40), getfloat(pobj+0x34) + 20*sin(count*360/40), getfloat(pobj+0x38));
         setint(pickup+0x2C, 1000000);
         setshort(pickup+0x34, i);
         setchar(pickup+0x38, 0x03);
         count++;
    }
off();

#cheat Finished Lava! (Hard)
//by nerner with elements of a cheat by psphacker108
//and a painful burning effect by Upaluppa ^^
//cheers for releasing the watermod by the way
setchar(0x08b8eb90, 0x00, 0x00, 0x00, 0x00);
setchar(0x08b8eb8e, 0xff, 0x00, 0x00, 0x00, 0xff);
setchar(0x08b8eb88, 0x00, 0x00, 0xff, 0xff);
if(getchar(pplayer + 0x38) <= 6 && getchar(pplayer + 0x38) >= -50)
{
setchar(0x08BE3A20, 1);
setfloat(0x08BE3A30, getfloat(pobj + 0x30), getfloat(pobj + 0x34), getfloat(pobj + 0x38));
setfloat(pplayer + 0x4E4, 0);
setfloat(pplayer + 0x4E4, 0);
}
if(pcar && getchar(pcar + 0x38) <= 6 && getchar(pcar + 0x38) >= -50)
{
setfloat(pcar + 0x27C, 0x0);
sethex(pcar + 0x4A, 79);
setchar(0x08BE3A20, 1);
setfloat(0x08BE3A30, getfloat(pobj + 0x30), getfloat(pobj + 0x34), getfloat(pobj + 0x38));
setfloat(pplayer + 0x4E4, 0);
}

#cheat Airport Suntpark with Car Spawns *UPDATE*
moveto(-1729.23,  -1742.11,  14.98);  object(0x1CA4,  0,  0,  180);
move(-4.30,  0.01,  0.00);  object(0x1CA4,  0,  0,  180);
move(0.00,  0.00,  2.80);  object(0x1CA4,  0,  0,  180);
move(4.30,  -0.01,  0.00);  object(0x1CA4,  0,  0,  180);
move(0.00,  0.00,  2.80);  object(0x1CA4,  0,  0,  180);
move(-4.20,  0.01,  0.00);  object(0x1CA4,  0,  0,  180);
move(0.00,  0.00,  2.80);  object(0x1CA4,  0,  0,  180);
move(4.20,  -0.01,  0.00);  object(0x1CA4,  0,  0,  180);
move(-2.09,  5.58,  -8.50);  object(0x02A5,  0,  0,  180);
move(-14.98,  148.78,  0.00);  object(0x02A5,  0,  0,  0);
move(8.70,  0.03,  0.00);  object(0x02A5,  0,  0,  0);
move(8.60,  0.03,  0.00);  object(0x02A5,  0,  0,  0);
move(6.80,  0.02,  0.00);  object(0x02A5,  0,  0,  0);
move(-29.09,  -0.11,  0.00);  object(0x02A5,  0,  0,  0);
move(29.16,  6.58,  0.00);  object(0x02A5,  0,  0,  180);
move(-8.70,  0.03,  0.00);  object(0x02A5,  0,  0,  180);
move(-8.70,  0.03,  0.00);  object(0x02A5,  0,  0,  180);
move(-8.50,  0.03,  0.00);  object(0x02A5,  0,  0,  180);
move(-3.10,  0.01,  0.00);  object(0x02A5,  0,  0,  180);
move(28.12,  291.40,  0.00);  object(0x02A5,  0,  0,  0);
move(0.06,  7.71,  4.40);  object(0x02A5,  345,  0,  0);
move(-25.13,  -7.30,  -4.40);  object(0x02A5,  0,  0,  180);
move(0.01,  -7.71,  4.40);  object(0x02A5,  345,  0,  180);
move(159.37,  56.91,  -4.30);  object(0x02A5,  0,  0,  90);
move(28.46,  0.43,  0.00);  object(0x02A5,  0,  0,  270);
move(-106.25,  137.32,  0.00);  object(0x02A5,  0,  0,  270);
move(-35.32,  -0.44,  -0.10);  object(0x02A5,  0,  0,  90);
move(16.57,  60.66,  0.00);  object(0x02A5,  0,  0,  0);
move(-0.57,  34.16,  0.00);  object(0x02A5,  0,  0,  180);
move(0.01,  -7.51,  4.30);  object(0x02A5,  345,  0,  180);
move(0.44,  -19.13,  0.10);  object(0x02A5,  345,  0,  0);
move(304.04,  10.24,  -4.40);  object(0x02A5,  0,  0,  0);
move(0.03,  7.81,  4.50);  object(0x02A5,  345,  0,  0);
move(-201.31,  -275.08,  -4.50);  object(0x02A5,  0,  0,  11);
move(1.38,  7.46,  4.30);  object(0x02A5,  345,  0,  11);
move(1.14,  6.13,  6.20);  object(0x02A5,  330,  0,  11);
move(-212.95,  107.31,  -10.50);  object(0x02A5,  0,  0,  0);
move(1.39,  50.45,  11.50);  object(0x02A5,  5,  0,  0);
move(0.03,  8.05,  3.70);  object(0x02A5,  350,  0,  0);
move(0.20,  62.68,  -2.70);  object(0x02A5,  5,  0,  0);
move(0.02,  7.78,  3.60);  object(0x02A5,  350,  0,  0);
move(0.14,  50.17,  -5.40);  object(0x02A5,  5,  0,  0);
move(0.02,  8.02,  3.80);  object(0x02A5,  350,  0,  0);
move(-1.07,  65.95,  -3.90);  object(0x02A5,  5,  0,  0);
move(0.02,  8.03,  3.70);  object(0x02A5,  350,  0,  0);
move(26.12,  200.73,  -14.30);  object(0x02A5,  0,  0,  0);
move(8.60,  -0.03,  0.00);  object(0x02A5,  0,  0,  0);
move(349.96,  -594.44,  0.00);  object(0x02A5,  0,  0,  50);
move(-5.65,  6.62,  0.00);  object(0x02A5,  0,  0,  50);
move(-5.65,  6.62,  0.00);  object(0x02A5,  0,  0,  50);
move(-1.49,  1.75,  0.00);  object(0x02A5,  0,  0,  50);
move(120.86,  109.79,  0.00);  object(0x02A5,  0,  0,  50);
move(6.23,  -7.30,  0.00);  object(0x02A5,  0,  0,  50);
move(38.96,  75.67,  0.00);  object(0x02A5,  0,  0,  50);
move(5.93,  -7.16,  0.00);  object(0x02A5,  0,  0,  50);
move(-81.95,  90.96,  0.00);  object(0x02A5,  0,  0,  343);
move(84.89,  24.72,  0.00);  object(0x02A5,  0,  0,  0);
move(9.50,  0.01,  0.00);  object(0x02A5,  0,  0,  0);
move(-9.57,  118.05,  0.00);  object(0x02A5,  0,  0,  0);
move(9.30,  0.01,  0.00);  object(0x02A5,  0,  0,  0);
move(-184.87,  -33.78,  0.00);  object(0x02A5,  0,  0,  356);
move(-0.57,  7.45,  4.40);  object(0x02A5,  345,  0,  356);
move(-0.49,  6.34,  6.30);  object(0x02A5,  330,  0,  356);
move(-266.59,  -209.46,  -10.72);  object(0x02A5,  0,  0,  0);
move(9.30,  0.00,  0.00);  object(0x02A5,  0,  0,  0);
move(-0.37,  20.39,  0.00);  object(0x02A5,  0,  0,  180);
move(-8.30,  0.02,  0.00);  object(0x02A5,  0,  0,  180);
move(-16.99,  -251.30,  0.00);  object(0x02A5,  0,  0,  90);
move(0.07,  -8.70,  0.00);  object(0x02A5,  0,  0,  90);
move(0.07,  -8.70,  0.00);  object(0x02A5,  0,  0,  90);
move(0.02,  -2.50,  0.00);  object(0x02A5,  0,  0,  90);
move(32.87,  -0.09,  0.00);  object(0x02A5,  0,  0,  270);
move(-0.06,  8.70,  0.00);  object(0x02A5,  0,  0,  270);
move(-0.06,  8.60,  0.00);  object(0x02A5,  0,  0,  270);
move(-0.02,  2.50,  0.00);  object(0x02A5,  0,  0,  270);
move(454.99,  321.84,  0.00);  object(0x02A5,  0,  0,  90);
move(-0.07,  8.70,  0.00);  object(0x02A5,  0,  0,  90);
move(0.15,  -17.40,  0.00);  object(0x02A5,  0,  0,  90);
move(0.07,  -8.70,  0.00);  object(0x02A5,  0,  0,  90);
move(7.59,  0.07,  4.30);  object(0x02A5,  345,  0,  90);
move(-0.07,  8.70,  0.00);  object(0x02A5,  345,  0,  90);
move(-0.07,  8.70,  0.00);  object(0x02A5,  345,  0,  90);
move(-0.07,  8.60,  0.00);  object(0x02A5,  345,  0,  90);
move(-47.42,  -123.22,  -4.30);  object(0x02A5,  0,  0,  230);
move(5.63,  -6.64,  0.00);  object(0x02A5,  0,  0,  230);
move(5.63,  -6.64,  0.00);  object(0x02A5,  0,  0,  230);
move(1.55,  -1.83,  0.00);  object(0x02A5,  0,  0,  230);
move(-444.96,  59.14,  -0.00);  object(0x02A5,  0,  0,  180);
move(9.80,  0.08,  0.00);  object(0x02A5,  0,  0,  180);
move(-100.77,  -138.73,  0.00);  object(0x02A5,  0,  0,  180);
move(-8.60,  0.02,  0.00);  object(0x02A5,  0,  0,  180);
move(-8.70,  0.02,  0.00);  object(0x02A5,  0,  0,  180);
move(-2.60,  0.01,  0.00);  object(0x02A5,  0,  0,  180);
move(0.18,  -48.26,  0.00);  object(0x02A5,  0,  0,  180);
move(8.60,  -0.02,  0.00);  object(0x02A5,  0,  0,  180);
move(8.60,  -0.02,  0.00);  object(0x02A5,  0,  0,  180);
move(2.50,  -0.01,  0.00);  object(0x02A5,  0,  0,  180);
move(-0.07,  15.18,  0.00);  object(0x02A5,  0,  0,  0);
move(-8.60,  -0.06,  0.00);  object(0x02A5,  0,  0,  0);
move(-8.60,  -0.06,  0.00);  object(0x02A5,  0,  0,  0);
move(-2.60,  -0.02,  0.00);  object(0x02A5,  0,  0,  0);
move(-0.04,  -48.01,  0.00);  object(0x02A5,  0,  0,  0);
move(8.70,  0.06,  0.00);  object(0x02A5,  0,  0,  0);
move(8.70,  0.06,  0.00);  object(0x02A5,  0,  0,  0);
move(2.40,  0.02,  0.00);  object(0x02A5,  0,  0,  0);
move(-5.21,  -40.52,  0.00);  object(0x02A5,  0,  0,  0);
move(-9.60,  -0.07,  0.00);  object(0x02A5,  0,  0,  0);
move(-0.45,  20.35,  0.00);  object(0x02A5,  0,  0,  180);
move(9.80,  -0.02,  0.00);  object(0x02A5,  0,  0,  180);
move(-0.91,  -4.50,  1.80);  object(0x1CA4,  90,  0,  180);
move(2.20,  -0.01,  0.00);  object(0x1CA4,  90,  0,  180);
move(-0.01,  -2.87,  0.00);  object(0x1CA4,  90,  0,  180);
move(-2.30,  0.01,  0.00);  object(0x1CA4,  90,  0,  180);
move(-0.01,  -2.81,  0.00);  object(0x1CA4,  90,  0,  180);
move(2.50,  -0.01,  0.00);  object(0x1CA4,  90,  0,  180);
move(-0.01,  -2.73,  0.00);  object(0x1CA4,  90,  0,  180);
move(-2.80,  0.01,  0.00);  object(0x1CA4,  90,  0,  180);
move(-0.01,  -2.35,  0.00);  object(0x1CA4,  90,  0,  180);
move(2.60,  -0.01,  0.00);  object(0x1CA4,  90,  0,  180);
move(-9.57,  -0.10,  0.00);  object(0x1CA4,  90,  0,  181);
move(-2.30,  0.02,  0.00);  object(0x1CA4,  90,  0,  181);
move(0.02,  2.64,  0.00);  object(0x1CA4,  90,  0,  181);
move(2.10,  -0.02,  0.00);  object(0x1CA4,  90,  0,  181);
move(0.03,  2.90,  0.00);  object(0x1CA4,  90,  0,  181);
move(-2.50,  0.02,  0.00);  object(0x1CA4,  90,  0,  181);
move(0.04,  2.90,  0.00);  object(0x1CA4,  90,  0,  180);
move(4.10,  -0.02,  0.00);  object(0x1CA4,  90,  0,  180);
move(0.01,  2.40,  0.00);  object(0x1CA4,  90,  0,  180);
move(-4.10,  0.02,  0.00);  object(0x1CA4,  90,  0,  180);
move(106.98,  228.73,  0.00);  object(0x1CA4,  90,  0,  0);
move(2.20,  -0.01,  0.00);  object(0x1CA4,  90,  0,  0);
move(0.01,  2.59,  0.00);  object(0x1CA4,  90,  0,  0);
move(-2.10,  0.01,  0.00);  object(0x1CA4,  90,  0,  0);
move(0.01,  2.86,  0.00);  object(0x1CA4,  90,  0,  0);
move(2.00,  -0.00,  0.00);  object(0x1CA4,  90,  0,  0);
move(0.01,  2.70,  0.00);  object(0x1CA4,  90,  0,  0);
move(-2.40,  0.01,  0.00);  object(0x1CA4,  90,  0,  0);
move(0.01,  2.92,  0.00);  object(0x1CA4,  90,  0,  0);
move(2.00,  -0.00,  0.00);  object(0x1CA4,  90,  0,  0);
move(7.73,  -0.15,  0.00);  object(0x1CA4,  90,  0,  0);
move(2.60,  -0.01,  0.00);  object(0x1CA4,  90,  0,  0);
move(-0.01,  -2.80,  0.00);  object(0x1CA4,  90,  0,  0);
move(-2.00,  0.01,  0.00);  object(0x1CA4,  90,  0,  0);
move(-0.51,  -2.39,  0.00);  object(0x1CA4,  90,  0,  0);
move(0.01,  2.49,  0.00);  object(0x1CA4,  90,  0,  0);
move(2.49,  -2.44,  0.00);  object(0x1CA4,  90,  0,  0);
move(-0.01,  -2.90,  0.00);  object(0x1CA4,  90,  0,  0);
move(-2.30,  0.01,  0.00);  object(0x1CA4,  90,  0,  0);
move(-0.01,  -2.83,  0.00);  object(0x1CA4,  90,  0,  0);
move(2.10,  -0.01,  0.00);  object(0x1CA4,  90,  0,  0);
pspawn = 0x08E81290;  
setint(pspawn,    254);    
setfloat(pspawn + 4,    -1485,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    256);    
setfloat(pspawn + 4,    -1475,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    266);    
setfloat(pspawn + 4,    -1465,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    265);    
setfloat(pspawn + 4,    -1455,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    270);    
setfloat(pspawn + 4,    -1445,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    273);    
setfloat(pspawn + 4,    -1435,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    172);    
setfloat(pspawn + 4,    -1425,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    175);    
setfloat(pspawn + 4,    -1415,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    177);    
setfloat(pspawn + 4,    -1405,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    230);    
setfloat(pspawn + 4,    -1395,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    212);    
setfloat(pspawn + 4,    -1385,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    205);    
setfloat(pspawn + 4,    -1375,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    178);    
setfloat(pspawn + 4,    -1365,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    184);    
setfloat(pspawn + 4,    -1355,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    186);    
setfloat(pspawn + 4,    -1345,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    187);    
setfloat(pspawn + 4,    -1335,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    198);    
setfloat(pspawn + 4,    -1325,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    171);    
setfloat(pspawn + 4,    -1315,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    180);    
setfloat(pspawn + 4,    -1295,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    181);    
setfloat(pspawn + 4,    -1285,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    237);    
setfloat(pspawn + 4,    -1275,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    259);    
setfloat(pspawn + 4,    -1265,    -1145.80,    14.53,    0);    
pspawn += 0x30;
setint(pspawn,    268);    
setfloat(pspawn + 4,    -1255,    -1145.80,    14.53,    0);    
pspawn += 0x30;
teleport(-1452.89,  -1146.36,  14.87);

#cheat elevator
static obj;
static state;
top = 32.98;
bottom = 12.82;
if(!obj)
{
  moveto(-419.53,-603.07,bottom);
  obj = object(0x1CA4,90,0,0);
}
else
{
  selectobject(obj);
  if(state == 0 && getfloat(getint(pplayer+0xf0)+0x30) == getfloat(obj+0x30))
  {
       if(getfloat(obj+0x38) >= top && buttons & CTRL_DOWN) state = 2;
       else if(buttons & CTRL_UP) state = 1;
  }
  if(state == 1)
  {
       setfloat(obj + 0x38, getfloat(obj+0x38) + 0.04);
       if(getfloat(obj+0x38) >= top) state = 0;
  }
  else if(state == 2)
  {
       setfloat(obj + 0x38, getfloat(obj+0x38) - 0.04);
       if(getfloat(obj+0x38) <= bottom) state = 0;
  }
  propagateobject();
}
#off
obj = state = 0;

#cheat elevator (T)
teleport(-419.53,-603.07,11.87);

#cheat Money Modifier Plus
if ((pressfast & CTRL_UP&&getint(0x08bde55c)<2140000000))
{
setint(0x08bde55c, getint(0x08bde55c)+10000);
}
if ((pressfast & CTRL_RIGHT&&getint(0x08bde55c)<2140000000))
{
setint(0x08bde55c, getint(0x08bde55c)+2500000);
}
if ((pressfast & CTRL_DOWN&&getint(0x08bde55c)>-2140000000))
{
setint(0x08bde55c, getint(0x08bde55c)-10000);
}
if ((pressfast & CTRL_LEFT&&getint(0x08bde55c)>-2140000000))
{
setint(0x08bde55c, getint(0x08bde55c)-2500000);
}

#cheat ???
if(getshort(pcar+0x58)==270)
{
  setfloat(pcar+0x450,  0,  -100,  0);// ???
  setfloat(pcar+0x480,  0,  -100,  0);// ???
  setfloat(pcar+0x4b0,  0,  -100,  0);// ???
  setfloat(pcar+0x4e0,  0,  -100,  0);// ???

#cheat Supercool Bulldozer
//By: Dudek13l or Dudek12l
setint(0x962ef80, 181); //Car Id
setchar(0x962ef80+0x24, 0, 0, 0, 0); //Color 1
setchar(0x962ef80+0x28, 20, 0, 0, 0); //Color 2
setfloat(0x935E6D8, 1.7, 1.7); //wheel size
setfloat(0x962ea40+0x6c, 1.05); //Traction multiplier
setfloat(0x962ea40+0xc4, 0.95); //Traction loss
setfloat(0x962ea40+0x70, 0.9); //Traction bias
setchar(0x962ea40+0x5c, '6', '120', 9); // Drive type / Engine type / Gears
setfloat(0x962ea40+0x7c, 0.87); //Suspension Upper limit
setfloat(0x962ea40+0x80, -0.8); //Suspension lower limit
setfloat(0x962ea40+0x78, 2.75); //Suspension Damping level
setfloat(0x962ea40+0x74, 5); //Suspension force level
setfloat(0x962ea40+0x84, 0.7); //Suspension Bias
setfloat(0x962ea40+0x88, 0.6); //Anti-dive Multiplier
setfloat(0x962ea40+0x68, 40); //Steering Lock
setfloat(0x962ea40+0xbc, 29000); //Vehilce Mass
setfloat(0x962ea40+0xc0, 31000); //Turn Mass
setfloat(0x962ea40+0xa0, 0); //Centre of Mass - X
setfloat(0x962ea40+0xa4, 0); //Centre of Mass - Y
setfloat(0x962ea40+0xa8, -3); //Centre of Mass - Z
setchar(0x09569B94, 255, 80, 0); // Exhuast
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  0, 80, 80);}
teleport( 268.31, -174.98, 11.50);
off();

#cheat Bulldozer
//R pickup and retrieve,  O smash,  Down toss!
static onoff;
if(getint(pcar + 0x150))
{
ppedc = getint(pcar + 0x150);
}
if(ppedc&&buttons & CTRL_RTRIGGER)
{
onoff = 1;
}
if(onoff&&getshort(ppedc + 0x56) > 150&&getshort(ppedc + 0x56) < 279)
{
setfloat(ppedc + 0x30,   getfloat(pplayer + 0x30) + getfloat(pplayer + 0x10) * 7.5);
setfloat(ppedc + 0x34,   getfloat(pplayer + 0x34) + getfloat(pplayer + 0x14) * 7.5);
setfloat(ppedc + 0x38,   getfloat(pplayer + 0x38) + 2.5);
setfloat(ppedc + 0x70,  0,  0,  0);
if(press & CTRL_CIRCLE)
{
setfloat(ppedc + 0x0148,  -1.2);
setfloat(ppedc + 0x027C,  getfloat(ppedc + 0x027C) - 250);
onoff = 0;
}
else
{
setfloat(ppedc + 0x0148,  0);
}
if(press & CTRL_DOWN)
{
boost = 5;
thrust = boost * 0.00333;
setfloat(ppedc + 0x0140,    getfloat(ppedc + 0x0140) + getfloat(pplayer + 0x0010) + thrust);
setfloat(ppedc + 0x0144,    getfloat(ppedc + 0x0144) + getfloat(pplayer + 0x0014) + thrust);
setfloat(ppedc + 0x0148,    getfloat(ppedc + 0x0148) + getfloat(pplayer + 0x0018) * thrust);
onoff = 0;
}
}

#cheat Grasshopper!
if(press & CTRL_DOWN)
{
setfloat(pcar + 0x00000148,  +0.8);
boost = 1.5;
thrust = boost * 0.01;
setfloat(pcar + 0x0140,  getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);
setfloat(pcar + 0x0144,  getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust); 

#cheat Hold L or R to change taxi fare amount +2
 if ((buttons & CTRL_RTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)+2);}
 if ((buttons & CTRL_LTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)-2);}

#cheat Hold L or R to change taxi fare amount +9
 if ((buttons & CTRL_RTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)+9);}
 if ((buttons & CTRL_LTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)-9);}

#cheat Hold L or R to change taxi fare amount +21
 if ((buttons & CTRL_RTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)+21);}
 if ((buttons & CTRL_LTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)-21);}

#cheat Hold L or R to change taxi fare amount +67
 if ((buttons & CTRL_RTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)+67);}
 if ((buttons & CTRL_LTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)-67);}

#cheat Hold L or R to change taxi fare amount +142
 if ((buttons & CTRL_RTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)+142);}
 if ((buttons & CTRL_LTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)-142);}

#cheat Hold L or R to change taxi fare amount +783
 if ((buttons & CTRL_RTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)+783);}
 if ((buttons & CTRL_LTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)-783);}

#cheat Hold L or R to change taxi fare amount +3030
 if ((buttons & CTRL_RTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)+3030);}
 if ((buttons & CTRL_LTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)-3030);}

#cheat Hold L or R to change taxi fare amount +6K
 if ((buttons & CTRL_RTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)+6130);}
 if ((buttons & CTRL_LTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)-6130);}

#cheat Hold L or R to change taxi fare amount +22K
 if ((buttons & CTRL_RTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)+22016);}
 if ((buttons & CTRL_LTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)-22016);}

#cheat Hold L or R to change taxi fare amount +194K
 if ((buttons & CTRL_RTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)+194923);}
 if ((buttons & CTRL_LTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)-194923);}

#cheat Hold L or R to change taxi fare amount +1M
 if ((buttons & CTRL_RTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)+1571829);}
 if ((buttons & CTRL_LTRIGGER)){
setint(0x09F6D7B0, getint(0x09F6D7B0)-1571829);}

#cheat RB+255
address = 0x09f6a200;
for(i=0;i<99;i++) {
setint(address+4*i, 1);
}
setshort(0x08bb3d3c, 255);
off();

#cheat NOSx2
//Hold O while driving to use NOS
if(buttons & CTRL_CIRCLE) {
speed = 0.0;
if(getfloat(pcar+0x140)>0) { speed+=getfloat(pcar+0x140); }
else { speed-=getfloat(pcar+0x140); }
if(getfloat(pcar+0x144)>0) { speed+=getfloat(pcar+0x144); }
else { speed-=getfloat(pcar+0x144); }
if(speed<175/75) {
setfloat(pcar+0x140, getfloat(pcar+0x140)-getfloat(pcar+0x4)*0.01);
setfloat(pcar+0x144, getfloat(pcar+0x144)+getfloat(pcar)*0.01);
}
}

#cheat Superbouncy!
BounceAmount = 2;
rot = getfloat(0x09fc73f0);
setfloat(pplayer + 0x4E4, 150.0);//health
if(getshort(pplayer+0x1C8)!=0x1020) { setfloat(pplayer+0x148,BounceAmount); setshort(pplayer+0x1c8, 0x1020);
if(ystick < -0.5) {
setfloat(pplayer+0x140,getfloat(pplayer+0x10));
setfloat(pplayer+0x144,getfloat(pplayer+0x14));
}
}
if(xstick < -0.5) rot += 2;
if(xstick > 0.5) rot -= 2;
setfloat(pplayer, cos(rot)); setfloat(pplayer+0x4, sin(rot));
setfloat(pplayer+0x10, -sin(rot)); setfloat(pplayer+0x14, cos(rot));
setfloat(0x09fc73f0, rot);

#cheat Megabouncy!
BounceAmount = 8;
rot = getfloat(0x09fc73f0);
setfloat(pplayer + 0x4E4, 150.0);//health
if(getshort(pplayer+0x1C8)!=0x1020) { setfloat(pplayer+0x148,BounceAmount); setshort(pplayer+0x1c8, 0x1020);
if(ystick < -0.5) {
setfloat(pplayer+0x140,getfloat(pplayer+0x10));
setfloat(pplayer+0x144,getfloat(pplayer+0x14));
}
}
if(xstick < -0.5) rot += 2;
if(xstick > 0.5) rot -= 2;
setfloat(pplayer, cos(rot)); setfloat(pplayer+0x4, sin(rot));
setfloat(pplayer+0x10, -sin(rot)); setfloat(pplayer+0x14, cos(rot));
setfloat(0x09fc73f0, rot);

#cheat Warp in sky!
if(press & CTRL_DOWN){
setfloat(pcar + 0x00000148, +1000);} // ???

#cheat Superspinner
if(xstick < -0.9&&buttons & CTRL_RTRIGGER){
if(pcar)
setfloat(pcar + 0x78,   +2);}

#cheat Power Driving plus
static boost;
thrust = boost * 0.00333;
static Up;
Power = 1;
setfloat(pcar+0x78,  -xstick / 50);
if(ystick < -0.9)
{
Power = 0;
}
else
{
Power = 1;
}
if(ystick > 0.9)
{
boost = 5.0;
}
else
{
boost = 2.5;
}
if (buttons & CTRL_CROSS)
{
if(buttons & CTRL_CIRCLE)
{
Up = 0.6;
}
else
{
Up = 0.2;
}
setfloat(pcar + 0x0140,  getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);
setfloat(pcar + 0x0144,  getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust);
setfloat(pcar + 0x0148,  getfloat(pcar + 0x0148) + getfloat(pcar + 0x0018) * thrust);
if(Power)
{
setfloat(pcar + 0x00000148,  +Up);
}
setfloat(pcar + 0x08,    0);
setfloat(pcar + 0x18,    0);
}
if(buttons & CTRL_SQUARE)
{
setfloat(pcar + 0x140,  getfloat(pcar + 0x140)*0.95,  getfloat(pcar + 0x144)*0.95);
}
if(getfloat(pcar + 0x148) < 0)
{
setfloat(pcar + 0x08,    0);
setfloat(pcar + 0x18,    0);
}
setfloat(pcar + 0x0000027C,    1000000000);
setfloat(pcar + 0x0000010C,    0);
static ZLoc;
if(press & CTRL_DOWN)
{
ZLoc = getfloat(pcar + 0x38);
}
if(buttons & CTRL_DOWN)
{
Power = 0;
setfloat(pcar + 0x38,  ZLoc);
setfloat(pcar + 0x08,    0);
setfloat(pcar + 0x18,    0);
}

#cheat Sub Machine Gun Upgrade Pack
for(i=0; i<4; i++){
sub=0x095FFCE0+(i*0x70);
setchar(sub+0x1, 0x1);//Allow jumping
setfloat(sub+0x8, 9999);//Set range to 500
setint(sub+0x14, 1000);//Max out clip size
setfloat(sub+0x44, 0.3, 0.3, 0.3);//Set firing speed to Minigun's speed
}
off();

#cheat Shotgun Upgrade Pack
for(i=0; i<3; i++){
sub=0x095FFB90+(i*0x70);
setchar(sub+0x1, 0x1);//Allow jumping
setfloat(sub+0x8, 9999);//Set range to 500
setint(sub+0x14, 1000);//Max out clip size
setfloat(sub+0x44, 0.25, 0.25, 0.25);//Set firing speed to Minigun's speed
}
off();

#cheat Machine Gun Upgrade Pack
for(i=0; i<2; i++){
sub=0x095FFEA0+(i*0x70);
setchar(sub+0x1, 0x1);//Allow jumping
setfloat(sub+0x8, 9999);//Set range to 500
setint(sub+0x14, 1000);//Max out clip size
setfloat(sub+0x44, 0.2, 0.2, 0.2);//Set firing speed to Minigun's speed
}
off();

#cheat Pistol Upgrade Pack
for(i=0; i<2; i++){
sub=0x095FFAB0+(i*0x70);
setchar(sub+0x1, 0x1);//Allow jumping
setfloat(sub+0x8, 500);//Set range to 500
setint(sub+0x14, 1000);//Max out clip size
setfloat(sub+0x44, 0.28, 0.28, 0.28);//Set firing speed to Minigun's sp
}
off();

#cheat Heavy Weapon Upgrade Pack
for(i=0; i<4; i++){
sub=0x09600060+(i*0x70);
setchar(sub+0x0, 0x46); //Allow manual aiming
setchar(sub+0x1, 0x1);//Allow jumping
setfloat(sub+0x8, 40000);//Set range to 500
setint(sub+0x14, 1000);//Max out clip size
setfloat(sub+0x44, 2, 2, 2);//Set firing speed to Minigun's speed
}
off();

#cheat Instant -100mph (HIT Square)
if(buttons & CTRL_SQUARE && getshort(pcar+0x1c8)==-100 ){
setfloat(pcar+0x140,  -100,  -100);}

#cheat Instant 50mph (HIT Cross)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==50 ){
setfloat(pcar+0x140,  50,  50);}

#cheat Instant 75mph (HIT Cross)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==75 ){
setfloat(pcar+0x140,  75,  75);}

#cheat Instant 100mph (HIT Cross)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==100 ){
setfloat(pcar+0x140,  100,  100);}

#cheat Instant 150mph (HIT Cross)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==150 ){
setfloat(pcar+0x140,  150,  150);}

#cheat Instant 200mph (HIT Cross)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==200 ){
setfloat(pcar+0x140,  200,  200);}

#cheat Instant 250mph (HIT Cross)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==250 ){
setfloat(pcar+0x140,  250,  250);}

#cheat Instant 300mph (HIT Cross)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==300 ){
setfloat(pcar+0x140,  300,  300);}

#cheat Instant 400mph (HIT Cross)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==400 ){
setfloat(pcar+0x140,  400,  400);}

#cheat Instant 500mph (HIT Cross)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==500 ){
setfloat(pcar+0x140,  500,  500);}

#cheat Instant 750mph (HIT Cross)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==750 ){
setfloat(pcar+0x140,  750,  750);}

#cheat Instant 1000mph (HIT Cross)
if(buttons & CTRL_CROSS && getshort(pcar+0x1c8)==1000 ){
setfloat(pcar+0x140,  1000,  1000);}

#cheat easter egg PM
moveto(-915.48,  -842.81,  12.18);  object(0x1C91,  0,  0,  90);
moveto(-728.71,  -1417.24,  12.60);  object(0x1C91,  0,  0,  90);
moveto(-979.90,  267.10,  8.81);  object(0x1C91,  0,  0,  90);
moveto(415.27,  203.02,  11.95);  object(0x1C91,  0,  0,  90);
moveto(79.12,  1092.96,  32.60);  object(0x1C91,  0,  0,  90);
moveto(-1552.07,  1258.80,  8.73);  object(0x1C91,  0,  0,  90);
moveto(-707.99,  1301.08,  11.76);  object(0x1C91,  0,  0,  90);
moveto(-0.68,  -1233.04,  23.47);  object(0x1C91,  0,  0,  90);
moveto(358.45,  1103.05,  -193.60);  object(0x1C91,  0,  0,  90);
moveto(302.95,  -453.77,  5.74);  object(0x1C91,  0,  0,  90);

#cheat Fire Creator Example
setchar(0x08be3a20, 1);
setfloat(0x08be3a30, 314.57, -168.91, 26.13);
setchar(0x08be3a60, 1);
setfloat(0x08be3a70, 356.07, -169.03, 26.13);
setchar(0x08be3aa0, 1);
setfloat(0x08be3ab0, 355.48, -149.23, 26.13);
setchar(0x08be3ae0, 1);
setfloat(0x08be3af0, 315.20, -149.39, 26.13);
setchar(0x08be3b20, 1);
setfloat(0x08be3b30, 340.20, -148.65, 24.80);
setchar(0x08be3b60, 1);
setfloat(0x08be3b70, 327.93, -148.20, 24.80);
setchar(0x08be3ba0, 1);
setfloat(0x08be3bb0, 315.46, -158.34, 23.20);
setchar(0x08be3be0, 1);
setfloat(0x08be3bf0, 355.07, -159.45, 23.20);
setchar(0x08be3c20, 1);
setfloat(0x08be3c30, 345.86, -167.74, 24.80);
setchar(0x08be3c60, 1);
setfloat(0x08be3c70, 326.90, -168.22, 24.80);

#cheat Fire Creator Example (T)
teleport(314.57, -168.91, 26.13);

#cheat Vcn cop
//made with VCS Car Spawner by DDM
pspawn = 0x08E81290;
setint(pspawn, 260);
setfloat(pspawn + 4, -469.57, 1123.63, 64.75);
pspawn + 4,  227.56,  -129.41,  5.9,  160);

#cheat Vcn cop (T)
teleport(-469.57, 1123.63, 64.75);

#cheat The Convenient Portals
//made with Portal Maker by DDM
static Made;
X1 = 269.45;
Y1 = -166.28;
Z1 = 11.84;
X2 = -796.30;
Y2 = -1181.56;
Z2 = 11.10;
if(!Made)
{
for( rot = 0; rot < 270; rot += 10.8 )
{
moveto(X1 + cos(rot) * 3,  Y1 + sin(rot) * 3,  Z1); object(0x1B3,  0,  0,  -rot + 90);
}
for( rot2 = 0; rot2 < 270; rot2 += 10.8 )
{
moveto(X2 + cos(rot2) * 3,  Y2 + sin(rot2) * 3,  Z2); object(0x1B3,  0,  0,  -rot2 + 90);
}
Made = 1;
}
checkx1 = X1 - getfloat(pobj+0x30);
checky1 = Y1 - getfloat(pobj+0x34);
checkx2 = X2 - getfloat(pobj+0x30);
checky2 = Y2 - getfloat(pobj+0x34);
if(sqrt(checkx1*checkx1+checky1*checky1) < 2 )
{
setfloat(pobj+0x30,  X2 + 5,  Y2 + 5,  Z2);
}
if(sqrt(checkx2*checkx2+checky2*checky2) < 2 )
{
setfloat(pobj+0x30,  X1 + 5,  Y1 + 5,  Z1);
}

#cheat The Convenient Portals (T)
teleport(269.45, -166.28, 11.84);

#cheat 0.1sec
setint(0x8bb3b3c, 100);
#off
setint(0x8bb3b3c, 1000);
#cheat 0.25sec
setint(0x8bb3b3c, 250);
#off
setint(0x8bb3b3c, 1000);
#cheat 0.5sec
setint(0x8bb3b3c, 500);
#off
setint(0x8bb3b3c, 1000);
#cheat 2sec
setint(0x8bb3b3c, 2000);
#off
setint(0x8bb3b3c, 1000);
#cheat 5sec
setint(0x8bb3b3c, 5000);
#off
setint(0x8bb3b3c, 1000);
#cheat 10sec
setint(0x8bb3b3c, 10000);
#off
setint(0x8bb3b3c, 1000);
#cheat 20sec
setint(0x8bb3b3c, 20000);
#off
setint(0x8bb3b3c, 1000);
#cheat 40sec
setint(0x8bb3b3c, 40000);
#off
setint(0x8bb3b3c, 1000);
#cheat 2m
setint(0x8bb3b3c, 120000);
#off
setint(0x8bb3b3c, 1000);
#cheat 5m
setint(0x8bb3b3c, 300000);
#off
setint(0x8bb3b3c, 1000);
#cheat 10m
setint(0x8bb3b3c, 600000);
#off
setint(0x8bb3b3c, 1000);

#cheat Car Stunts (Hold O and use analog)
if(xstick < -0.9&&buttons & CTRL_CIRCLE){
setfloat(pcar + 0x78,  +0.1);}
if(xstick > 0.9&&buttons & CTRL_CIRCLE){
setfloat(pcar + 0x78,  getfloat(pcar + 0x78)-0.02);}

#cheat All car stunts
static counter;
if(counter++ % 30 == 0) {
for(p=0x098edcc0; p <= 0x099019a0; p+=0x820) {
if(p != pcar)
if(xstick < -0.9&&buttons & CTRL_CIRCLE){
setfloat(p + 0x78,  +0.1);}
if(xstick > 0.9&&buttons & CTRL_CIRCLE){
setfloat(p + 0x78,  getfloat(p + 0x78)-0.02);}

#cheat Superman
pstartfly = getshort(pplayer+0x1C8);
static speedmult;
setfloat(pplayer + 0x4E4,  150.0);//health
setfloat(pplayer + 0x78,  -0.03 * xstick);
setfloat(pplayer + 0x70,  0.03 * ystick * getfloat(pplayer));
setfloat(pplayer + 0x74,  0.03 * ystick * getfloat(pplayer+4));
if (buttons & CTRL_CROSS) {
  setshort(pplayer+0x1c8,  0x1020);
  if(speedmult<1.4) speedmult+=0.01;
} else if(speedmult >= 0) speedmult*=0.95;
if(pstartfly==0x1020)
{
  updown = (getfloat(pplayer+0x28)>0) ? 1 : -1;
  setfloat(pplayer+0x140,  -getfloat(pplayer+4)*speedmult);
  setfloat(pplayer+0x144,  getfloat(pplayer)*speedmult);
  setfloat(pplayer+0x148,  (getfloat(pplayer+0x18)+cos(90/180*3.1415))*speedmult * updown);
}

#cheat Peds Are Superman
static counter;
player = getint(0x08bc8170);//address of pplayer 
if(counter++ % 30 == 0) {
for(p=0x098b4a40; p <= 0x098ecf90; p+=0xd10) {
if(p != player)
pstartfly = getshort(p+0x1C8);
static speedmult;
setfloat(p + 0x4E4,  150.0);//health
setfloat(p + 0x78,  -0.03 * xstick);
setfloat(p + 0x70,  0.03 * ystick * getfloat(p));
setfloat(p + 0x74,  0.03 * ystick * getfloat(p+4));
if (buttons & CTRL_CROSS) {
  setshort(p+0x1c8,  0x1020);
  if(speedmult<1.4) speedmult+=0.01;
} else if(speedmult >= 0) speedmult*=0.95;
if(pstartfly==0x1020)
{
  updown = (getfloat(pplayer+0x28)>0) ? 1 : -1;
  setfloat(p+0x140,  -getfloat(p+4)*speedmult);
  setfloat(p+0x144,  getfloat(p)*speedmult);
  setfloat(p+0x148,  (getfloat(p+0x18)+cos(90/180*3.1415))*speedmult * updown);
}

#cheat Splitz 6  Has Big Tires+.
setfloat(0x935E198, 2);

#cheat car spawns
//these are spawns for my showroom I made in the drifting topic. it contains pmg'd cars, but the spawn angles are screwed up, I never got around to fixing them, but the code still works.
pspawn = 0x08E81260;
setint(pspawn, 200);
setfloat(pspawn + 4, -845.27, 1218.44, 16.20, 310);
pspawn += 0x30;
setint(pspawn, 255);
setfloat(pspawn + 4, -814.99, 1215.15, 16.58, 180);
pspawn += 0x30;
setint(pspawn, 200);
setfloat(pspawn + 4, -846, 1252.7, 19.47, 190);
pspawn += 0x30;
setint(pspawn, 211);
setfloat(pspawn + 4, -843.44, 1236.49, 19.47, 190);
pspawn += 0x30;
setint(pspawn, 256);
setfloat(pspawn + 4, -843.52, 1227.88, 19.46, 190);
pspawn += 0x30;
setint(pspawn, 186);
setfloat(pspawn + 4, -827.93, 1228.93, 19.47, 315);
pspawn += 0x30;
setint(pspawn, 254);
setfloat(pspawn + 4, -798.99, 1199.17, 19.46, 90);
pspawn += 0x30;
setint(pspawn, 175);
setfloat(pspawn + 4, -808.84, 1199.17, 19.46, 90);
pspawn += 0x30;
setint(pspawn, 245);
setfloat(pspawn + 4, -807.07, 1217.25, 19.46, 225);
pspawn += 0x30;
setint(pspawn, 206);
setfloat(pspawn + 4, -821.96, 1205.52, 16.09, 225);
pspawn += 0x30;
setint(pspawn, 172);
setfloat(pspawn + 4, -826.27, 1211.18, 16.01, 225);
pspawn += 0x30;
setint(pspawn, 187);
setfloat(pspawn + 4, -835.75, 1217.63, 16.01, 225);
pspawn += 0x30;
setint(pspawn, 209);
setfloat(pspawn + 4, -830.91, 1203.96, 16.11, 225);
pspawn += 0x30;
setint(pspawn, 184);
setfloat(pspawn + 4, -846.73, 1211.31, 16.01, 270);
pspawn += 0x30;
setint(pspawn, 275);
setfloat(pspawn + 4, -844.26, 1274.23, 24.06, 270);
pspawn += 0x30;
setint(pspawn, 246);
setfloat(pspawn + 4, -770.52, 1242.46, 24.34, 180);
pspawn += 0x30;
setint(pspawn, 252);
setfloat(pspawn + 4, -788.92, 1250, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 231);
setfloat(pspawn + 4, -788.92, 1253, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 229);
setfloat(pspawn + 4, -788.92, 1256, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 212);
setfloat(pspawn + 4, -788.92, 1259, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 205);
setfloat(pspawn + 4, -788.92, 1262, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 178);
setfloat(pspawn + 4, -788.92, 1265, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 230);
setfloat(pspawn + 4, -788.92, 1268, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 232);
setfloat(pspawn + 4, -788.92, 1271, 24.48, 180);
pspawn += 0x30;
setint(pspawn, 259);
setfloat(pspawn + 4, -787.49, 1276.50, 25.04, 0);
pspawn += 0x30;
setint(pspawn, 170);
setfloat(pspawn + 4, -826.69, 1241.57, 24.72, 45);
pspawn += 0x30;
setint(pspawn, 198);
setfloat(pspawn + 4, -814.75, 1275.91, 24.72, 180);
pspawn += 0x30;
setint(pspawn, 213);
setfloat(pspawn + 4, -812.10, 1263.10, 24.72, 0);
pspawn += 0x30;
//pmg cars
//quad
setint(0x08C739B0,  230);
setfloat(0x9633fc0+0x74, 0.4);
setfloat(0x9633fc0+0x78, 0.3);
setfloat(0x9633fc0+0x7c, .5);
setfloat(0x9633fc0+0x80, -0.2);
setfloat(0x9633fc0+0x84, 0.4);
setfloat(0x9633fc0+0x88, 1);
setfloat(0x936e578, 1.085, 1.085);
setfloat(0x9633fc0+0xc4, 0.80);
setfloat(0x9633fc0+0x70, 0.50);
setfloat(0x9633fc0+0x6c, 0.95);
setfloat(0x9633fc0+0xbc, 250000, 796870);
setfloat(0x9633fc0+0xa0, 0);
setfloat(0x9633fc0+0xa4, -.1);
setfloat(0x9633fc0+0xa8, -1.2);
setfloat(0x9633fc0+0x68, 35);
setchar(0x9633fc0+0x5c, '4', 'D', 5);
//caddy
setint(0x08C739B0,  206);
setchar(0x08C739d4, 127, 0, 255, 255);
setchar(0x08C739d8,  255, 255, 255, 255);
setfloat(0x962f3e0+0x88, 0);
setfloat(0x962f3e0+0xc4, 0.6);
setfloat(0x962f3e0+0x70, 0.5);
setfloat(0x962f3e0+0x6c, 0.8);
setfloat(0x962f3e0+0xbc, 2000);
setfloat(0x962f3e0+0xc0, 1600);
setfloat(0x962f3e0+0xa0, 0);
setfloat(0x962f3e0+0xa4, .1);
setfloat(0x962f3e0+0xa8, 0);
setfloat(0x962f3e0+0x68, 50);
setfloat(0x962f3e0+0xb8, 500);
setfloat(0x962f3e0+0xb4, 30);
setfloat(0x962f3e0+0xb0, 75);
setchar(0x962f3e0+0x5c, 'R', 'P', 5);
//phoenix
setint(0x08C739B0, 187);
setchar(0x08C739d4, 0, 100, 255, 255);
setfloat(0x96334A0+0x88, 0);
setfloat(0x96334A0+0xc4, 0.55);
setfloat(0x96334A0+0x70, 0.5);
setfloat(0x96334A0+0x6c, 0.85);
setfloat(0x96334A0+0xbc, 2000);
setfloat(0x96334A0+0xc0, 1700);
setfloat(0x96334A0+0xa0, 0);
setfloat(0x96334A0+0xa4, .1);
setfloat(0x96334A0+0xa8, 0);
setfloat(0x96334A0+0x68, 50);
setfloat(0x96334A0+0xb8, 500);
setfloat(0x96334A0+0xb4, 30);
setint(0x96334A0+0xb0, 75);
setchar(0x96334A0+0x5c, 'R', 'P', 5);
//deluxo
//setfloat(0x962f680+0x74, .96);
//setfloat(0x962f680+0x78, .091);
//setfloat(0x962f680+0x7c, 0.255);
//setfloat(0x962f680+0x80, 0.5);
//setfloat(0x962f680+0x84, 0.23);
setfloat(0x962f680+0x88, .2);
setfloat(0x962f680+0xc4, 0.748);
setfloat(0x962f680+0x70, 0.52);
setfloat(0x962f680+0x6c, 0.748);
setfloat(0x962f680+0xbc, 1800);
setfloat(0x962f680+0xc0, 3700);
setfloat(0x962f680+0xa0, 0);
setfloat(0x962f680+0xa4, 0.1);
setfloat(0x962f680+0xa8, .25);
setfloat(0x962f680+0x68, 31);
setchar(0x962f680+0x5c, '4', 'P', 5);
setfloat(0x962f680+0xb8, 25.8);
setfloat(0x962f680+0xb4, 4250);
setint(0x962f680+0xb0, 75);
setfloat(0x9360e38, .75, .75);
R = 0;
G = 255;
B = 255;
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon, R, G, B);}
//mesa
setshort(0x98a30ca, 'R', 'o', 'c', 'k', 'C', 'r', 'a', 'w', 'l', 'e', 'r');
setfloat(0x9633200+0x74, 0.6);
setfloat(0x9633200+0x78, 5);
setfloat(0x9633200+0x7c, 0);
setfloat(0x9633200+0x80, -0.9);
setfloat(0x9633200+0x84, 0.5);
setfloat(0x9633200+0x88, 0);
setfloat(0x936cb38, 1.6, 1.6);
setfloat(0x9633200+0xc4, 0.75);
setfloat(0x9633200+0x70, 0.50);
setfloat(0x9633200+0x6c, 0.95);
setfloat(0x9633200+0xbc, 1250);
setfloat(0x9633200+0xc0, 3000);
setfloat(0x9633200+0xa0, 0);
setfloat(0x9633200+0xa4, 0);
setfloat(0x9633200+0xa8, -1.5);
setfloat(0x9633200+0x68, 35);
setchar(0x9633200+0x5c, '4', 'D', 4);
//stallion
setint(0x08C739B0,  206);
setchar(0x08C739d4, 127, 0, 255, 255);
setchar(0x08C739d8,  255, 255, 255, 255);
setfloat(0x9630800+0x74, .25);
setfloat(0x9630800+0x78, 1.5);
setfloat(0x9630800+0x7c, .03);
setfloat(0x9630800+0x80, -0.02);
setfloat(0x9630800+0x84, 0.5);
setfloat(0x9630800+0x88, 0);
setfloat(0x9367f18, 1.35, 1.35);
setfloat(0x9630800+0xc4, 0.6);
setfloat(0x9630800+0x70, 0.5);
setfloat(0x9630800+0x6c, 0.8);
setfloat(0x9630800+0xbc, 2000);
setfloat(0x9630800+0xc0, 1600);
setfloat(0x9630800+0xa0, 0);
setfloat(0x9630800+0xa4, .1);
setfloat(0x9630800+0xa8, 0);
setfloat(0x9630800+0x68, 50);
setfloat(0x9630800+0xb8, 250);
setfloat(0x9630800+0xb4, 30);
setfloat(0x9630800+0xb0, 75);
setchar(0x9630800+0x5c, 'R', 'P', 5);
off();

#cheat car spawns (T)
teleport(-845.27, 1218.44, 18.20);

#cheat gameplay super really fast
setfloat(0x08BB3B58, 30);

#cheat Deluxo Drift V2.39
//This is my final version of the drifitng deluxo. ALL OF THE PMG ELEMENTS ARE CLEARLY DEFINED. have a ball.
//garage information//
setint(0x08C739B0,  187); //vehicle identifier
setchar(0x08C739d4, 0, 90, 255, 255); //vehicle base color RGB values
setchar(0x08C739d4, 0, 100, 255, 0); //vehicle stripe color RGB.
//suspension information//
//setfloat(0x962f680+0x74, 1.22); //suspension force
//setfloat(0x962f680+0x78, .001); //suspension damping
//setfloat(0x962f680+0x7c, 0.255); //upper limit
//setfloat(0x962f680+0x80, 0.5); //lower limit
//setfloat(0x962f680+0x84, 1.23); //bias
setfloat(0x962f680+0x88, 1.2); //anti-dive
//tire information//
setfloat(0x962f680+0xc4, 0.948); //traction loss
setfloat(0x962f680+0x70, 0.82); //traction bias
setfloat(0x962f680+0x6c, 0.948); //traction multiplier
//handling information//
setfloat(0x962f680+0xbc, 7000); //mass
setfloat(0x962f680+0xc0, 277000); //turn mass
setfloat(0x962f680+0xa0, 0); //center of mass X
setfloat(0x962f680+0xa4, 0.2); //center of mass Y
setfloat(0x962f680+0xa8, .35); //center of mass Z
setfloat(0x962f680+0x68, 122); //steering lo 

#cheat Wall Climber 2v Faster
if(getint(pplayer+0x150))
{
    boost = 10.0;
    thrust = boost * 0.00333;

    // velocity = velocity + forward vector * thrust
    setfloat(pplayer + 0x0140,  getfloat(pplayer + 0x0140) + getfloat(pplayer + 0x0010) * thrust);
    setfloat(pplayer + 0x0144,  getfloat(pplayer + 0x0144) + getfloat(pplayer + 0x0014) * thrust);
    setfloat(pplayer + 0x0148,  getfloat(pplayer + 0x0148) + getfloat(pplayer + 0x0018) + 0.02);

    // rotational control
    setfloat(pplayer + 0x0078,  -0.05 * xstick);
    // get the player off the ground
    setshort(pplayer + 0x01c8,    0x1020);

#cheat PJ-600 XT Plus
//By: Gunner54
if(getshort(pcar + 0x56) == 212)
{
setchar(pcar+0x224, 0, 255, 5);
setchar(pcar+0x228, 255, 0, 5);

if (buttons & CTRL_CROSS && buttons & CTRL_CIRCLE){
setchar(0x09569B90,   0x10);
setchar(0x09569B94,   0,   127,   255);
speed = 3.6;                                                                                  
thrust = speed * 0.00333;                                    
setfloat(pcar + 0x0140,   getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);          
setfloat(pcar + 0x0144,   getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust);
}else if (buttons & CTRL_CROSS){
speed = 3.6;  
thrust = speed * 0.00333;
setchar(0x09569B90,   0x2);
setchar(0x09569B94,   255, 185, 50);                                  
setfloat(pcar + 0x0140,   getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);          
setfloat(pcar + 0x0144,   getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust);
}else{
setchar(0x09569B90,   0x4);
setchar(0x09569B94,   63, 63, 63);
}
}

#cheat VRA Base 2
static Gate;

if(pcar)
{
moveMent = pcar;
}
else
{
moveMent = pplayer;
}

Xco = getfloat(moveMent+ 0x30);
Yco = getfloat(moveMent+ 0x34);
Zco = getfloat(moveMent+ 0x38);


if(!Gate)
{
moveto( -730.54,563.70,12.83);
Gate = object(0x1D1C,0,0,90);
}
else
{
selectobject(Gate);

if(Xco < -718.50 && Xco > -739.99 && Yco < 577.52 && Yco > 549.70 && Zco < 15.93 && Zco > 10.93)
{
 setfloat(Gate+0x34,   getfloat(Gate+0x34) - 0.1);  
}
else
{
 setfloat(Gate+0x34,   getfloat(Gate+0x34) + 0.1);
}


if(getfloat(Gate+0x34) < 552.70)
{
 setfloat(Gate+0x34,   552.70);
}

if(getfloat(Gate+0x34) > 563.70)
{
 setfloat(Gate+0x34,   563.70);
}



propagateobject();
}

#cheat teleport to VRA Base 2
teleport( -677.44, 550.65, 11.08);

#cheat Lock Camera in Car
setchar(pcar + 0x550,   1);
#off
setchar(pcar + 0x550,   0);

#cheat Hot Rod+ O for boost at hotel place
//By: Dudek13l or Dudek12l
setint(0x8C73B30, 267 ); //Car Id
setchar(0x8C73B30+0x24, 1, 0, 0, 255); //Color 1
setchar(0x8C73B30+0x28, 1, 0, 0, 255); //Color 2
setshort(0x98a3450, 1, 'H','o','t',' ','R','o','d','+', 0);
setfloat(0x936E038, 1.3, 1.3); //wheel size
setfloat(0x9633d20+0x6c, 0.82); //Traction multiplier
setfloat(0x9633d20+0xc4, 0.82); //Traction loss
setfloat(0x9633d20+0x70, 0.5); //Traction bias
setchar(0x9633d20+0x5c, '5', '10', 9); // Drive type / Engine type / Gears
setfloat(0x9633d20+0x7c, 0.54); //Suspension Upper limit
setfloat(0x9633d20+0x80, -0.37); //Suspension lower limit
setfloat(0x9633d20+0x78, 4); //Suspension Damping level
setfloat(0x9633d20+0x74, 4); //Suspension force level
setfloat(0x9633d20+0x84, 0.65); //Suspension Bias
setfloat(0x9633d20+0x88, 0.5); //Anti-dive Multiplier
setfloat(0x9633d20+0x68, 33); //Steering Lock
setfloat(0x9633d20+0xbc, 3200); //Vehilce Mass
setfloat(0x9633d20+0xc0, 3350); //Turn Mass
setfloat(0x9633d20+0xa0, 0); //Centre of Mass - X
setfloat(0x9633d20+0xa4, -0.9); //Centre of Mass - Y
setfloat(0x9633d20+0xa8, -2.0); //Centre of Mass - Z
setchar(0x09569B94, 255, 80, 0); // Exhuast
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon, 0, 0, 0255);}
//Fire Burn Out Smoke
setchar(0x9569c90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xff, 0x20, 0x00);
// Nos to vcs 2
static On;
static going;
if(buttons & CTRL_CIRCLE &&!On) {
On = 1;
}
if(On) {
static timepassed;
static init;
if(!init)
{
lasttime = getchar( 0x08bb3b41 );
init = 1;
}
if( lasttime != getchar( 0x08bb3b41 ) )
{
timepassed++;
lasttime = getchar( 0x08bb3b41 );
}
if( timepassed < 30 )
{
going = 1;
}
else {
On = 0;
timepassed = 0;
going = 0;
}
}
if(going) {
setchar(0x09569B90, 0x10);
setchar(0x09569B94, 255, 80, 0);
speed = 1.5;
thrust = speed * 0.00344;
if(buttons & CTRL_CROSS) {
setfloat(pcar + 0x0140, getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);
setfloat(pcar + 0x0144, getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust);
}
}
else
{
setchar(0x09569B90, 0x4);
setchar(0x09569B94, 255, 80, 0);
}

#cheat DOORS!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x1c8e, 0, 0, 0);
}
off();

#cheat MANS!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x1c90, 0, 0, 0);
}
off();

#cheat PINATA MANS!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x1c91, 0, 0, 0);
}
off();

#cheat RAMPS!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x1caa, 0, 0, 0);
}
off();

#cheat WALLS!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x1cb2, 0, 0, 0);
}
off();

#cheat RB!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x1cca, 0, 0, 0);
}
off();

#cheat HOLES!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x1cd5, 0, 0, 0);
}
off();

#cheat STOPERS!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x1d4b, 0, 0, 0);
}
off();
#cheat LIGHTS!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x020f, 0, 0, 0);
}
off();

#cheat GLASSES!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x029f, 0, 0, 0);
}
off();

#cheat HANDS!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x0266, 0, 0, 0);
}
off();

#cheat RAILS!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x01de, 0, 0, 0);
}
off();

#cheat BOXES!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x01c1, 0, 0, 0);
}
off();

#cheat WATERBILLS!
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x01b4, 0, 0, 0);
}
off();

#cheat ???
for( x = 0; x < 120; x += 0.8 )
{
moveto(getfloat(pplayer+0x30) + x, getfloat(pplayer+0x34), getfloat(pplayer+0x38)); object(0x01a0, 0, 0, 0);
}
off();

#cheat pcj-600 red and black
if(getshort(pcar + 0x56)== 212){
setchar(pcar + 0x00000224, 0, 0, 0);
setchar(pcar + 0x00000228, 255, 0, 0);}

#cheat pcj-600 blue and white
if(getshort(pcar + 0x56)== 212){
setchar(pcar + 0x00000224, 255, 255, 255);
setchar(pcar + 0x00000228, 0, 0, 255);}

#cheat The 133333 sanchez *with the ultimate wheelie* PLUS
 //Basics
 setint(0x8C73B30, 205); //Car Id
 setchar(0x8C73B30+0x24, 20, 0, 0, 255); //Color 1
 setchar(0x8C73B30+0x28, 0, 0, 20, 255); //Color2
 setshort(0x98a322a, 1, '1', '3', '3', '3', '3', '3', 0); 
 //Wheels
 setfloat(0x9630640+0x6c, 1); //Traction Multiplier
 setfloat(0x9630640+0xc4, 3); //Traction Loss
 setfloat(0x9630640+0x70, 0.75); //Traction Bias
 //Engine
 setchar(0x9630640+0x5c, '12', '7', 8); // Drive type / Engine type / Gears
 //Suspension
 setfloat(0x9630640+0x7c, 0.5); //Suspension Upper Limit
 setfloat(0x9630640+0x80, -0.1); //Suspension Lower Limit
 setfloat(0x9630640+0x78, 0.3); //Suspension Damping Level
 setfloat(0x9630640+0x74, 2.5); //Suspension Force Level
 setfloat(0x9630640+0x84, 0.5); //Suspension Bias
 setfloat(0x9630640+0x88, 6); //Anti-Dive Multiplier
 //Handling
 setfloat(0x9630640+0x68, 43); //Steering Lock
 setfloat(0x9630640+0xbc, 2000); //Vehilce Mass
 setfloat(0x9630640+0xc0, 2000); //Turn Mass
 setfloat(0x9630640+0xa0, 0); //Centre of Mass - X
 setfloat(0x9630640+0xa4, 0); //Centre of Mass - Y
 setfloat(0x9630640+0xa8, 0); //Centre of Mass - Z
 //Teleport
 teleport( 268.31, -174.98, 11.50);
off();


#cheat custumized Deluxo @ Compound (hamyterl rank) 
 //Basics
 setint(0x8C73A70, 187);
 setchar(0x8C73A70+0x24, 0, 0, 0, 255);
 setchar(0x8C73A70+0x28, 255, 140, 0, 255);
 //Wheels
 setfloat(0x9360E38, 1.16, 1.16);
 setfloat(0x962f680+0x6c, 4);
 setfloat(0x962f680+0xc4, 5);
 setfloat(0x962f680+0x70, 0.9);
 //Engine
 setchar(0x962f680+0x5c, '120', '6000', 44);
 //Suspension
 setfloat(0x962f680+0x7c, 0);
 setfloat(0x962f680+0x80, -1);
 setfloat(0x962f680+0x78, 0.335);
 setfloat(0x962f680+0x74, 0.6);
 setfloat(0x962f680+0x84, 0.6);
 setfloat(0x962f680+0x88, 7);
 //Handling
 setfloat(0x962f680+0x68, 30);
 setfloat(0x962f680+0xbc, 230000);
 setfloat(0x962f680+0xc0, 250000);
 setfloat(0x962f680+0xa0, 10);
 setfloat(0x962f680+0xa4, 10);
 setfloat(0x962f680+0xa8, 10);
 //Effects
 //Exhaust
 setchar(0x09569B94,  0, 255, 255);
 setchar(0x09569B90,  0x4);
//Fire Burn Out Smoke
setchar(0x9569c90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xff, 0x20, 0x00);
// Nos to vcs 2
static On;
static going;
if(buttons & CTRL_CIRCLE &&!On) {
On = 1;
}
if(On) {
static timepassed;
static init;
if(!init)
{
lasttime = getchar( 0x08bb3b41 );
init = 1;
}
if( lasttime != getchar( 0x08bb3b41 ) )
{
timepassed++;
lasttime = getchar( 0x08bb3b41 );
}
if( timepassed < 30 )
{
going = 1;
}
else {
On = 0;
timepassed = 0;
going = 0;
}
}
if(going) {
setchar(0x09569B90, 0x10);
setchar(0x09569B94, 255, 80, 0);
speed = 5;
thrust = speed * 0.00344;
if(buttons & CTRL_CROSS) {
setfloat(pcar + 0x0140, getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);
setfloat(pcar + 0x0144, getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust);
}
}
else
{
setchar(0x09569B90, 0x4);
setchar(0x09569B94, 255, 80, 0);
}

#cheat lambo at clymens suite (Lelnagger rank)
//ID: 20096
//Score: 409
//Author: mathspeedy
//Category: Pimp My Garage
//Description: a cheetah with a red neon a lamborgini yellow color full speed
//see the SLIDESHOW
//http://img88.imageshack.us/slideshow/player.php?id=img88/1699/1201453953ewj.smil
//and please add this code
//CODE
//#cheat Lamborghini Doors
//// By Waterbottle & vettefan88
//setfloat(pcar+0x450,  0,  -1.2566371,  0);
//setfloat(pcar+0x480,  0,  -1.2566371,  0);
//setfloat(pcar+0x4b0,  0,  -1.2566371,  0);
//setfloat(pcar+0x4e0,  0,  -1.2566371,  0);
//
//EDITED BY: psphacker108 on 29/01/08 20:27:01
//Image: none
//Time: 28/01/2008 13:28:50
//Working: Yes
//Created By Sunshine Customs
//Sunshine Customs Created By emcp
//Addresses Found By Vette
//Basics
setint(0x8C73B30, 172); //Car Id
setchar(0x8C73B30+0x24, 255, 255, 0, 255); //Color 1
setchar(0x8C73B30+0x28, 255, 255, 0, 255); //Color2
setshort(0x98a33b8, 1, 'l', 'a', 'm', 'b', 'o', 0);
//Wheels
setfloat(0x935E6D8, 0.8, 0.8); //wheel size
setfloat(0x962ea40+0x6c, 1.2); //Traction Multiplier
setfloat(0x962ea40+0xc4, 0.9); //Traction Loss
setfloat(0x962ea40+0x70, 1); //Traction Bias
//Engine
setchar(0x962ea40+0x5c, '200', '14000', 40); // Drive type / Engine type / Gears
//Suspension
setfloat(0x962ea40+0x7c, 0.55); //Suspension Upper Limit
setfloat(0x962ea40+0x80, -0.25); //Suspension Lower Limit
setfloat(0x962ea40+0x78, 0.09); //Suspension Damping Level
setfloat(0x962ea40+0x74, 1.5); //Suspension Force Level
setfloat(0x962ea40+0x84, 0.55); //Suspension Bias
setfloat(0x962ea40+0x88, 0.5); //Anti-Dive Multiplier
//Handling
setfloat(0x962ea40+0x68, 34); //Steering Lock
setfloat(0x962ea40+0xbc, 5000); //Vehilce Mass
setfloat(0x962ea40+0xc0, 7000); //Turn Mass
setfloat(0x962ea40+0xa0, 0); //Centre of Mass - X
setfloat(0x962ea40+0xa4, 0); //Centre of Mass - Y
setfloat(0x962ea40+0xa8, 0); //Centre of Mass - Z
//Effects
//Neon
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  255, 0, 0);}
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat Lamborghini Doors
// By Waterbottle & vettefan88
setfloat(pcar+0x450,  0,  -1.2566371,  0);
setfloat(pcar+0x480,  0,  -1.2566371,  0);
setfloat(pcar+0x4b0,  0,  -1.2566371,  0);
setfloat(pcar+0x4e0,  0,  -1.2566371,  0);

#cheat LAMBO FASTER!
if(getshort(pcar + 0x56)== 172){
if (buttons & CTRL_CROSS){
boost = 2.5;
thrust = boost * 0.00333;
setfloat(pcar + 0x0140, getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);
setfloat(pcar + 0x0144, getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust);
setfloat(pcar + 0x0148, getfloat(pcar + 0x0148) + getfloat(pcar + 0x0018) * thrust);
setfloat(pcar + 0x0078, -0.03 * xstick);}

#cheat Ultimate Car Launcher x2
//ID: 19231
//Score: 163
//Author: Durka Durka Mahn
//Category: Misc
//Description: The Ultimate Car Launcher! Park a car atop the platform over the 4 small circles, then drop to the bottom and shoot one of the barrels on the very bottom. BOOM the car is gone!
//Image: http://img183.imageshack.us/img183/9095/video1xf1.gif
//Time: 08/01/2007 01:47:14
//Working: Yes
moveto(-767.14, -1206.59, 13.16);  object(0x1CB2, 270, 65, 66);
move(5.63, -12.71, 3.10);  object(0x1CB2, 270, 90, 66);
move(3.00, -6.77, -5.90);  object(0x1CB2, 270, 0, 66);
move(-1.61, 3.88, 0.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.80);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.84, -0.37, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.32, 0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.50);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 4.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.80);  object(0x01C2, 0, 0, 66);
move(0.86, 0.49, 4.30);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(-1.61, 3.88, 0.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.80);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.84, -0.37, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.32, 0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.50);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 4.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.80);  object(0x01C2, 0, 0, 66);
move(0.86, 0.49, 4.30);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
teleport(-770.87, -1198.80, 11.08);

#cheat Ultimate Car Launcher x3
//ID: 19231
//Score: 163
//Author: Durka Durka Mahn
//Category: Misc
//Description: The Ultimate Car Launcher! Park a car atop the platform over the 4 small circles, then drop to the bottom and shoot one of the barrels on the very bottom. BOOM the car is gone!
//Image: http://img183.imageshack.us/img183/9095/video1xf1.gif
//Time: 08/01/2007 01:47:14
//Working: Yes
moveto(-767.14, -1206.59, 13.16);  object(0x1CB2, 270, 65, 66);
move(5.63, -12.71, 3.10);  object(0x1CB2, 270, 90, 66);
move(3.00, -6.77, -5.90);  object(0x1CB2, 270, 0, 66);
move(-1.61, 3.88, 0.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.80);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.84, -0.37, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.32, 0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.50);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 4.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.80);  object(0x01C2, 0, 0, 66);
move(0.86, 0.49, 4.30);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(-1.61, 3.88, 0.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.80);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.84, -0.37, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.32, 0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.50);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 4.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.80);  object(0x01C2, 0, 0, 66);
move(0.86, 0.49, 4.30);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(-1.61, 3.88, 0.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.80);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.84, -0.37, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.32, 0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.50);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 4.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.80);  object(0x01C2, 0, 0, 66);
move(0.86, 0.49, 4.30);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
teleport(-770.87, -1198.80, 11.08);

#cheat Ultimate Car Launcher x2
//ID: 19231
//Score: 163
//Author: Durka Durka Mahn
//Category: Misc
//Description: The Ultimate Car Launcher! Park a car atop the platform over the 4 small circles, then drop to the bottom and shoot one of the barrels on the very bottom. BOOM the car is gone!
//Image: http://img183.imageshack.us/img183/9095/video1xf1.gif
//Time: 08/01/2007 01:47:14
//Working: Yes
moveto(-767.14, -1206.59, 13.16);  object(0x1CB2, 270, 65, 66);
move(5.63, -12.71, 3.10);  object(0x1CB2, 270, 90, 66);
move(3.00, -6.77, -5.90);  object(0x1CB2, 270, 0, 66);
move(-1.61, 3.88, 0.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.80);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.84, -0.37, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.32, 0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.50);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 4.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.80);  object(0x01C2, 0, 0, 66);
move(0.86, 0.49, 4.30);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(-1.61, 3.88, 0.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.80);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.84, -0.37, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.32, 0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.50);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 4.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.80);  object(0x01C2, 0, 0, 66);
move(0.86, 0.49, 4.30);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(-1.61, 3.88, 0.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.80);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.84, -0.37, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.32, 0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.50);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 4.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.80);  object(0x01C2, 0, 0, 66);
move(0.86, 0.49, 4.30);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(-1.61, 3.88, 0.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, 0.80);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.84, -0.37, 0.00);  object(0x01C2, 0, 0, 66);
move(-0.32, 0.73, 0.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.50);  object(0x01C2, 0, 0, 66);
move(0.32, -0.73, 4.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.20);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.80);  object(0x01C2, 0, 0, 66);
move(0.86, 0.49, 4.30);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.00);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -0.90);  object(0x01C2, 0, 0, 66);
move(0.00, 0.00, -1.10);  object(0x01C2, 0, 0, 66);
teleport(-770.87, -1198.80, 11.08);

#cheat side wild
setchar(pplayer + 0x000001CA, -60);

#cheat BIG
setfloat(0x936E818, 3);

#cheat BIGGER
setfloat(0x936A678, 6);

#cheat rotation
static rotation; 
if (rotation == 0)
{
rotation = 10000;
}
spin = tan(rotation);
setfloat(pcar + 0x644,  spin,  spin,  spin,  spin);
rotation = rotation - 1;
if (rotation == 1)
{rotation = 10000;}

#cheat Mile Highest Club v1.25.052
moveto(225.47,  -242.32,  100186.29);  object(0x1CB2,  0,  270,  30);
move(1.88,  3.23,  0.00);  object(0x1CB2,  0,  270,  30);
move(5.87,  -3.42,  0.00);  object(0x1CB2,  0,  270,  30);
move(-1.87,  -3.21,  0.00);  object(0x1CB2,  0,  270,  30);
move(10.19,  5.17,  0.00);  object(0x1CB2,  0,  270,  75);
move(-16.50,  9.62,  0.00);  object(0x1CB2,  0,  270,  345);
move(1.39,  10.53,  0.00);  object(0x1CB2,  0,  270,  30);
move(23.50,  -13.70,  0.00);  object(0x1CB2,  0,  270,  30);
move(1.49,  10.70,  0.00);  object(0x1CB2,  0,  270,  345);
move(-16.50,  9.62,  0.00);  object(0x1CB2,  0,  270,  75);
move(10.30,  -1.19,  0.00);  object(0x1CB2,  270,  270,  30);
move(-15.96,  -41.89,  0.00);  object(0x1CB2,  270,  270,  30);
move(-12.61,  7.35,  0.00);  object(0x1CB2,  270,  270,  30);
move(-3.41,  -5.85,  0.00);  object(0x1CB2,  270,  270,  30);
move(12.61,  -7.35,  0.00);  object(0x1CB2,  270,  270,  30);
move(-3.40,  -5.83,  0.00);  object(0x1CB2,  270,  270,  30);
move(-12.53,  7.30,  0.00);  object(0x1CB2,  270,  270,  30);
move(-3.42,  -5.87,  0.00);  object(0x1CB2,  270,  270,  30);
move(12.61,  -7.35,  0.00);  object(0x1CB2,  270,  270,  30);
move(12.60,  -7.17,  0.00);  object(0x1CB2,  270,  270,  30);
move(10.12,  17.50,  0.00);  object(0x1CB2,  270,  270,  30);
move(-1.51,  -10.59,  0.00);  object(0x1CB2,  180,  270,  30);
move(-46.47,  14.93,  0.00);  object(0x1CB2,  270,  270,  30);
move(10.27,  17.54,  0.00);  object(0x1CB2,  270,  270,  30);
move(-8.50,  -6.70,  0.00);  object(0x1CB2,  180,  270,  30);
move(13.88,  -27.72,  0.00);  object(0x1CB2,  270,  270,  30);
move(-3.39,  -5.86,  0.00);  object(0x1CB2,  270,  270,  30);
move(-2.76,  9.42,  0.00);  object(0x1CB2,  270,  270,  30);
move(12.63,  -7.32,  0.00);  object(0x1CB2,  270,  270,  30);
move(7.84,  -0.49,  3.40);  object(0x1CB2,  0,  0,  120);
move(6.24,  -3.59,  0.00);  object(0x1CB2,  0,  0,  120);
move(-31.49,  18.07,  0.00);  object(0x1CB2,  0,  0,  120);
move(-6.41,  3.69,  0.00);  object(0x1CB2,  0,  0,  120);
move(13.50,  23.44,  0.00);  object(0x1CB2,  0,  0,  120);
move(6.85,  -3.94,  0.00);  object(0x1CB2,  0,  0,  120);
move(24.39,  -14.16,  0.00);  object(0x1CB2,  0,  0,  120);
move(6.58,  -3.80,  0.00);  object(0x1CB2,  0,  0,  120);
move(2.59,  -9.93,  0.00);  object(0x1CB2,  0,  0,  30);
move(-6.19,  -10.68,  0.00);  object(0x1CB2,  0,  0,  30);
move(-43.94,  39.71,  0.00);  object(0x1CB2,  0,  0,  30);
move(-6.16,  -10.84,  0.00);  object(0x1CB2,  0,  0,  29);
move(14.53,  10.40,  3.30);  object(0x1CB2,  0,  270,  120);
move(-10.00,  -17.65,  0.00);  object(0x1CB2,  0,  270,  120);
move(1.45,  10.87,  0.00);  object(0x1CB2,  0,  270,  30);
move(21.17,  -0.50,  0.00);  object(0x1CB2,  0,  270,  120);
move(12.55,  -7.27,  0.00);  object(0x1CB2,  0,  270,  120);
move(12.29,  -7.12,  0.00);  object(0x1CB2,  0,  270,  120);
move(-10.21,  -17.30,  0.00);  object(0x1CB2,  0,  270,  120);
move(-12.46,  7.22,  0.00);  object(0x1CB2,  0,  270,  120);
move(-12.25,  6.98,  0.00);  object(0x1CB2,  0,  270,  120);
move(1.20,  11.00,  0.00);  object(0x1CB2,  0,  270,  29);
move(32.21,  -18.56,  0.00);  object(0x1CB2,  0,  270,  30);
move(-13.13,  8.20,  0.00);  object(0x1CB2,  0,  270,  30);
move(-5.94,  3.17,  0.00);  object(0x1CB2,  0,  270,  30);
move(-7.31,  4.01,  0.00);  object(0x1CB2,  0,  270,  29);
move(3.47,  -2.02,  0.00);  object(0x1CB2,  0,  270,  30);
move(-16.15,  2.90,  0.00);  object(0x029F,  90,  0,  29);
move(-3.83,  2.16,  0.00);  object(0x029F,  90,  0,  29);
move(1.62,  2.87,  0.00);  object(0x029F,  90,  0,  29);
move(3.86,  -2.19,  0.00);  object(0x029F,  90,  0,  30);
move(1.63,  2.87,  0.00);  object(0x029F,  90,  0,  30);
move(-3.76,  2.11,  0.00);  object(0x029F,  90,  0,  30);
move(1.64,  2.86,  0.00);  object(0x029F,  90,  0,  30);
move(3.73,  -2.14,  0.00);  object(0x029F,  90,  0,  30);
move(1.64,  2.86,  0.00);  object(0x029F,  90,  0,  30);
move(-3.73,  2.14,  0.00);  object(0x029F,  90,  0,  30);
move(28.99,  -31.48,  0.00);  object(0x029F,  90,  0,  30);
move(-3.82,  2.19,  0.00);  object(0x029F,  90,  0,  30);
move(1.64,  2.86,  0.00);  object(0x029F,  90,  0,  30);
move(1.64,  2.86,  0.00);  object(0x029F,  90,  0,  30);
move(1.69,  2.95,  0.00);  object(0x029F,  90,  0,  30);
move(0.40,  -7.95,  0.00);  object(0x029F,  90,  0,  30);
move(1.64,  2.86,  0.00);  object(0x029F,  90,  0,  30);
move(1.69,  2.95,  0.00);  object(0x029F,  90,  0,  30);
move(-4.80,  -8.77,  -6.70);  object(0x029F,  90,  0,  30);
move(-3.82,  2.19,  0.00);  object(0x029F,  90,  0,  30);
move(1.64,  2.86,  0.00);  object(0x029F,  90,  0,  30);
move(1.64,  2.86,  0.00);  object(0x029F,  90,  0,  30);
move(1.69,  2.95,  0.00);  object(0x029F,  90,  0,  30);
move(0.49,  -8.00,  0.00);  object(0x029F,  90,  0,  30);
move(1.64,  2.86,  0.00);  object(0x029F,  90,  0,  30);
move(1.69,  2.95,  0.00);  object(0x029F,  90,  0,  30);
move(-36.92,  9.83,  0.00);  object(0x029F,  90,  0,  30);
move(-3.83,  2.17,  0.00);  object(0x029F,  90,  0,  30);
move(1.63,  2.87,  0.00);  object(0x029F,  90,  0,  30);
move(1.63,  2.87,  0.00);  object(0x029F,  90,  0,  30);
move(1.68,  2.96,  0.00);  object(0x029F,  90,  0,  30);
move(0.52,  -8.00,  0.00);  object(0x029F,  90,  0,  30);
move(1.63,  2.87,  0.00);  object(0x029F,  90,  0,  30);
move(1.68,  2.96,  0.00);  object(0x029F,  90,  0,  30);
move(-0.11,  -5.86,  10.10);  object(0x1CB2,  0,  0,  30);
move(23.72,  -13.51,  0.00);  object(0x1CB2,  0,  0,  30);
move(-2.41,  9.91,  0.00);  object(0x1CB2,  0,  0,  300);
move(-11.33,  6.57,  0.00);  object(0x1CB2,  0,  0,  300);
move(-7.41,  -12.76,  0.00);  object(0x1CB2,  0,  0,  300);
move(11.34,  -6.23,  0.00);  object(0x1CB2,  0,  0,  299);
move(21.29,  7.58,  3.30);  object(0x1CB2,  0,  270,  300);
move(-12.57,  7.29,  0.00);  object(0x1CB2,  0,  270,  300);
move(-12.55,  7.26,  0.00);  object(0x1CB2,  0,  270,  300);
move(-10.97,  6.33,  0.00);  object(0x1CB2,  0,  270,  300);
move(-10.48,  -18.21,  0.00);  object(0x1CB2,  0,  270,  300);
move(12.60,  -7.23,  0.00);  object(0x1CB2,  0,  270,  300);
move(12.70,  -7.18,  0.00);  object(0x1CB2,  0,  270,  300);
move(19.42,  0.48,  0.00);  object(0x1CB2,  0,  270,  210);
move(-8.54,  -6.79,  0.00);  object(0x1CB2,  0,  270,  120);
move(-34.19,  32.11,  0.00);  object(0x1CB2,  0,  270,  210);
move(12.09,  -6.97,  0.00);  object(0x1CB2,  0,  270,  210);
move(18.05,  -10.34,  0.00);  object(0x1CB2,  0,  270,  210);
move(-14.12,  7.90,  0.00);  object(0x1CB2,  0,  270,  210);
move(10.41,  -5.31,  0.00);  object(0x1CB2,  0,  270,  210);
move(-2.65,  6.47,  0.00);  object(0x1CB2,  0,  270,  120);
move(-4.80,  -8.48,  0.00);  object(0x1CB2,  0,  270,  120);
move(2.17,  4.44,  0.00);  object(0x029F,  270,  180,  30);
move(-16.10,  2.59,  0.00);  object(0x029F,  270,  180,  30);
move(1.64,  2.86,  0.00);  object(0x029F,  270,  180,  30);
move(1.64,  2.86,  0.00);  object(0x029F,  270,  180,  30);
move(1.64,  2.86,  0.00);  object(0x029F,  270,  180,  30);
move(0.60,  1.04,  0.00);  object(0x029F,  270,  180,  30);
move(-3.66,  2.35,  0.00);  object(0x029F,  270,  180,  30);
move(-1.67,  -2.85,  0.00);  object(0x029F,  270,  180,  30);
move(-1.67,  -2.85,  0.00);  object(0x029F,  270,  180,  30);
move(-1.67,  -2.85,  0.00);  object(0x029F,  270,  180,  30);
move(-0.69,  -1.17,  0.00);  object(0x029F,  270,  180,  30);
move(30.81,  -17.43,  0.00);  object(0x029F,  270,  180,  30);
move(1.67,  2.85,  0.00);  object(0x029F,  270,  180,  30);
move(1.67,  2.85,  0.00);  object(0x029F,  270,  180,  30);
move(1.67,  2.85,  0.00);  object(0x029F,  270,  180,  30);
move(0.71,  1.21,  0.00);  object(0x029F,  270,  180,  30);
move(3.80,  -2.22,  0.00);  object(0x029F,  270,  180,  30);
move(0.00,  0.00,  0.00);  object(0x029F,  270,  180,  30);
move(-1.67,  -2.85,  0.00);  object(0x029F,  270,  180,  30);
move(-1.67,  -2.85,  0.00);  object(0x029F,  270,  180,  30);
move(-1.67,  -2.85,  0.00);  object(0x029F,  270,  180,  30);
move(-0.76,  -1.29,  0.00);  object(0x029F,  270,  180,  30);
move(3.00,  48.59,  -8.00);  object(0x1CE5,  270,  90,  300);
move(0.00,  0.00,  -1.20);  object(0x1CE5,  270,  90,  300);
move(0.00,  0.00,  -1.10);  object(0x1CE5,  270,  90,  300);
move(2.07,  -1.21,  0.00);  object(0x1CE5,  270,  90,  300);
move(0.00,  0.00,  1.10);  object(0x1CE5,  270,  90,  300);
move(0.00,  0.00,  1.20);  object(0x1CE5,  270,  90,  300);
move(-0.52,  0.30,  0.70);  object(0x1CE5,  210,  0,  210);
move(-0.86,  0.74,  0.00);  object(0x1CE5,  210,  0,  210);
move(-0.89,  0.65,  -3.30);  object(0x1CE5,  160,  315,  210);
move(2.85,  -1.47,  0.00);  object(0x1CE5,  160,  240,  210);
move(0.15,  0.06,  -0.10);  object(0x1CE5,  160,  250,  210);
move(-0.36,  0.33,  7.60);  object(0x1CE5,  160,  250,  210);
move(4.09,  -56.63,  -7.30);  object(0x1CB2,  90,  300,  120);
move(-56.08,  32.46,  0.00);  object(0x1CB2,  90,  300,  120);
move(5.04,  -12.90,  -3.00);  object(0x1CB2,  0,  90,  120);
move(-5.77,  3.63,  0.00);  object(0x1CB2,  0,  90,  120);
move(7.69,  21.01,  6.60);  object(0x1CB2,  0,  90,  210);
move(0.51,  0.86,  0.00);  object(0x1CB2,  0,  90,  210);
move(8.71,  7.04,  0.00);  object(0x1CB2,  0,  90,  300);
move(9.76,  -5.80,  2.80);  object(0x1CB2,  270,  235,  29);
move(11.44,  -6.69,  4.10);  object(0x1CB2,  270,  90,  30);
move(2.42,  -28.00,  -6.40);  object(0x01C2,  0,  0,  271);
move(0.80,  1.12,  0.00);  object(0x01C2,  0,  0,  263);
move(-0.89,  -0.12,  0.00);  object(0x01C2,  0,  0,  271);
move(-0.91,  0.01,  0.00);  object(0x01C2,  0,  0,  280);
move(-0.87,  0.35,  0.00);  object(0x01C2,  0,  0,  289);
move(0.88,  0.79,  0.00);  object(0x01C2,  0,  0,  282);
move(1.28,  0.39,  0.00);  object(0x01C2,  0,  0,  266);
move(0.95,  -0.03,  0.00);  object(0x01C2,  0,  0,  256);
move(0.40,  1.17,  0.00);  object(0x01C2,  0,  0,  247);
move(-1.33,  -0.27,  0.00);  object(0x01C2,  0,  0,  264);
move(-1.30,  -0.06,  0.00);  object(0x01C2,  0,  0,  281);
move(-0.91,  -0.44,  0.00);  object(0x01C2,  0,  0,  291);
move(-1.02,  -0.49,  0.00);  object(0x01C2,  0,  0,  299);
move(-0.89,  0.38,  0.00);  object(0x01C2,  0,  0,  308);
move(-0.85,  0.41,  0.00);  object(0x01C2,  0,  0,  317);
move(-0.95,  0.65,  0.00);  object(0x01C2,  0,  0,  328);
move(1.36,  -0.03,  0.00);  object(0x01C2,  0,  0,  319);
move(0.99,  -0.10,  0.00);  object(0x01C2,  0,  0,  311);
move(1.06,  0.33,  0.00);  object(0x01C2,  0,  0,  302);
move(1.43,  0.42,  0.00);  object(0x01C2,  0,  0,  285);
move(1.56,  0.51,  0.00);  object(0x01C2,  0,  0,  262);
move(1.28,  0.24,  0.00);  object(0x01C2,  0,  0,  244);
move(0.00,  0.00,  0.00);  object(0x01C2,  0,  0,  244);
move(0.00,  0.00,  0.00);  object(0x01C2,  0,  0,  244);
move(0.00,  0.00,  0.00);  object(0x01C2,  0,  0,  244);
move(0.00,  0.00,  0.00);  object(0x01C2,  0,  0,  244);
move(0.00,  0.00,  0.00);  object(0x01C2,  0,  0,  244);
move(0.58,  0.90,  0.00);  object(0x01C2,  0,  0,  230);
move(-1.27,  -0.01,  0.00);  object(0x01C2,  0,  0,  245);
move(-22.24,  7.17,  0.40);  object(0x01D5,  0,  0,  341);
move(0.97,  -1.03,  0.00);  object(0x01D5,  0,  0,  333);
move(-1.09,  2.51,  0.00);  object(0x01D5,  0,  0,  350);
move(0.54,  1.42,  0.00);  object(0x01D5,  0,  0,  359);
move(1.05,  1.21,  0.00);  object(0x01D5,  0,  0,  7);
move(0.54,  -3.25,  0.00);  object(0x01D5,  0,  0,  341);
move(0.15,  1.45,  0.00);  object(0x01D5,  0,  0,  352);
move(-0.53,  -4.17,  0.00);  object(0x01D5,  0,  0,  330);
move(1.13,  1.65,  0.00);  object(0x01D5,  0,  0,  338);
move(-0.48,  4.07,  0.00);  object(0x01D5,  0,  0,  19);
move(1.31,  -5.90,  0.00);  object(0x01D5,  0,  0,  320);
move(0.38,  1.38,  0.00);  object(0x01D5,  0,  0,  327);
move(-0.50,  1.53,  0.00);  object(0x01D5,  0,  0,  345);
move(0.50,  1.80,  0.00);  object(0x01D5,  0,  0,  6);
move(-0.03,  1.64,  0.00);  object(0x01D5,  0,  0,  27);
move(-1.05,  0.46,  0.00);  object(0x01D5,  0,  0,  28);
move(0.78,  1.57,  0.00);  object(0x01D5,  0,  0,  45);
move(1.42,  -9.73,  0.00);  object(0x01D5,  0,  0,  305);
move(-1.10,  0.66,  0.00);  object(0x01D5,  0,  0,  316);
move(0.00,  0.00,  0.00);  object(0x01D5,  0,  0,  316);
move(-8.40,  -12.25,  5.90);  object(0x1CB2,  0,  270,  210);
move(-7.18,  -12.30,  0.00);  object(0x1CB2,  0,  270,  210);
move(-7.04,  -12.28,  0.00);  object(0x1CB2,  0,  270,  210);
move(-7.05,  -12.12,  0.00);  object(0x1CB2,  0,  270,  210);
move(-6.94,  -11.97,  0.00);  object(0x1CB2,  0,  270,  210);
move(-6.97,  -12.07,  0.00);  object(0x1CB2,  0,  270,  210);
move(-7.23,  -12.51,  0.00);  object(0x1CB2,  0,  270,  210);
move(-6.66,  -11.66,  0.00);  object(0x1CB2,  0,  270,  209);
move(-6.48,  -11.69,  0.00);  object(0x1CB2,  0,  270,  209);
move(-6.62,  -11.95,  0.00);  object(0x1CB2,  0,  270,  209);
move(-5.52,  -9.70,  0.00);  object(0x1CB2,  0,  270,  210);
move(-6.47,  -11.21,  0.00);  object(0x1CB2,  0,  270,  210);
move(-6.39,  -11.02,  0.00);  object(0x1CB2,  0,  270,  210);
move(-6.72,  -11.52,  0.00);  object(0x1CB2,  0,  270,  210);
move(-7.11,  -12.54,  0.00);  object(0x1CB2,  0,  270,  209);
move(-7.02,  -12.46,  0.00);  object(0x1CB2,  0,  270,  210);
move(-6.57,  -11.38,  0.00);  object(0x1CB2,  0,  270,  210);
move(-6.68,  -11.67,  0.00);  object(0x1CB2,  0,  270,  210);
move(-6.98,  -12.07,  0.00);  object(0x1CB2,  0,  270,  210);
move(-6.07,  -10.39,  0.00);  object(0x1CB2,  0,  270,  210);
move(-6.53,  -11.41,  0.00);  object(0x1CB2,  0,  270,  210);
move(-4.88,  -8.15,  0.00);  object(0x1CB2,  0,  265,  120);
move(-2.81,  -4.96,  0.70);  object(0x1CB2,  0,  260,  120);
move(-2.44,  -4.19,  1.00);  object(0x1CB2,  0,  255,  120);
move(-2.17,  -3.80,  1.50);  object(0x1CB2,  0,  245,  120);
move(-2.46,  -4.21,  2.80);  object(0x1CB2,  0,  235,  120);
move(-2.13,  -3.73,  3.60);  object(0x1CB2,  0,  225,  120);
move(-1.45,  -2.43,  3.50);  object(0x1CB2,  0,  215,  120);
move(-1.00,  -1.43,  3.10);  object(0x1CB2,  0,  205,  120);
move(-0.59,  -0.99,  3.40);  object(0x1CB2,  0,  195,  120);
teleport(207.59,  -284.89,  100187.43); 

#cheat Pimped Washington+ at The Clymenus Suite
//Created By Sunshine Customs
//Sunshine Customs Created By emcp
//Addresses Found By Vette
//Basics
setint(0x8C73B30, 276); //Car Id
setchar(0x8C73B30+0x24, 170,0,0, 255); //Color 1
setchar(0x8C73B30+0x28, 255,154,0, 255); //Color2
setshort(0x98a33c8, 1,  0);
//Wheels
setfloat(0x936F7D8, 1.5, 1.5); //wheel size
setfloat(0x9634800+0x6c, 1.75); //Traction Multiplier
setfloat(0x9634800+0xc4, 0.7); //Traction Loss
setfloat(0x9634800+0x70, 0.4); //Traction Bias
//Engine
setchar(0x9634800+0x5c, '1', '4', 7); // Drive type / Engine type / Gears
//Suspension
setfloat(0x9634800+0x7c, 0.5); //Suspension Upper Limit
setfloat(0x9634800+0x80, -0.20); //Suspension Lower Limit
setfloat(0x9634800+0x78, 0.2); //Suspension Damping Level
setfloat(0x9634800+0x74, 2); //Suspension Force Level
setfloat(0x9634800+0x84, 0.7); //Suspension Bias
setfloat(0x9634800+0x88, 1); //Anti-Dive Multiplier
//Handling
setfloat(0x9634800+0x68, 30); //Steering Lock
setfloat(0x9634800+0xbc, 4000); //Vehilce Mass
setfloat(0x9634800+0xc0, 4000); //Turn Mass
setfloat(0x9634800+0xa0, 0); //Centre of Mass - X
setfloat(0x9634800+0xa4, 0); //Centre of Mass - Y
setfloat(0x9634800+0xa8, 0); //Centre of Mass - Z
//Effects
//Exhaust
setchar(0x09569B94, 255, 70, 0);
//Neon
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  255, 0, 0);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat lowrider+ at The Clymenus Suite
//Created By Sunshine Customs
//Sunshine Customs Created By emcp
//Addresses Found By Vette
//Basics
setint(0x8C73B30, 239); //Car Id
setchar(0x8C73B30+0x24, 55,0,55, 255); //Color 1
setchar(0x8C73B30+0x28, 0,0,255, 255); //Color2
setshort(0x98a3008, 1, 'l','o','w','r','i','d','e','r','+', 0);
//Wheels
setfloat(0x93696B8, .7, .7); //wheel size
setfloat(0x96324a0+0x6c, 0.35); //Traction Multiplier
setfloat(0x96324a0+0xc4, 0.35); //Traction Loss
setfloat(0x96324a0+0x70, 0.35); //Traction Bias
//Engine
setchar(0x96324a0+0x5c, '1', '2', 2); // Drive type / Engine type / Gears
//Suspension
setfloat(0x96324a0+0x7c, 0.27); //Suspension Upper Limit
setfloat(0x96324a0+0x80, -0.18); //Suspension Lower Limit
setfloat(0x96324a0+0x78, 0.28); //Suspension Damping Level
setfloat(0x96324a0+0x74, 0.5); //Suspension Force Level
setfloat(0x96324a0+0x84, 0.5); //Suspension Bias
setfloat(0x96324a0+0x88, 0.3); //Anti-Dive Multiplier
//Handling
setfloat(0x96324a0+0x68, 22); //Steering Lock
setfloat(0x96324a0+0xbc, 1000); //Vehilce Mass
setfloat(0x96324a0+0xc0, 1000); //Turn Mass
setfloat(0x96324a0+0xa0, 0); //Centre of Mass - X
setfloat(0x96324a0+0xa4, 0); //Centre of Mass - Y
setfloat(0x96324a0+0xa8, 0); //Centre of Mass - Z
//Effects
//Exhaust
setchar(0x09569B94, 0, 175, 255);
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  55, 0, 55);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat Highrider+ at The Clymenus Suite
//Created By Sunshine Customs
//Sunshine Customs Created By emcp
//Addresses Found By Vette
//Basics
setint(0x8C73B30, 239); //Car Id
setchar(0x8C73B30+0x24, 55,0,55, 255); //Color 1
setchar(0x8C73B30+0x28, 0,0,255, 255); //Color2
setshort(0x98a3008, 1, 'H','i','g','h','r','i','d','e','r','+', 0);
//Wheels
setfloat(0x93696B8, 2, 2); //wheel size
setfloat(0x96324a0+0x6c, 1.1); //Traction Multiplier
setfloat(0x96324a0+0xc4, 1.15); //Traction Loss
setfloat(0x96324a0+0x70, 0.9); //Traction Bias
//Engine
setchar(0x96324a0+0x5c, '5', '10', 56); // Drive type / Engine type / Gears
//Suspension
setfloat(0x96324a0+0x7c, 0.87); //Suspension Upper Limit
setfloat(0x96324a0+0x80, -0.04); //Suspension Lower Limit
setfloat(0x96324a0+0x78, 1); //Suspension Damping Level
setfloat(0x96324a0+0x74, 8); //Suspension Force Level
setfloat(0x96324a0+0x84, 0.5); //Suspension Bias
setfloat(0x96324a0+0x88, 0.3); //Anti-Dive Multiplier
//Handling
setfloat(0x96324a0+0x68, 40); //Steering Lock
setfloat(0x96324a0+0xbc, 2000); //Vehilce Mass
setfloat(0x96324a0+0xc0, 2000); //Turn Mass
setfloat(0x96324a0+0xa0, 0); //Centre of Mass - X
setfloat(0x96324a0+0xa4, 0); //Centre of Mass - Y
setfloat(0x96324a0+0xa8, 0); //Centre of Mass - Z
//Effects
//Exhaust
setchar(0x09569B94, 0, 175, 255);
//neon
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  55, 0, 55);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat Pimped Stallion+ at The Clymenus Suite
//Created By Sunshine Customs
//Sunshine Customs Created By emcp
//Addresses Found By Vette
//Basics
setint(0x8C73B30, 206); //Car Id
setchar(0x8C73B30+0x24, 171,143,255, 255); //Color 1
setchar(0x8C73B30+0x28, 0,0,255, 255); //Color2
setshort(0x98a323a, 1,  0);
//Wheels
setfloat(0x9364018, 1.5, 1.5); //wheel size
setfloat(0x9630800+0x6c, 2); //Traction Multiplier
setfloat(0x9630800+0xc4, 2.2); //Traction Loss
setfloat(0x9630800+0x70, 0.5); //Traction Bias
//Engine
setchar(0x9630800+0x5c, '25', '10', 7); // Drive type / Engine type / Gears
//Suspension
setfloat(0x9630800+0x7c, 0.47); //Suspension Upper Limit
setfloat(0x9630800+0x80, -0.1); //Suspension Lower Limit
setfloat(0x9630800+0x78, 0.4); //Suspension Damping Level
setfloat(0x9630800+0x74, 2); //Suspension Force Level
setfloat(0x9630800+0x84, 1); //Suspension Bias
setfloat(0x9630800+0x88, 1); //Anti-Dive Multiplier
//Handling
setfloat(0x9630800+0x68, 30); //Steering Lock
setfloat(0x9630800+0xbc, 2500); //Vehilce Mass
setfloat(0x9630800+0xc0, 2500); //Turn Mass
setfloat(0x9630800+0xa0, 0); //Centre of Mass - X
setfloat(0x9630800+0xa4, 0); //Centre of Mass - Y
setfloat(0x9630800+0xa8, 0); //Centre of Mass - Z
//Effects
//Exhaust
setchar(0x09569B94, 0, 175, 255);
//Neon
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  171, 143, 255);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat Dudek13l+ at The Clymenus Suite
//Created By Sunshine Customs
//Sunshine Customs Created By emcp
//Addresses Found By Vette
//Basics
setint(0x8C73B30, 265); //Car Id
setchar(0x8C73B30+0x24, 0,0,0,255); //Color 1
setchar(0x8C73B30+0x28, 0,0,255,255); //Color2
setshort(0x98a2ec4, 1, 'D','u','d','e','k','1','3','l', 0);
//Wheels
setfloat(0x936DAF8, 1, 1); //wheel size
setfloat(0x9633880+0x6c, 0.75); //Traction Multiplier
setfloat(0x9633880+0xc4, 1); //Traction Loss
setfloat(0x9633880+0x70, 0.5); //Traction Bias
//Engine
setchar(0x9633880+0x5c, '15', '70', 5); // Drive type / Engine type / Gears
//Suspension
setfloat(0x9633880+0x7c, 0.47); //Suspension Upper Limit
setfloat(0x9633880+0x80, -0.1); //Suspension Lower Limit
setfloat(0x9633880+0x78, 0.4); //Suspension Damping Level
setfloat(0x9633880+0x74, 1); //Suspension Force Level
setfloat(0x9633880+0x84, 0.6); //Suspension Bias
setfloat(0x9633880+0x88, 0); //Anti-Dive Multiplier
//Handling
setfloat(0x9633880+0x68, 30); //Steering Lock
setfloat(0x9633880+0xbc, 14000); //Vehilce Mass
setfloat(0x9633880+0xc0, 14000); //Turn Mass
setfloat(0x9633880+0xa0, 0); //Centre of Mass - X
setfloat(0x9633880+0xa4, 0); //Centre of Mass - Y
setfloat(0x9633880+0xa8, 0); //Centre of Mass - Z
//Effects
//Exhaust
setchar(0x09569B94, 0, 175, 255);
//Neon
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  0, 0, 255);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat Christmas Bus+ at The Clymenus Suite
//Created By Sunshine Customs
//Sunshine Customs Created By emcp
//Addresses Found By Vette
//Basics
setint(0x8C73B30, 237); //Car Id
setchar(0x8C73B30+0x24, 255,0,0, 255); //Color 1
setchar(0x8C73B30+0x28, 0,255,0, 255); //Color2
setshort(0x98a3474, 1, 'C','h','r','i','s','t','m','a','s',' ','B','u','s','+', 0);
//Wheels
setfloat(0x9369178, 2, 2); //wheel size
setfloat(0x9632120+0x6c, 0.8); //Traction Multiplier
setfloat(0x9632120+0xc4, 0.9); //Traction Loss
setfloat(0x9632120+0x70, 0.5); //Traction Bias
//Engine
setchar(0x9632120+0x5c, '300', '1000', 12); // Drive type / Engine type / Gears
//Suspension
setfloat(0x9632120+0x7c, 0.67); //Suspension Upper Limit
setfloat(0x9632120+0x80, -0.02); //Suspension Lower Limit
setfloat(0x9632120+0x78, 0.6); //Suspension Damping Level
setfloat(0x9632120+0x74, 6); //Suspension Force Level
setfloat(0x9632120+0x84, 0.5); //Suspension Bias
setfloat(0x9632120+0x88, 0); //Anti-Dive Multiplier
//Handling
setfloat(0x9632120+0x68, 36); //Steering Lock
setfloat(0x9632120+0xbc, 1000000); //Vehilce Mass
setfloat(0x9632120+0xc0, 1000000); //Turn Mass
setfloat(0x9632120+0xa0, 0); //Centre of Mass - X
setfloat(0x9632120+0xa4, 0); //Centre of Mass - Y
setfloat(0x9632120+0xa8, 0); //Centre of Mass - Z
//Effects
//Exhaust
setchar(0x09569B94, 0, 255, 0);
//Neon
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  255, 0, 0);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat Monster Fireballs+ at The Clymenus Suite
//Created By Sunshine Customs
//Sunshine Customs Created By emcp
//Addresses Found By Vette
//Basics
setint(0x8C73B30, 256); //Car Id
setchar(0x8C73B30+0x24, 255,0,0, 255); //Color 1
setchar(0x8C73B30+0x28, 255,204,0, 255); //Color2
setshort(0x98a30ba, 1, 'M','o','n','s','t','e','r','f','i','r','e','b','a','l','l','s','+', 0);
//Wheels
setfloat(0x936C358, 1.8, 1.8); //wheel size
setfloat(0x96334a0+0x6c, 0.75); //Traction Multiplier
setfloat(0x96334a0+0xc4, 0.9); //Traction Loss
setfloat(0x96334a0+0x70, 0.5); //Traction Bias
//Engine
setchar(0x96334a0+0x5c, '10', '150000', 1); // Drive type / Engine type / Gears
//Suspension
setfloat(0x96334a0+0x7c, 0.47); //Suspension Upper Limit
setfloat(0x96334a0+0x80, -0.1); //Suspension Lower Limit
setfloat(0x96334a0+0x78, 0.4); //Suspension Damping Level
setfloat(0x96334a0+0x74, 2.2); //Suspension Force Level
setfloat(0x96334a0+0x84, 0.6); //Suspension Bias
setfloat(0x96334a0+0x88, 0); //Anti-Dive Multiplier
//Handling
setfloat(0x96334a0+0x68, 30); //Steering Lock
setfloat(0x96334a0+0xbc, 500); //Vehilce Mass
setfloat(0x96334a0+0xc0, 500); //Turn Mass
setfloat(0x96334a0+0xa0, 0); //Centre of Mass - X
setfloat(0x96334a0+0xa4, 0); //Centre of Mass - Y
setfloat(0x96334a0+0xa8, 0); //Centre of Mass - Z
//Effects
//Exhuast
setchar(0x09569B94, 255, 80, 0);
//Neon
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  255, 80, 0);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat Sacr1d at The Clymenus Suite
//Created By Sunshine Customs
//Sunshine Customs Created By emcp
//Addresses Found By Vette
//Basics
setint(0x8C73B30, 196); //Car Id
setchar(0x8C73B30+0x24, 104,0,30, 255); //Color 1
setchar(0x8C73B30+0x28, 65,0,16, 255); //Color2
setshort(0x98a364e, 1, 'S','a','c','r','1','d', 0);
//Wheels
setfloat(0x93625D8, 1, 1); //wheel size
setfloat(0x962fe60+0x6c, 0.8); //Traction Multiplier
setfloat(0x962fe60+0xc4, 0.8); //Traction Loss
setfloat(0x962fe60+0x70, 0.6); //Traction Bias
//Engine
setchar(0x962fe60+0x5c, '-2', '1', 6); // Drive type / Engine type / Gears
//Suspension
setfloat(0x962fe60+0x7c, 0.47); //Suspension Upper Limit
setfloat(0x962fe60+0x80, -0.04); //Suspension Lower Limit
setfloat(0x962fe60+0x78, 0.4); //Suspension Damping Level
setfloat(0x962fe60+0x74, 1); //Suspension Force Level
setfloat(0x962fe60+0x84, 0.6); //Suspension Bias
setfloat(0x962fe60+0x88, 0); //Anti-Dive Multiplier
//Handling
setfloat(0x962fe60+0x68, 25); //Steering Lock
setfloat(0x962fe60+0xbc, 0.01); //Vehilce Mass
setfloat(0x962fe60+0xc0, 0.01); //Turn Mass
setfloat(0x962fe60+0xa0, 0); //Centre of Mass - X
setfloat(0x962fe60+0xa4, 0); //Centre of Mass - Y
setfloat(0x962fe60+0xa8, 0); //Centre of Mass - Z
//Effects
//Exhuast
setchar(0x09569B94, 104, 30, 0);
//Neon
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  104, 30, 0);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat Sacr2d at The Clymenus Suite
//Created By Sunshine Customs
//Sunshine Customs Created By emcp
//Addresses Found By Vette
//Basics
setint(0x8C73B30, 196); //Car Id
setchar(0x8C73B30+0x24, 104,0,30, 255); //Color 1
setchar(0x8C73B30+0x28, 65,0,16, 255); //Color2
setshort(0x98a364e, 1, 'S','a','c','r','2','d', 0);
//Wheels
setfloat(0x93625D8, 1.1, 1.1); //wheel size
setfloat(0x962fe60+0x6c, 0.8); //Traction Multiplier
setfloat(0x962fe60+0xc4, 0.8); //Traction Loss
setfloat(0x962fe60+0x70, 0.6); //Traction Bias
//Engine
setchar(0x962fe60+0x5c, '1', '1', 7); // Drive type / Engine type / Gears
//Suspension
setfloat(0x962fe60+0x7c, 0.47); //Suspension Upper Limit
setfloat(0x962fe60+0x80, -0.04); //Suspension Lower Limit
setfloat(0x962fe60+0x78, 0.4); //Suspension Damping Level
setfloat(0x962fe60+0x74, 1); //Suspension Force Level
setfloat(0x962fe60+0x84, 0.6); //Suspension Bias
setfloat(0x962fe60+0x88, 0); //Anti-Dive Multiplier
//Handling
setfloat(0x962fe60+0x68, 26); //Steering Lock
setfloat(0x962fe60+0xbc, 0.05); //Vehilce Mass
setfloat(0x962fe60+0xc0, 0.05); //Turn Mass
setfloat(0x962fe60+0xa0, 0); //Centre of Mass - X
setfloat(0x962fe60+0xa4, 0); //Centre of Mass - Y
setfloat(0x962fe60+0xa8, 0); //Centre of Mass - Z
//Effects
//Exhuast
setchar(0x09569B94, 104, 30, 0);
//Neon
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  104, 30, 0);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat Light vic
setfloat(pplayer+0xD0, 0.07, 0.1);
#off
setfloat(pplayer+0xD0, 70, 100);

#cheat Muscle+ at The Clymenus Suite
//Created By Sunshine Customs
//Sunshine Customs Created By emcp
//Addresses Found By Vette
//Basics
setint(0x8C73B30, 187); //Car Id
setchar(0x8C73B30+0x24, 30,0,0, 255); //Color 1
setchar(0x8C73B30+0x28, 0,30,0, 255); //Color2
setshort(0x98a316c, 1, 'M','u','s','c','l','e', 0);
//Wheels
setfloat(0x9360E38, 1.35, 1.35); //wheel size
setfloat(0x962f680+0x6c, 0.75); //Traction Multiplier
setfloat(0x962f680+0xc4, 0.85); //Traction Loss
setfloat(0x962f680+0x70, 0.5); //Traction Bias
//Engine
setchar(0x962f680+0x5c, '20', '13', 8); // Drive type / Engine type / Gears
//Suspension
setfloat(0x962f680+0x7c, 0.47); //Suspension Upper Limit
setfloat(0x962f680+0x80, -0.1); //Suspension Lower Limit
setfloat(0x962f680+0x78, 0.4); //Suspension Damping Level
setfloat(0x962f680+0x74, 1.5); //Suspension Force Level
setfloat(0x962f680+0x84, 0.6); //Suspension Bias
setfloat(0x962f680+0x88, 9); //Anti-Dive Multiplier
//Handling
setfloat(0x962f680+0x68, 30); //Steering Lock
setfloat(0x962f680+0xbc, 8000); //Vehilce Mass
setfloat(0x962f680+0xc0, 8000); //Turn Mass
setfloat(0x962f680+0xa0, 0); //Centre of Mass - X
setfloat(0x962f680+0xa4, 0); //Centre of Mass - Y
setfloat(0x962f680+0xa8, 0); //Centre of Mass - Z
//Effects
//Exhuast
setchar(0x09569B94, 255, 80, 0);
//Neon
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  0, 255, 0);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat Cobra+ at The Clymenus Suite
//Created By Sunshine Customs
//Sunshine Customs Created By emcp
//Addresses Found By Vette
//Basics
setint(0x8C73B30, 266); //Car Id
setchar(0x8C73B30+0x24, 30,0,0, 255); //Color 1
setchar(0x8C73B30+0x28, 0,0,30, 255); //Color2
setshort(0x98a35a4, 1, 'C','o','b','r','a','+', 0);
//Wheels
setfloat(0x936DD98, 1.4, 1.4); //wheel size
setfloat(0x96340a0+0x6c, 0.75); //Traction Multiplier
setfloat(0x96340a0+0xc4, 0.85); //Traction Loss
setfloat(0x96340a0+0x70, 0.5); //Traction Bias
//Engine
setchar(0x96340a0+0x5c, '40', '100', 10); // Drive type / Engine type / Gears
//Suspension
setfloat(0x96340a0+0x7c, 0.47); //Suspension Upper Limit
setfloat(0x96340a0+0x80, -0.1); //Suspension Lower Limit
setfloat(0x96340a0+0x78, 4); //Suspension Damping Level
setfloat(0x96340a0+0x74, 20); //Suspension Force Level
setfloat(0x96340a0+0x84, 1); //Suspension Bias
setfloat(0x96340a0+0x88, 0); //Anti-Dive Multiplier
//Handling
setfloat(0x96340a0+0x68, 30); //Steering Lock
setfloat(0x96340a0+0xbc, 6750); //Vehilce Mass
setfloat(0x96340a0+0xc0, 6750); //Turn Mass
setfloat(0x96340a0+0xa0, 0); //Centre of Mass - X
setfloat(0x96340a0+0xa4, 0); //Centre of Mass - Y
setfloat(0x96340a0+0xa8, 0); //Centre of Mass - Z
//Effects
//Exhuast
setchar(0x09569B94, 255, 80, 0);
//Neon
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  255, 0, 0);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
//Teleport
teleport( 268.31, -174.98, 11.50);
off();

#cheat ???
setint(0x08BF2E00, 20);// ???

#cheat ferris wheel speed x10
//by vettefan88
setchar(0x8baac40, 255, 1);
setfloat(0x8baac34, .5);

#cheat ferris wheel speed x100
//by vettefan88
setchar(0x8baac40, 255, 1);
setfloat(0x8baac34, 5);

#cheat ferris wheel speed x1,000
//by vettefan88
setchar(0x8baac40, 255, 1);
setfloat(0x8baac34, 50);

#cheat ferris wheel speed x10,000
//by vettefan88
setchar(0x8baac40, 255, 1);
setfloat(0x8baac34, 500);

#cheat ferris wheel speed x100,000
//by vettefan88
setchar(0x8baac40, 255, 1);
setfloat(0x8baac34, 5000);

#cheat ferris wheel speed x1,000,000
//by vettefan88
setchar(0x8baac40, 255, 1);
setfloat(0x8baac34, 50000);

#cheat ferris wheel speed x10,000,000
//by vettefan88
setchar(0x8baac40, 255, 1);
setfloat(0x8baac34, 500000);

#cheat ferris wheel speed x100,000,000
//by vettefan88
setchar(0x8baac40, 255, 1);
setfloat(0x8baac34, 5000000);

#cheat ferris wheel speed x1,000,000,000
//by vettefan88
setchar(0x8baac40, 255, 1);
setfloat(0x8baac34, 50000000);

#cheat ferris wheel speed x10,000,000,000
//by vettefan88
setchar(0x8baac40, 255, 1);
setfloat(0x8baac34, 500000000);

#cheat Chrome Custom+
setfloat(pcar+0x450,  0,  -1.2566371,  0);
setfloat(pcar+0x480,  0,  -1.2566371,  0);
setfloat(pcar+0x4b0,  0,  -1.2566371,  0);
setfloat(pcar+0x4e0,  0,  -1.2566371,  0);
setshort(pcar+0x3b6,  0,  0);
setfloat(pcar+0x450,  4,  2,  4);
setfloat(pcar+0x480,  4,  2,  4);
setfloat(pcar+0x4b0,  4,  2,  4);
setfloat(pcar+0x4e0,  4,  2,  4);
{
static rotation; 
if (rotation == 0)
{
rotation = 10000;
}
spin = tan(rotation);
setfloat(pcar + 0x644,  spin,  spin,  spin,  spin);
rotation = rotation - 1;
if (rotation == 1)
{rotation = 10000;}
}
R = 228;
G = 228;
B = 228;
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  R,  G,  B);} 
{
setchar(0x09569B94, 18, 53, 173);
}
setfloat(0x936E818, 0.8);
{
setint(0x08C739B0,   270);
}
setchar(0x8bad856, 01);
{
if(buttons & CTRL_CIRCLE && !(buttons & CTRL_LTRIGGER)) {
//calculate speed
speed = sqrt(getfloat(pcar + 0x140) * getfloat(pcar + 0x140) + getfloat(pcar + 0x144) * getfloat(pcar + 0x144));

//if speed is lower than max speed for NOS accelerate
if(speed<4) {
setfloat(pcar+0x140,  getfloat(pcar+0x140)-getfloat(pcar+0x4)*0.005);
setfloat(pcar+0x144,  getfloat(pcar+0x144)+getfloat(pcar)*0.005);
}
}
}

#cheat A
setint(0x08C739B0, 171);
#off
setint(0x08C739B0, 0);

#cheat pcj
setint(0x08C739B0, 212);
#off
setint(0x08C739B0, 0);

#cheat ???
setint(0x08C739B0, 242);
#off
setint(0x08C739B0, 0);

#cheat R
setint(0x08C739B0, 207);
#off
setint(0x08C739B0, 0);

#cheat ped
setint(0x08C739B0, 14);
#off
setint(0x08C739B0, 0);

#cheat car
setint(0x08C739B0, 260);
#off
setint(0x08C739B0, 0);

#cheat DDM's Sentinel XS+
if(getshort(pcar + 0x56) == 274)
{
setfloat(0x936F298, 0.8);
setchar(pcar + 0x224, 255, 127, 0);
setchar(pcar + 0x228, 0, 0, 0);
setfloat(pcar+0x450,  0,  -1.2566371,  0);
setfloat(pcar+0x480,  0,  -1.2566371,  0);
setfloat(pcar+0x4b0,  0,  -1.2566371,  0);
setfloat(pcar+0x4e0,  0,  -1.2566371,  0);
if(buttons & CTRL_CIRCLE && buttons & CTRL_CROSS) {

   speed = 0.0;
   setchar(0x09569B90, 0x10);
   setchar(0x09569B94, 0, 127, 255);
   if(getfloat(pcar+0x140)>0)
   {
      speed+=getfloat(pcar+0x140);
   }
   else
   {
      speed-=getfloat(pcar+0x140);
   }

   if(getfloat(pcar+0x144)>0)
   {
      speed+=getfloat(pcar+0x144);
   }
   else
   {
      speed-=getfloat(pcar+0x144);
   }

   if(speed<175/5)
   {
      setfloat(pcar+0x140,  getfloat(pcar+0x140)-getfloat(pcar+0x4)*0.005);
      setfloat(pcar+0x144,  getfloat(pcar+0x144)+getfloat(pcar)*0.005);
   }

}
else
{
   setchar(0x09569B90, 0x4);
   setchar(0x09569B94, 63, 63, 63);
}
}

#cheat pina?
for( rot = 0; rot < 360; rot += 3.6 )
{
    moveto(getfloat(pplayer+0x30) + cos(rot) * 10, getfloat(pplayer+0x34)   + sin(rot) * 10,  

getfloat(pplayer+0x38));  object(0x1C91,  0,  0,  -rot + 90); 
}
off();

#cheat lol?
setfloat(pcar + 0x688, -1);
setfloat(pcar + 0x68C, -1);
setfloat(pcar + 0x690, -1);
setfloat(pcar + 0x694, -1);

#cheat Player wall!
if(getfloat(pplayer+0x38)<getfloat(0x96C96B0)-247.5){
setfloat(pplayer+0x38, getfloat(0x96C96B0)-247.5);
setfloat(pplayer+0x8, 0);
setfloat(pplayer+0x18, 0);
setfloat(pplayer+0x20, 0, 0, 0);
setfloat(pplayer+0x148, 0);}

#cheat Tall Ramp
//my first attempt at making a tall ramp thing. it's not too ridable but I'll release it anyways. it's at the tall control tower at the airport.
moveto(-1690.38,-931.18,-160.62);  object(0x1CA4,90,0,0);
move(4.00,0.02,0.00);  object(0x1CA4,90,0,0);
move(4.00,0.02,0.00);  object(0x1CA4,90,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,90,0,0);
move(0.02,-2.70,0.00);  object(0x1CA4,90,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,90,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,90,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,90,0,0);
move(0.02,-2.60,0.00);  object(0x1CA4,90,0,0);
move(4.00,0.02,0.00);  object(0x1CA4,90,0,0);
move(4.00,0.02,0.00);  object(0x1CA4,90,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,90,0,0);
move(0.02,-2.80,-0.30);  object(0x1CA4,80,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,80,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,80,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,80,0,0);
move(10.46,-2.44,-0.70);  object(0x1CA4,70,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,70,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,70,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,70,0,0);
move(10.52,-2.44,-1.20);  object(0x1CA4,60,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,60,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,60,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,60,0,0);
move(10.51,-2.14,-1.60);  object(0x1CA4,50,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,50,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,50,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,50,0,0);
move(10.49,-1.94,-2.00);  object(0x1CA4,40,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,40,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,40,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,40,0,0);
move(10.51,-1.54,-2.30);  object(0x1CA4,30,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,30,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,30,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,30,0,0);
move(10.52,-1.04,-2.40);  object(0x1CA4,20,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,20,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,20,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,20,0,0);
move(10.49,-0.64,-2.70);  object(0x1CA4,10,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,10,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,10,0,0);
move(-4.00,-0.02,0.00);  object(0x1CA4,10,0,0);
move(10.46,-0.14,-2.80);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,0.00);  object(0x1CA4,0,0,0);
move(-0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(4.00,0.01,0.00);  object(0x1CA4,0,0,0);
move(2.50,0.01,0.00);  object(0x1CA4,0,0,0);
move(0.00,0.00,-2.50);  object(0x1CA4,0,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,0,0,0);
move(10.50,-0.26,-2.80);  object(0x1CA4,10,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,10,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,10,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,10,0,0);
move(10.50,-0.66,-2.60);  object(0x1CA4,20,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,20,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,20,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,20,0,0);
move(10.50,-0.66,-1.20);  object(0x1CA4,30,0,0);
move(-2.40,-0.01,0.00);  object(0x1CA4,30,0,0);
move(-4.10,-0.01,0.00);  object(0x1CA4,30,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,30,0,0);
move(10.50,-0.86,-1.20);  object(0x1CA4,40,0,0);
move(-2.40,-0.01,0.00);  object(0x1CA4,40,0,0);
move(-4.10,-0.01,0.00);  object(0x1CA4,40,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,40,0,0);
move(10.50,-0.96,-0.90);  object(0x1CA4,50,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,50,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,50,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,50,0,0);
move(10.50,-1.06,-0.70);  object(0x1CA4,60,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,60,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,60,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,60,0,0);
move(10.48,-1.36,-0.50);  object(0x1CA4,75,0,0);
move(-2.40,-0.01,0.00);  object(0x1CA4,75,0,0);
move(-4.10,-0.01,0.00);  object(0x1CA4,75,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,75,0,0);
move(10.64,-39.35,0.00);  object(0x1CA4,100,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,100,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,100,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,100,0,0);
move(10.51,-2.36,0.70);  object(0x1CA4,110,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,110,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,110,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,110,0,0);
move(10.51,-1.66,0.80);  object(0x1CA4,120,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,120,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,120,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,120,0,0);
move(10.51,-1.56,1.10);  object(0x1CA4,130,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,130,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,130,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,130,0,0);
move(10.47,-1.06,1.10);  object(0x1CA4,145,0,0);
move(-2.50,-0.01,0.00);  object(0x1CA4,145,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,145,0,0);
move(-4.00,-0.01,0.00);  object(0x1CA4,145,0,0);
off();

#cheat glassser?!@...
moveto(110.21,-692.16,12.95);  object(0x029F,0,0,263);
moveto(110.21,-692.16,12.95);  object(0x029F,0,0,263);
move(-1.78,-0.21,0.00);  object(0x029F,0,0,263);
move(-1.93,-0.23,0.00);  object(0x029F,0,0,263);
move(-1.50,-0.17,0.00);  object(0x029F,0,0,263);
move(-2.03,-0.23,0.00);  object(0x029F,0,0,263);
move(8.46,0.98,0.00);  object(0x029F,0,0,263);
move(1.52,0.18,0.00);  object(0x029F,0,0,263);
move(1.44,0.17,0.00);  object(0x029F,0,0,263);
move(1.22,0.14,0.00);  object(0x029F,0,0,263);
move(0.79,0.09,0.00);  object(0x029F,0,0,263);
move(1.54,0.18,0.00);  object(0x029F,0,0,263);
move(2.17,0.25,0.00);  object(0x029F,0,0,263);
move(1.84,0.21,0.00);  object(0x029F,0,0,263);
move(1.74,0.20,0.00);  object(0x029F,0,0,263);
move(1.81,0.21,0.00);  object(0x029F,0,0,263);
move(2.09,0.24,0.00);  object(0x029F,0,0,263);
move(1.79,0.21,0.00);  object(0x029F,0,0,263);
move(1.46,0.17,0.00);  object(0x029F,0,0,263);
move(1.33,0.15,0.00);  object(0x029F,0,0,263);
move(1.56,0.18,0.00);  object(0x029F,0,0,263);
move(1.60,0.18,0.00);  object(0x029F,0,0,263);
move(1.42,0.16,0.00);  object(0x029F,0,0,263);
move(1.52,0.18,0.00);  object(0x029F,0,0,263);
move(1.79,0.21,0.00);  object(0x029F,0,0,263);
move(1.92,0.22,0.00);  object(0x029F,0,0,263);
move(2.11,0.24,0.00);  object(0x029F,0,0,263);
move(1.69,0.19,0.00);  object(0x029F,0,0,263);
move(1.46,0.17,0.00);  object(0x029F,0,0,263);
move(1.20,0.14,0.00);  object(0x029F,0,0,263);
move(1.04,0.12,0.00);  object(0x029F,0,0,263);
move(1.00,0.12,0.00);  object(0x029F,0,0,263);
move(1.20,0.14,0.00);  object(0x029F,0,0,263);
move(1.52,0.18,0.00);  object(0x029F,0,0,263);
move(1.49,0.17,0.00);  object(0x029F,0,0,263);
move(1.35,0.16,0.00);  object(0x029F,0,0,263);
move(-0.68,5.86,0.00);  object(0x029F,0,0,263);
move(-1.37,-0.16,0.00);  object(0x029F,0,0,263);
move(-1.15,-0.13,0.00);  object(0x029F,0,0,263);
move(-1.40,-0.16,0.00);  object(0x029F,0,0,263);
move(-1.37,-0.16,0.00);  object(0x029F,0,0,263);
move(-0.93,-0.11,0.00);  object(0x029F,0,0,263);
move(-1.26,-0.15,0.00);  object(0x029F,0,0,263);
move(-1.02,-0.12,0.00);  object(0x029F,0,0,263);
move(-0.94,-0.11,0.00);  object(0x029F,0,0,263);
move(-1.11,-0.13,0.00);  object(0x029F,0,0,263);
move(-1.33,-0.15,0.00);  object(0x029F,0,0,263);
move(-1.56,-0.18,0.00);  object(0x029F,0,0,263);
move(-2.08,-0.24,0.00);  object(0x029F,0,0,263);
move(-1.15,-0.13,0.00);  object(0x029F,0,0,263);
move(-1.26,-0.13,0.00);  object(0x029F,0,0,264);
move(-1.91,-0.22,0.00);  object(0x029F,0,0,264);
move(-1.56,-0.18,0.00);  object(0x029F,0,0,264);
move(-2.37,-0.27,0.00);  object(0x029F,0,0,264);
move(-1.75,-0.20,0.00);  object(0x029F,0,0,264);
move(-2.08,-0.23,0.00);  object(0x029F,0,0,264);
move(-3.06,-0.35,0.00);  object(0x029F,0,0,264);
move(-1.80,-0.20,0.00);  object(0x029F,0,0,264);
move(-1.98,-0.22,0.00);  object(0x029F,0,0,264);
move(-1.42,-0.16,0.00);  object(0x029F,0,0,264);
move(-1.79,-0.20,0.00);  object(0x029F,0,0,264);
move(-1.54,-0.17,0.00);  object(0x029F,0,0,264);
move(-1.01,-0.11,0.00);  object(0x029F,0,0,264);
move(-0.83,-0.09,0.00);  object(0x029F,0,0,264);
move(-1.27,-0.14,0.00);  object(0x029F,0,0,264);
move(-1.19,-0.13,0.00);  object(0x029F,0,0,264);
move(-1.43,-0.16,0.00);  object(0x029F,0,0,264);
move(-1.20,-0.14,0.00);  object(0x029F,0,0,264);
move(-2.40,-0.14,0.00);  object(0x029F,0,0,265);
move(-0.90,-0.08,0.00);  object(0x029F,0,0,265);
move(1.32,0.11,0.00);  object(0x029F,0,0,265);
move(-3.18,-0.27,0.00);  object(0x029F,0,0,265);
move(-2.09,-0.17,0.00);  object(0x029F,0,0,265);
move(54.55,-5.02,-0.54);  object(0x029F,0,0,262);
move(-1.11,-0.16,0.00);  object(0x029F,0,0,262);
move(-1.76,-0.25,0.00);  object(0x029F,0,0,262);
move(-1.48,-0.21,0.00);  object(0x029F,0,0,262);
move(-1.48,-0.21,0.00);  object(0x029F,0,0,262);
move(-1.51,-0.22,0.00);  object(0x029F,0,0,262);
move(-1.83,-0.26,0.00);  object(0x029F,0,0,262);
move(-0.94,-0.14,0.00);  object(0x029F,0,0,262);
move(-1.25,-0.18,0.00);  object(0x029F,0,0,262);
move(-1.59,-0.23,0.00);  object(0x029F,0,0,262);
move(-2.39,-0.34,0.00);  object(0x029F,0,0,262);
move(-1.50,-0.22,0.00);  object(0x029F,0,0,262);
move(-2.46,-0.35,0.00);  object(0x029F,0,0,262);
move(0.15,0.02,0.00);  object(0x029F,0,0,262);
move(-1.03,-0.15,0.00);  object(0x029F,0,0,262);
move(-1.78,-0.26,0.00);  object(0x029F,0,0,262);
move(-1.79,-0.26,0.00);  object(0x029F,0,0,262);
move(-2.83,-0.41,0.00);  object(0x029F,0,0,262);
move(-0.80,-0.11,0.00);  object(0x029F,0,0,262);
move(-1.21,-0.17,0.00);  object(0x029F,0,0,262);
move(-1.60,-0.23,0.00);  object(0x029F,0,0,262);
move(-0.93,-0.13,0.00);  object(0x029F,0,0,262);
move(-1.54,-0.22,0.00);  object(0x029F,0,0,262);
move(7.43,1.06,0.00);  object(0x029F,0,0,262);
move(-10.31,-1.50,-0.05);  object(0x029F,0,0,261);
move(0.24,0.04,0.00);  object(0x029F,0,0,261);
move(-0.81,-0.13,0.00);  object(0x029F,0,0,261);
move(-1.76,-0.29,0.00);  object(0x029F,0,0,261);
move(-1.34,-0.22,0.00);  object(0x029F,0,0,261);
move(-0.89,-0.14,0.00);  object(0x029F,0,0,261);
move(-1.22,-0.20,0.00);  object(0x029F,0,0,261);
move(-0.76,-0.12,0.00);  object(0x029F,0,0,261);
move(-1.83,-0.30,0.00);  object(0x029F,0,0,261);
move(-1.70,-0.28,0.00);  object(0x029F,0,0,261);
move(-1.20,-0.20,0.00);  object(0x029F,0,0,261);
move(-1.70,-0.28,0.00);  object(0x029F,0,0,261);
move(-2.10,-0.34,0.00);  object(0x029F,0,0,261);
move(-2.19,-0.36,0.00);  object(0x029F,0,0,261);
move(9.34,8.01,0.00);  object(0x029F,0,0,261);
move(16.18,7.71,0.00);  object(0x029F,0,0,266);
move(-0.89,-0.15,0.00);  object(0x029F,0,0,266);
move(-1.51,-0.25,0.00);  object(0x029F,0,0,266);
move(-0.96,-0.16,0.00);  object(0x029F,0,0,266);
move(-1.75,-0.29,0.00);  object(0x029F,0,0,266);
move(-1.38,-0.23,0.00);  object(0x029F,0,0,266);
move(-1.47,-0.24,0.00);  object(0x029F,0,0,266);
move(-2.79,-0.46,0.00);  object(0x029F,0,0,266);
move(-1.19,-0.19,0.00);  object(0x029F,0,0,266);
move(-2.50,-0.41,0.00);  object(0x029F,0,0,266);
move(-1.30,-0.21,0.00);  object(0x029F,0,0,266);
move(-0.89,-0.15,0.00);  object(0x029F,0,0,266);
move(-1.76,-0.29,0.00);  object(0x029F,0,0,266);
move(-1.76,-0.29,0.00);  object(0x029F,0,0,266);
move(-2.06,-0.34,0.00);  object(0x029F,0,0,266);
move(-1.49,-0.24,0.00);  object(0x029F,0,0,266);
move(-1.78,-0.29,0.00);  object(0x029F,0,0,266);
move(-2.56,-0.42,0.00);  object(0x029F,0,0,266);
move(18.02,2.95,0.00);  object(0x029F,0,0,266);
move(-0.59,-0.10,0.00);  object(0x029F,0,0,266);
move(-4.55,-5.61,-0.40);  object(0x029F,0,0,266);
move(42.35,-5.43,0.00);  object(0x029F,0,0,271);
move(-0.94,-0.07,0.00);  object(0x029F,0,0,271);
move(-1.84,-0.14,0.00);  object(0x029F,0,0,271);
move(-2.16,-0.17,0.00);  object(0x029F,0,0,271);
move(-0.94,-0.07,0.00);  object(0x029F,0,0,271);
move(-1.53,-0.12,0.00);  object(0x029F,0,0,271);
move(-1.63,-0.13,0.00);  object(0x029F,0,0,271);
move(-0.88,-2.17,0.00);  object(0x029F,0,0,271);
move(-1.17,-0.09,0.00);  object(0x029F,0,0,271);
move(-1.55,-0.12,0.00);  object(0x029F,0,0,271);
move(-1.44,-0.11,0.00);  object(0x029F,0,0,271);
move(-0.90,-0.07,0.00);  object(0x029F,0,0,271);
move(-2.25,-0.18,0.00);  object(0x029F,0,0,271);
move(-1.54,-0.12,0.00);  object(0x029F,0,0,271);
move(-1.96,-0.15,0.00);  object(0x029F,0,0,271);
move(-1.87,-0.15,0.00);  object(0x029F,0,0,271);
move(-2.19,-0.17,0.00);  object(0x029F,0,0,271);
move(-2.57,-0.20,0.00);  object(0x029F,0,0,271);
move(-1.50,-0.12,0.00);  object(0x029F,0,0,271);
move(-0.90,-0.07,0.00);  object(0x029F,0,0,271);
move(-3.45,-0.27,0.00);  object(0x029F,0,0,271);
move(-2.87,-0.22,0.00);  object(0x029F,0,0,271);
move(-1.70,-0.13,0.00);  object(0x029F,0,0,271);
move(-2.99,-0.23,0.00);  object(0x029F,0,0,271);
move(-3.19,-0.25,0.00);  object(0x029F,0,0,271);
move(-3.08,-0.24,0.00);  object(0x029F,0,0,271);
move(-2.06,-0.16,0.00);  object(0x029F,0,0,271);
move(-1.10,-0.09,0.00);  object(0x029F,0,0,271);
move(-2.09,-0.16,0.00);  object(0x029F,0,0,271);
move(0.32,0.03,0.00);  object(0x029F,0,0,271);
move(0.35,3.27,0.00);  object(0x029F,0,0,266);
move(1.79,0.29,0.00);  object(0x029F,0,0,266);
move(1.78,0.29,0.00);  object(0x029F,0,0,266);
move(3.94,0.64,0.00);  object(0x029F,0,0,266);
move(1.22,0.20,0.00);  object(0x029F,0,0,266);
move(2.63,0.43,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(2.94,0.48,0.00);  object(0x029F,0,0,266);
move(1.78,0.29,0.00);  object(0x029F,0,0,266);
move(1.24,0.20,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(1.50,0.25,0.00);  object(0x029F,0,0,266);
move(2.77,0.45,0.00);  object(0x029F,0,0,266);
move(1.51,0.25,0.00);  object(0x029F,0,0,266);
move(2.20,0.36,0.00);  object(0x029F,0,0,266);
move(2.53,0.41,0.00);  object(0x029F,0,0,266);
move(0.00,0.00,0.00);  object(0x029F,0,0,266);
move(3.88,0.63,0.00);  object(0x029F,0,0,266);
move(4.44,0.73,0.00);  object(0x029F,0,0,266);
move(3.85,0.63,0.00);  object(0x029F,0,0,266);
move(3.55,0.58,0.00);  object(0x029F,0,0,266);
move(3.55,0.58,0.00);  object(0x029F,0,0,266);
move(-0.97,-0.16,0.00);  object(0x029F,0,0,266);
move(-0.76,4.64,0.00);  object(0x029F,0,0,266);
move(-2.03,-0.33,0.00);  object(0x029F,0,0,266);
move(-1.64,-0.27,0.00);  object(0x029F,0,0,266);
move(-1.52,-0.25,0.00);  object(0x029F,0,0,266);
move(-1.83,-0.30,0.00);  object(0x029F,0,0,266);
move(-2.37,-0.39,0.00);  object(0x029F,0,0,266);
move(-2.69,-0.44,0.00);  object(0x029F,0,0,266);
move(-1.90,-0.31,0.00);  object(0x029F,0,0,266);
move(11.45,-0.46,0.00);  object(0x029F,0,0,266);
move(-2.13,-0.35,0.00);  object(0x029F,0,0,266);
move(-1.14,-0.19,0.00);  object(0x029F,0,0,266);
move(-2.07,-0.34,0.00);  object(0x029F,0,0,266);
move(-1.60,-0.26,0.00);  object(0x029F,0,0,266);
move(-1.55,-0.25,0.00);  object(0x029F,0,0,266);
move(-2.07,-0.34,0.00);  object(0x029F,0,0,266);
move(-2.15,-0.35,0.00);  object(0x029F,0,0,266);
move(-1.49,-0.24,0.00);  object(0x029F,0,0,266);
move(-3.14,-0.51,0.00);  object(0x029F,0,0,266);
move(-2.08,-0.34,0.00);  object(0x029F,0,0,266);
move(-2.12,-0.35,0.00);  object(0x029F,0,0,266);
move(-1.82,-0.30,0.00);  object(0x029F,0,0,266);
move(-2.16,-0.35,0.00);  object(0x029F,0,0,266);
move(-2.96,-0.48,0.00);  object(0x029F,0,0,266);
move(-2.37,-0.39,0.00);  object(0x029F,0,0,266);
move(-3.26,-0.53,0.00);  object(0x029F,0,0,266);
move(-1.92,-0.31,0.00);  object(0x029F,0,0,266);
move(-2.44,-0.40,0.00);  object(0x029F,0,0,266);
move(-1.78,-0.29,0.00);  object(0x029F,0,0,266);
move(-2.07,-0.34,0.00);  object(0x029F,0,0,266);
move(-1.50,-0.25,0.00);  object(0x029F,0,0,266);
move(-1.50,-0.25,0.00);  object(0x029F,0,0,266);
move(-1.48,-0.24,0.00);  object(0x029F,0,0,266);
move(-0.89,-0.15,0.00);  object(0x029F,0,0,266);
move(4.51,0.74,0.00);  object(0x029F,0,0,266);
move(3.08,0.50,0.00);  object(0x029F,0,0,266);
move(2.66,0.44,0.00);  object(0x029F,0,0,266);
move(1.78,0.29,0.00);  object(0x029F,0,0,266);
move(1.78,0.29,0.00);  object(0x029F,0,0,266);
move(2.37,0.39,0.00);  object(0x029F,0,0,266);
move(2.07,0.34,0.00);  object(0x029F,0,0,266);
move(2.96,0.48,0.00);  object(0x029F,0,0,266);
move(-25.56,2.21,0.00);  object(0x029F,0,0,266);
move(3.97,0.65,0.00);  object(0x029F,0,0,266);
move(3.85,0.63,0.00);  object(0x029F,0,0,266);
move(4.15,0.68,0.00);  object(0x029F,0,0,266);
move(3.26,0.53,0.00);  object(0x029F,0,0,266);
move(0.89,0.15,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(1.78,0.29,0.00);  object(0x029F,0,0,266);
move(3.26,0.53,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(2.07,0.34,0.00);  object(0x029F,0,0,266);
move(3.55,0.58,0.00);  object(0x029F,0,0,266);
move(3.85,0.63,0.00);  object(0x029F,0,0,266);
move(2.96,0.48,0.00);  object(0x029F,0,0,266);
move(2.96,0.48,0.00);  object(0x029F,0,0,266);
move(2.07,0.34,0.00);  object(0x029F,0,0,266);
move(1.12,-0.22,0.00);  object(0x029F,0,0,266);
move(2.66,0.44,0.00);  object(0x029F,0,0,266);
move(3.26,0.53,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(0.82,0.13,0.00);  object(0x029F,0,0,266);
move(0.96,0.16,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(-1.68,-0.27,0.00);  object(0x029F,0,0,266);
move(-3.37,-0.55,0.00);  object(0x029F,0,0,266);
move(-1.23,-0.20,0.00);  object(0x029F,0,0,266);
move(-2.97,-0.49,0.00);  object(0x029F,0,0,266);
move(-3.26,-0.53,0.00);  object(0x029F,0,0,266);
move(-3.01,-0.49,0.00);  object(0x029F,0,0,266);
move(-1.78,-0.21,0.00);  object(0x029F,0,0,263);
move(-1.93,-0.23,0.00);  object(0x029F,0,0,263);
move(-1.50,-0.17,0.00);  object(0x029F,0,0,263);
move(-2.03,-0.23,0.00);  object(0x029F,0,0,263);
move(8.46,0.98,0.00);  object(0x029F,0,0,263);
move(1.52,0.18,0.00);  object(0x029F,0,0,263);
move(1.44,0.17,0.00);  object(0x029F,0,0,263);
move(1.22,0.14,0.00);  object(0x029F,0,0,263);
move(0.79,0.09,0.00);  object(0x029F,0,0,263);
move(1.54,0.18,0.00);  object(0x029F,0,0,263);
move(2.17,0.25,0.00);  object(0x029F,0,0,263);
move(1.84,0.21,0.00);  object(0x029F,0,0,263);
move(1.74,0.20,0.00);  object(0x029F,0,0,263);
move(1.81,0.21,0.00);  object(0x029F,0,0,263);
move(2.09,0.24,0.00);  object(0x029F,0,0,263);
move(1.79,0.21,0.00);  object(0x029F,0,0,263);
move(1.46,0.17,0.00);  object(0x029F,0,0,263);
move(1.33,0.15,0.00);  object(0x029F,0,0,263);
move(1.56,0.18,0.00);  object(0x029F,0,0,263);
move(1.60,0.18,0.00);  object(0x029F,0,0,263);
move(1.42,0.16,0.00);  object(0x029F,0,0,263);
move(1.52,0.18,0.00);  object(0x029F,0,0,263);
move(1.79,0.21,0.00);  object(0x029F,0,0,263);
move(1.92,0.22,0.00);  object(0x029F,0,0,263);
move(2.11,0.24,0.00);  object(0x029F,0,0,263);
move(1.69,0.19,0.00);  object(0x029F,0,0,263);
move(1.46,0.17,0.00);  object(0x029F,0,0,263);
move(1.20,0.14,0.00);  object(0x029F,0,0,263);
move(1.04,0.12,0.00);  object(0x029F,0,0,263);
move(1.00,0.12,0.00);  object(0x029F,0,0,263);
move(1.20,0.14,0.00);  object(0x029F,0,0,263);
move(1.52,0.18,0.00);  object(0x029F,0,0,263);
move(1.49,0.17,0.00);  object(0x029F,0,0,263);
move(1.35,0.16,0.00);  object(0x029F,0,0,263);
move(-0.68,5.86,0.00);  object(0x029F,0,0,263);
move(-1.37,-0.16,0.00);  object(0x029F,0,0,263);
move(-1.15,-0.13,0.00);  object(0x029F,0,0,263);
move(-1.40,-0.16,0.00);  object(0x029F,0,0,263);
move(-1.37,-0.16,0.00);  object(0x029F,0,0,263);
move(-0.93,-0.11,0.00);  object(0x029F,0,0,263);
move(-1.26,-0.15,0.00);  object(0x029F,0,0,263);
move(-1.02,-0.12,0.00);  object(0x029F,0,0,263);
move(-0.94,-0.11,0.00);  object(0x029F,0,0,263);
move(-1.11,-0.13,0.00);  object(0x029F,0,0,263);
move(-1.33,-0.15,0.00);  object(0x029F,0,0,263);
move(-1.56,-0.18,0.00);  object(0x029F,0,0,263);
move(-2.08,-0.24,0.00);  object(0x029F,0,0,263);
move(-1.15,-0.13,0.00);  object(0x029F,0,0,263);
move(-1.26,-0.13,0.00);  object(0x029F,0,0,264);
move(-1.91,-0.22,0.00);  object(0x029F,0,0,264);
move(-1.56,-0.18,0.00);  object(0x029F,0,0,264);
move(-2.37,-0.27,0.00);  object(0x029F,0,0,264);
move(-1.75,-0.20,0.00);  object(0x029F,0,0,264);
move(-2.08,-0.23,0.00);  object(0x029F,0,0,264);
move(-3.06,-0.35,0.00);  object(0x029F,0,0,264);
move(-1.80,-0.20,0.00);  object(0x029F,0,0,264);
move(-1.98,-0.22,0.00);  object(0x029F,0,0,264);
move(-1.42,-0.16,0.00);  object(0x029F,0,0,264);
move(-1.79,-0.20,0.00);  object(0x029F,0,0,264);
move(-1.54,-0.17,0.00);  object(0x029F,0,0,264);
move(-1.01,-0.11,0.00);  object(0x029F,0,0,264);
move(-0.83,-0.09,0.00);  object(0x029F,0,0,264);
move(-1.27,-0.14,0.00);  object(0x029F,0,0,264);
move(-1.19,-0.13,0.00);  object(0x029F,0,0,264);
move(-1.43,-0.16,0.00);  object(0x029F,0,0,264);
move(-1.20,-0.14,0.00);  object(0x029F,0,0,264);
move(-2.40,-0.14,0.00);  object(0x029F,0,0,265);
move(-0.90,-0.08,0.00);  object(0x029F,0,0,265);
move(1.32,0.11,0.00);  object(0x029F,0,0,265);
move(-3.18,-0.27,0.00);  object(0x029F,0,0,265);
move(-2.09,-0.17,0.00);  object(0x029F,0,0,265);
move(54.55,-5.02,-0.54);  object(0x029F,0,0,262);
move(-1.11,-0.16,0.00);  object(0x029F,0,0,262);
move(-1.76,-0.25,0.00);  object(0x029F,0,0,262);
move(-1.48,-0.21,0.00);  object(0x029F,0,0,262);
move(-1.48,-0.21,0.00);  object(0x029F,0,0,262);
move(-1.51,-0.22,0.00);  object(0x029F,0,0,262);
move(-1.83,-0.26,0.00);  object(0x029F,0,0,262);
move(-0.94,-0.14,0.00);  object(0x029F,0,0,262);
move(-1.25,-0.18,0.00);  object(0x029F,0,0,262);
move(-1.59,-0.23,0.00);  object(0x029F,0,0,262);
move(-2.39,-0.34,0.00);  object(0x029F,0,0,262);
move(-1.50,-0.22,0.00);  object(0x029F,0,0,262);
move(-2.46,-0.35,0.00);  object(0x029F,0,0,262);
move(0.15,0.02,0.00);  object(0x029F,0,0,262);
move(-1.03,-0.15,0.00);  object(0x029F,0,0,262);
move(-1.78,-0.26,0.00);  object(0x029F,0,0,262);
move(-1.79,-0.26,0.00);  object(0x029F,0,0,262);
move(-2.83,-0.41,0.00);  object(0x029F,0,0,262);
move(-0.80,-0.11,0.00);  object(0x029F,0,0,262);
move(-1.21,-0.17,0.00);  object(0x029F,0,0,262);
move(-1.60,-0.23,0.00);  object(0x029F,0,0,262);
move(-0.93,-0.13,0.00);  object(0x029F,0,0,262);
move(-1.54,-0.22,0.00);  object(0x029F,0,0,262);
move(7.43,1.06,0.00);  object(0x029F,0,0,262);
move(-10.31,-1.50,-0.05);  object(0x029F,0,0,261);
move(0.24,0.04,0.00);  object(0x029F,0,0,261);
move(-0.81,-0.13,0.00);  object(0x029F,0,0,261);
move(-1.76,-0.29,0.00);  object(0x029F,0,0,261);
move(-1.34,-0.22,0.00);  object(0x029F,0,0,261);
move(-0.89,-0.14,0.00);  object(0x029F,0,0,261);
move(-1.22,-0.20,0.00);  object(0x029F,0,0,261);
move(-0.76,-0.12,0.00);  object(0x029F,0,0,261);
move(-1.83,-0.30,0.00);  object(0x029F,0,0,261);
move(-1.70,-0.28,0.00);  object(0x029F,0,0,261);
move(-1.20,-0.20,0.00);  object(0x029F,0,0,261);
move(-1.70,-0.28,0.00);  object(0x029F,0,0,261);
move(-2.10,-0.34,0.00);  object(0x029F,0,0,261);
move(-2.19,-0.36,0.00);  object(0x029F,0,0,261);
move(9.34,8.01,0.00);  object(0x029F,0,0,261);
move(16.18,7.71,0.00);  object(0x029F,0,0,266);
move(-0.89,-0.15,0.00);  object(0x029F,0,0,266);
move(-1.51,-0.25,0.00);  object(0x029F,0,0,266);
move(-0.96,-0.16,0.00);  object(0x029F,0,0,266);
move(-1.75,-0.29,0.00);  object(0x029F,0,0,266);
move(-1.38,-0.23,0.00);  object(0x029F,0,0,266);
move(-1.47,-0.24,0.00);  object(0x029F,0,0,266);
move(-2.79,-0.46,0.00);  object(0x029F,0,0,266);
move(-1.19,-0.19,0.00);  object(0x029F,0,0,266);
move(-2.50,-0.41,0.00);  object(0x029F,0,0,266);
move(-1.30,-0.21,0.00);  object(0x029F,0,0,266);
move(-0.89,-0.15,0.00);  object(0x029F,0,0,266);
move(-1.76,-0.29,0.00);  object(0x029F,0,0,266);
move(-1.76,-0.29,0.00);  object(0x029F,0,0,266);
move(-2.06,-0.34,0.00);  object(0x029F,0,0,266);
move(-1.49,-0.24,0.00);  object(0x029F,0,0,266);
move(-1.78,-0.29,0.00);  object(0x029F,0,0,266);
move(-2.56,-0.42,0.00);  object(0x029F,0,0,266);
move(18.02,2.95,0.00);  object(0x029F,0,0,266);
move(-0.59,-0.10,0.00);  object(0x029F,0,0,266);
move(-4.55,-5.61,-0.40);  object(0x029F,0,0,266);
move(42.35,-5.43,0.00);  object(0x029F,0,0,271);
move(-0.94,-0.07,0.00);  object(0x029F,0,0,271);
move(-1.84,-0.14,0.00);  object(0x029F,0,0,271);
move(-2.16,-0.17,0.00);  object(0x029F,0,0,271);
move(-0.94,-0.07,0.00);  object(0x029F,0,0,271);
move(-1.53,-0.12,0.00);  object(0x029F,0,0,271);
move(-1.63,-0.13,0.00);  object(0x029F,0,0,271);
move(-0.88,-2.17,0.00);  object(0x029F,0,0,271);
move(-1.17,-0.09,0.00);  object(0x029F,0,0,271);
move(-1.55,-0.12,0.00);  object(0x029F,0,0,271);
move(-1.44,-0.11,0.00);  object(0x029F,0,0,271);
move(-0.90,-0.07,0.00);  object(0x029F,0,0,271);
move(-2.25,-0.18,0.00);  object(0x029F,0,0,271);
move(-1.54,-0.12,0.00);  object(0x029F,0,0,271);
move(-1.96,-0.15,0.00);  object(0x029F,0,0,271);
move(-1.87,-0.15,0.00);  object(0x029F,0,0,271);
move(-2.19,-0.17,0.00);  object(0x029F,0,0,271);
move(-2.57,-0.20,0.00);  object(0x029F,0,0,271);
move(-1.50,-0.12,0.00);  object(0x029F,0,0,271);
move(-0.90,-0.07,0.00);  object(0x029F,0,0,271);
move(-3.45,-0.27,0.00);  object(0x029F,0,0,271);
move(-2.87,-0.22,0.00);  object(0x029F,0,0,271);
move(-1.70,-0.13,0.00);  object(0x029F,0,0,271);
move(-2.99,-0.23,0.00);  object(0x029F,0,0,271);
move(-3.19,-0.25,0.00);  object(0x029F,0,0,271);
move(-3.08,-0.24,0.00);  object(0x029F,0,0,271);
move(-2.06,-0.16,0.00);  object(0x029F,0,0,271);
move(-1.10,-0.09,0.00);  object(0x029F,0,0,271);
move(-2.09,-0.16,0.00);  object(0x029F,0,0,271);
move(0.32,0.03,0.00);  object(0x029F,0,0,271);
move(0.35,3.27,0.00);  object(0x029F,0,0,266);
move(1.79,0.29,0.00);  object(0x029F,0,0,266);
move(1.78,0.29,0.00);  object(0x029F,0,0,266);
move(3.94,0.64,0.00);  object(0x029F,0,0,266);
move(1.22,0.20,0.00);  object(0x029F,0,0,266);
move(2.63,0.43,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(2.94,0.48,0.00);  object(0x029F,0,0,266);
move(1.78,0.29,0.00);  object(0x029F,0,0,266);
move(1.24,0.20,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(1.50,0.25,0.00);  object(0x029F,0,0,266);
move(2.77,0.45,0.00);  object(0x029F,0,0,266);
move(1.51,0.25,0.00);  object(0x029F,0,0,266);
move(2.20,0.36,0.00);  object(0x029F,0,0,266);
move(2.53,0.41,0.00);  object(0x029F,0,0,266);
move(0.00,0.00,0.00);  object(0x029F,0,0,266);
move(3.88,0.63,0.00);  object(0x029F,0,0,266);
move(4.44,0.73,0.00);  object(0x029F,0,0,266);
move(3.85,0.63,0.00);  object(0x029F,0,0,266);
move(3.55,0.58,0.00);  object(0x029F,0,0,266);
move(3.55,0.58,0.00);  object(0x029F,0,0,266);
move(-0.97,-0.16,0.00);  object(0x029F,0,0,266);
move(-0.76,4.64,0.00);  object(0x029F,0,0,266);
move(-2.03,-0.33,0.00);  object(0x029F,0,0,266);
move(-1.64,-0.27,0.00);  object(0x029F,0,0,266);
move(-1.52,-0.25,0.00);  object(0x029F,0,0,266);
move(-1.83,-0.30,0.00);  object(0x029F,0,0,266);
move(-2.37,-0.39,0.00);  object(0x029F,0,0,266);
move(-2.69,-0.44,0.00);  object(0x029F,0,0,266);
move(-1.90,-0.31,0.00);  object(0x029F,0,0,266);
move(11.45,-0.46,0.00);  object(0x029F,0,0,266);
move(-2.13,-0.35,0.00);  object(0x029F,0,0,266);
move(-1.14,-0.19,0.00);  object(0x029F,0,0,266);
move(-2.07,-0.34,0.00);  object(0x029F,0,0,266);
move(-1.60,-0.26,0.00);  object(0x029F,0,0,266);
move(-1.55,-0.25,0.00);  object(0x029F,0,0,266);
move(-2.07,-0.34,0.00);  object(0x029F,0,0,266);
move(-2.15,-0.35,0.00);  object(0x029F,0,0,266);
move(-1.49,-0.24,0.00);  object(0x029F,0,0,266);
move(-3.14,-0.51,0.00);  object(0x029F,0,0,266);
move(-2.08,-0.34,0.00);  object(0x029F,0,0,266);
move(-2.12,-0.35,0.00);  object(0x029F,0,0,266);
move(-1.82,-0.30,0.00);  object(0x029F,0,0,266);
move(-2.16,-0.35,0.00);  object(0x029F,0,0,266);
move(-2.96,-0.48,0.00);  object(0x029F,0,0,266);
move(-2.37,-0.39,0.00);  object(0x029F,0,0,266);
move(-3.26,-0.53,0.00);  object(0x029F,0,0,266);
move(-1.92,-0.31,0.00);  object(0x029F,0,0,266);
move(-2.44,-0.40,0.00);  object(0x029F,0,0,266);
move(-1.78,-0.29,0.00);  object(0x029F,0,0,266);
move(-2.07,-0.34,0.00);  object(0x029F,0,0,266);
move(-1.50,-0.25,0.00);  object(0x029F,0,0,266);
move(-1.50,-0.25,0.00);  object(0x029F,0,0,266);
move(-1.48,-0.24,0.00);  object(0x029F,0,0,266);
move(-0.89,-0.15,0.00);  object(0x029F,0,0,266);
move(4.51,0.74,0.00);  object(0x029F,0,0,266);
move(3.08,0.50,0.00);  object(0x029F,0,0,266);
move(2.66,0.44,0.00);  object(0x029F,0,0,266);
move(1.78,0.29,0.00);  object(0x029F,0,0,266);
move(1.78,0.29,0.00);  object(0x029F,0,0,266);
move(2.37,0.39,0.00);  object(0x029F,0,0,266);
move(2.07,0.34,0.00);  object(0x029F,0,0,266);
move(2.96,0.48,0.00);  object(0x029F,0,0,266);
move(-25.56,2.21,0.00);  object(0x029F,0,0,266);
move(3.97,0.65,0.00);  object(0x029F,0,0,266);
move(3.85,0.63,0.00);  object(0x029F,0,0,266);
move(4.15,0.68,0.00);  object(0x029F,0,0,266);
move(3.26,0.53,0.00);  object(0x029F,0,0,266);
move(0.89,0.15,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(1.78,0.29,0.00);  object(0x029F,0,0,266);
move(3.26,0.53,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(2.07,0.34,0.00);  object(0x029F,0,0,266);
move(3.55,0.58,0.00);  object(0x029F,0,0,266);
move(3.85,0.63,0.00);  object(0x029F,0,0,266);
move(2.96,0.48,0.00);  object(0x029F,0,0,266);
move(2.96,0.48,0.00);  object(0x029F,0,0,266);
move(2.07,0.34,0.00);  object(0x029F,0,0,266);
move(1.12,-0.22,0.00);  object(0x029F,0,0,266);
move(2.66,0.44,0.00);  object(0x029F,0,0,266);
move(3.26,0.53,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(0.82,0.13,0.00);  object(0x029F,0,0,266);
move(0.96,0.16,0.00);  object(0x029F,0,0,266);
move(1.48,0.24,0.00);  object(0x029F,0,0,266);
move(-1.68,-0.27,0.00);  object(0x029F,0,0,266);
move(-3.37,-0.55,0.00);  object(0x029F,0,0,266);
move(-1.23,-0.20,0.00);  object(0x029F,0,0,266);
move(-2.97,-0.49,0.00);  object(0x029F,0,0,266);
move(-3.26,-0.53,0.00);  object(0x029F,0,0,266);
move(-3.01,-0.49,0.00);  object(0x029F,0,0,266);
teleport(110.21,-692.16,30.95);

#cheat GTA V Text Mod
setshort(0x08e90bd8, 1, 'G', 'T', 'A', ' ', 'V', 0); 

#cheat pimped mesa grande+
setint(0x08C739B0, 259);
setchar(0x08C739d4, 0, 0, 0, 0);
setfloat(0x9633200+0x74, 2.0);
setfloat(0x9633200+0x78, 5);
setfloat(0x9633200+0x7c, 0);
setfloat(0x9633200+0x80, -1.18);
setfloat(0x9633200+0x84, 0.5);
setfloat(0x936cb38, 2.20, 2.20);
setfloat(0x9633200+0xc4, 0.71);
setfloat(0x9633200+0x70, 0.40);
setfloat(0x9633200+0x6c, 0.95);
setfloat(0x9633200+0xa0, 0);
setfloat(0x9633200+0xa4, 0);
setfloat(0x9633200+0x68, 38);
setchar(0x9633200+0x5c, '78', '892', 61);
off();

#cheat All Cars Start Burning, Then Blow Up.
static counter;
if(counter++ % 30 == 0) {
     for(p=0x098edcc0; p <= 0x099019a0; p+=0x820) {
         if(p != pcar) setfloat(p + 0x27c, -999);
     }
}
setchar(0x08bb32c8,  1);
#off
setchar(0x08bb32c8,  0); 

#cheat Terrari at 101 Bayshore Avenue
 //Created By Sunshine Customs
 //Sunshine Customs Created By emcp
 //Addresses Found By Vette
 //Basics
 setint(0x08C739B0, 270); //Car Id
 setchar(0x08C739B0+0x24, 255,0,0, 255); //Color 1
 setchar(0x08C739B0+0x28, 255,100,0, 255); //Color2
 setshort(0x98a339c, 1, 'T','e','r','r','a','r','i', 0); 
 //Wheels
 setfloat(0x936E818, 1, 1); //wheel size
 setfloat(0x9634180+0x6c, 0.85); //Traction Multiplier
 setfloat(0x9634180+0xc4, 0.66); //Traction Loss
 setfloat(0x9634180+0x70, 0.3); //Traction Bias
 //Engine
 setchar(0x9634180+0x5c, '9', '12', 8); // Drive type / Engine type / Gears
 //Suspension
 setfloat(0x9634180+0x7c, 0.37); //Suspension Upper Limit
 setfloat(0x9634180+0x80, -0.17); //Suspension Lower Limit
 setfloat(0x9634180+0x78, 0.1); //Suspension Damping Level
 setfloat(0x9634180+0x74, 1.2); //Suspension Force Level
 setfloat(0x9634180+0x84, 0.6); //Suspension Bias
 setfloat(0x9634180+0x88, 0); //Anti-Dive Multiplier
 //Handling
 setfloat(0x9634180+0x68, 32); //Steering Lock
 setfloat(0x9634180+0xbc, 1650); //Vehilce Mass
 setfloat(0x9634180+0xc0, 1950); //Turn Mass
 setfloat(0x9634180+0xa0, 0); //Centre of Mass - X
 setfloat(0x9634180+0xa4, 0); //Centre of Mass - Y
 setfloat(0x9634180+0xa8, 0); //Centre of Mass - Z
 //Effects
 //Exhaust

#cheat BURNATOUT!!
setchar(0x08be3a20, 1);
setfloat(0x08be3a30, getfloat(pobj+0x30), getfloat(pobj+0x34), getfloat(pobj+0x38));
setfloat(pplayer+0x4e4, getfloat(pplayer+0x4e4)-100);

#cheat DEATH WATER!
if(getchar(pplayer + 0x137) == 0x08)
static timer;
if(timer% 100==0)
setfloat(pplayer+0x4e4, getfloat(pplayer+0x4e4)-5);
timer++;
if(timer==100)
timer=0;

#cheat Come back!
if(getfloat(pplayer+0x38)<getfloat(0x96C96B0)+100){
setshort(0x08BA09CC, 1, 'C', 'o', 'm', 'e', ' ', 'b', 'a', 'c', 'k', '!', 0);
static timer;
if(timer% 80==0)
setfloat(pplayer+0x4e4, getfloat(pplayer+0x4e4)-5);
timer++;
if(timer==80)
timer=0;}
health = getfloat(pplayer+0x4e4);
if(health == 0){
setchar(pplayer+0x8B4, 0x3A);}

#cheat BIGSPIZ
setfloat(0x935E198, 10);

#cheat Racing Cheetah+ O for boost
//By: Dudek13l or Dudek12l
//For cars
setint(0x8C73B30, 172); //Car Id
setchar(0x8C73B30+0x24, 150, 0, 150, 255); //Color 1
setchar(0x8C73B30+0x28, 0, 0, 0, 255); //Color 2
setfloat(0x935E6D8, 1.36, 1.36); //wheel size
setfloat(0x962ea40+0x6c, 0.85); //Traction multiplier
setfloat(0x962ea40+0xc4, 0.75); //Traction loss
setfloat(0x962ea40+0x70, 0.5); //Traction bias
setchar(0x962ea40+0x5c, '5', '50', 9); // Drive type / Engine type / Gears
setfloat(0x962ea40+0x7c, 0.35); //Suspension Upper limit
setfloat(0x962ea40+0x80, -3); //Suspension lower limit
setfloat(0x962ea40+0x78, 3); //Suspension Damping level
setfloat(0x962ea40+0x74, 2); //Suspension force level
setfloat(0x962ea40+0x84, 0.6); //Suspension Bias
setfloat(0x962ea40+0x88, 0.6); //Anti-dive Multiplier
setfloat(0x962ea40+0x68, 32); //Steering Lock
setfloat(0x962ea40+0xbc, 4000); //Vehilce Mass
setfloat(0x962ea40+0xc0, 4000); //Turn Mass
setfloat(0x962ea40+0xa0, 0); //Centre of Mass - X
setfloat(0x962ea40+0xa4, 0); //Centre of Mass - Y
setfloat(0x962ea40+0xa8, 5); //Centre of Mass - Z
setchar(0x09569B94, 255, 80, 0); // Exhuast
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  255, 0, 0);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
// Nos to vcs 2
static On;
static going;
if(buttons & CTRL_CIRCLE &&!On) {
  On = 1;
}
if(On) {
static timepassed;
static init;
if(!init)
{
  lasttime = getchar( 0x08bb3b41 );
  init = 1;
}
if( lasttime != getchar( 0x08bb3b41 ) )
{
  timepassed++;
  lasttime = getchar( 0x08bb3b41 );
}
if( timepassed < 50 )
{
   going = 1;
}
else {
 On = 0;
 timepassed = 0;
 going = 0;
}
}
if(going) {
  setchar(0x09569B90,   0x10);
  setchar(0x09569B94,   255,   80,   0);
  speed = 7;                                                                                  
  thrust = speed * 0.00355;      
  if(buttons & CTRL_CROSS) {                            
     setfloat(pcar + 0x0140,   getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);          
     setfloat(pcar + 0x0144,   getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust);
  }
}
else
{
  setchar(0x09569B90,   0x4);
  setchar(0x09569B94,  255,   80,   0);
} 

#cheat pig
//By: Dudek13l or Dudek12l
setint(0x8C73B30, 181); //Car Id
setchar(0x8C73B30+0x24, 80, 0, 80, 255); //Color 1
setchar(0x8C73B30+0x28, 80, 0, 80, 255); //Color 2
setfloat(0x935FE78, 3, 3); //wheel size
setfloat(0x962ef80+0x6c, 0.9); //Traction multiplier
setfloat(0x962ef80+0xc4, 0.8); //Traction loss
setfloat(0x962ef80+0x70, 0.49); //Traction bias
setchar(0x962ef80+0x5c, '700000', '1200000000', 128); // Drive type / Engine type / Gears
setfloat(0x962ef80+0x7c, 0.49); //Suspension Upper limit
setfloat(0x962ef80+0x80, -0.42); //Suspension lower limit
setfloat(0x962ef80+0x78, 7); //Suspension Damping level
setfloat(0x962ef80+0x74, 9); //Suspension force level
setfloat(0x962ef80+0x84, 0.6); //Suspension Bias
setfloat(0x962ef80+0x88, 0.8); //Anti-dive Multiplier
setfloat(0x962ef80+0x68, 30); //Steering Lock
setfloat(0x962ef80+0xbc, 100000); //Vehilce Mass
setfloat(0x962ef80+0xc0, 100000); //Turn Mass
setfloat(0x962ef80+0xa0, 0); //Centre of Mass - X
setfloat(0x962ef80+0xa4, 0); //Centre of Mass - Y
setfloat(0x962ef80+0xa8, -2); //Centre of Mass - Z
setchar(0x09569B94, 255, 80, 0); // Exhuast
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  0, 80, 80);}
// Nos to vcs 2
static On;
static going;
if(buttons & CTRL_CIRCLE &&!On) {
  On = 1;
}
if(On) {
static timepassed;
static init;
if(!init)
{
  lasttime = getchar( 0x08bb3b41 );
  init = 1;
}
if( lasttime != getchar( 0x08bb3b41 ) )
{
  timepassed++;
  lasttime = getchar( 0x08bb3b41 );
}
if( timepassed < 10000 )
{
   going = 1;
}
else {
 On = 0;
 timepassed = 0;
 going = 0;
}
}
if(going) {
  setchar(0x09569B90,   0x10);
  setchar(0x09569B94,   255,   80,   0);
  speed = 1000;                                                                                  
  thrust = speed * 0.01;      
  if(buttons & CTRL_CROSS) {                            
     setfloat(pcar + 0x0140,   getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);          
     setfloat(pcar + 0x0144,   getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust);
  }
}
else
{
  setchar(0x09569B90,   0x4);
  setchar(0x09569B94,  255,   80,   0);
} 

#cheat awesome Bf injection+
//By: Dudek13l or Dudek12l
//For cars
setint(0x8C73B30, 255); //Car Id
setchar(0x8C73B30+0x24, 255, 0, 0, 255); //Color 1
setchar(0x8C73B30+0x28, 0, 0, 0, 255); //Color 2
setfloat(0x936C0B8, 2.6, 2.6); //wheel size
setfloat(0x96333c0+0x6c, 0.85); //Traction multiplier
setfloat(0x96333c0+0xc4, 0.75); //Traction loss
setfloat(0x96333c0+0x70, 0.5); //Traction bias
setchar(0x96333c0+0x5c, 'R', 'P', 6); // Drive type / Engine type / Gears
setfloat(0x96333c0+0x7c, 0.47); //Suspension Upper limit
setfloat(0x96333c0+0x80, -1); //Suspension lower limit
setfloat(0x96333c0+0x78, 0.4); //Suspension Damping level
setfloat(0x96333c0+0x74, 4); //Suspension force level
setfloat(0x96333c0+0x84, 0.5); //Suspension Bias
setfloat(0x96333c0+0x88, 0.3); //Anti-dive Multiplier
setfloat(0x96333c0+0x68, 30); //Steering Lock
setfloat(0x96333c0+0xbc, 1500); //Vehilce Mass
setfloat(0x96333c0+0xc0, 1500); //Turn Mass
setfloat(0x96333c0+0xa0, 0); //Centre of Mass - X
setfloat(0x96333c0+0xa4, 0); //Centre of Mass - Y
setfloat(0x96333c0+0xa8, 0); //Centre of Mass - Z
setchar(0x09569B94, 255, 80, 0); // Exhuast
setchar(0x09569B90, 0x20)
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  255, 0, 0);}
static rotation; 
if (rotation == 0)
{
rotation = 1500;
}
spin = tan(rotation);
setfloat(pcar + 0x644,  spin,  spin,  spin,  spin);
rotation = rotation - 1;
if (rotation == 1)
{rotation = 1500;}

#cheat Nothing Slot
setchar(pplayer + 0x5B0, 0x0F);
setint(pplayer + 0x5B0 + 0x0F, 1000);

#cheat monsta+
//By: Dudek13l or Dudek12l
//For cars
setint(0x8C73B30, 276); //Car Id
setchar(0x8C73B30+0x24, 0, 0, 255, 255); //Color 1
setchar(0x8C73B30+0x28, 0, 0, 0, 255); //Color 2
setshort(0x98a33c8, 1, 'M','o','n','s','t','a','+', 0);
setfloat(0x936F7D8, 2.1, 2.2); //wheel size
setfloat(0x9634800+0x6c, 0.85); //Traction multiplier
setfloat(0x9634800+0xc4, 0.75); //Traction loss
setfloat(0x9634800+0x70, 0.5); //Traction bias
setchar(0x9634800+0x5c, '4', '14', 8); // Drive type / Engine type / Gears
setfloat(0x9634800+0x7c, 0.5); //Suspension Upper limit
setfloat(0x9634800+0x80, -1.3); //Suspension lower limit
setfloat(0x9634800+0x78, 0.4); //Suspension Damping level
setfloat(0x9634800+0x74, 4); //Suspension force level
setfloat(0x9634800+0x84, 0.6); //Suspension Bias
setfloat(0x9634800+0x88, 0.5); //Anti-dive Multiplier
setfloat(0x9634800+0x68, 33); //Steering Lock
setfloat(0x9634800+0xbc, 5600); //Vehilce Mass
setfloat(0x9634800+0xc0, 5600); //Turn Mass
setfloat(0x9634800+0xa0, 0); //Centre of Mass - X
setfloat(0x9634800+0xa4, 0); //Centre of Mass - Y
setfloat(0x9634800+0xa8, 2.0); //Centre of Mass - Z
setchar(0x09569B94, 255, 80, 0); // Exhuast
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  255, 0, 0);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
// Nos to vcs 2
static On;
static going;
if(buttons & CTRL_CIRCLE &&!On) {
  On = 1;
}
if(On) {
static timepassed;
static init;
if(!init)
{
  lasttime = getchar( 0x08bb3b41 );
  init = 1;
}
if( lasttime != getchar( 0x08bb3b41 ) )
{
  timepassed++;
  lasttime = getchar( 0x08bb3b41 );
}
if( timepassed < 40 )
{
   going = 1;
}
else {
 On = 0;
 timepassed = 0;
 going = 0;
}
}
if(going) {
  setchar(0x09569B90,   0x10);
  setchar(0x09569B94,   255,   80,   0);
  speed = 1.5;                                                                                  
  thrust = speed * 0.00347;      
  if(buttons & CTRL_CROSS) {                            
     setfloat(pcar + 0x0140,   getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);          
     setfloat(pcar + 0x0144,   getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust);
  }
}
else
{
  setchar(0x09569B90,   0x4);
  setchar(0x09569B94,  255,   80,   0);
} 


#cheat TEST2
//By: Dudek13l or Dudek12l
//For cars
setint(0x8C73B30, 276); //Car Id
setchar(0x8C73B30+0x24, 255, 0, 255, 255); //Color 1
setchar(0x8C73B30+0x28, 0, 0, 0, 255); //Color 2
setshort(0x98a33c8, 1, 'T','E','S','T','2', 0);
setfloat(0x936F7D8, 2.8, 2.8); //wheel size
setfloat(0x9634800+0x6c, 0.85); //Traction multiplier
setfloat(0x9634800+0xc4, 0.75); //Traction loss
setfloat(0x9634800+0x70, 0.5); //Traction bias
setchar(0x9634800+0x5c, '10', '100', 10); // Drive type / Engine type / Gears
setfloat(0x9634800+0x7c, 0.47); //Suspension Upper limit
setfloat(0x9634800+0x80, -2.75); //Suspension lower limit
setfloat(0x9634800+0x78, 0.4); //Suspension Damping level
setfloat(0x9634800+0x74, 4); //Suspension force level
setfloat(0x9634800+0x84, 0.6); //Suspension Bias
setfloat(0x9634800+0x88, 0.45); //Anti-dive Multiplier
setfloat(0x9634800+0x68, 34); //Steering Lock
setfloat(0x9634800+0xbc, 20000); //Vehilce Mass
setfloat(0x9634800+0xc0, 20000); //Turn Mass
setfloat(0x9634800+0xa0, 0); //Centre of Mass - X
setfloat(0x9634800+0xa4, 0); //Centre of Mass - Y
setfloat(0x9634800+0xa8, 1.75); //Centre of Mass - Z
setchar(0x09569B94, 255, 80, 0); // Exhuast
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  255, 0, 0);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
// Nos to vcs 2
static On;
static going;
if(buttons & CTRL_CIRCLE &&!On) {
  On = 1;
}
if(On) {
static timepassed;
static init;
if(!init)
{
  lasttime = getchar( 0x08bb3b41 );
  init = 1;
}
if( lasttime != getchar( 0x08bb3b41 ) )
{
  timepassed++;
  lasttime = getchar( 0x08bb3b41 );
}
if( timepassed < 65 )
{
   going = 1;
}
else {
 On = 0;
 timepassed = 0;
 going = 0;
}
}
if(going) {
  setchar(0x09569B90,   0x20);
  setchar(0x09569B94,   255,   80,   0);
  speed = 6.0;                                                                                  
  thrust = speed * 0.0035;      
  if(buttons & CTRL_CROSS) {                            
     setfloat(pcar + 0x0140,   getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);          
     setfloat(pcar + 0x0144,   getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust);
  }
}
else
{
  setchar(0x09569B90,   0x10);
  setchar(0x09569B94,  255,   80,   0);
} 

#cheat Pimp+
//By: Dudek13l or Dudek12l
//For cars
setint(0x8C73B30, 186); //Car Id
setchar(0x8C73B30+0x24, 255, 0, 255, 255); //Color 1
setchar(0x8C73B30+0x28, 0, 0, 0, 255); //Color 2
setshort(0x98a2edc, 1, 'P','i','m','p','+', 0);
setfloat(0x9360B98, 1.64, 1.64); //wheel size
setfloat(0x962f4c0+0x6c, 0.7); //Traction multiplier
setfloat(0x962f4c0+0xc4, 0.6); //Traction loss
setfloat(0x962f4c0+0x70, 0.9); //Traction bias
setchar(0x962f4c0+0x5c, '15', '30', 21); // Drive type / Engine type / Gears
setfloat(0x962f4c0+0x7c, 0.5); //Suspension Upper limit
setfloat(0x962f4c0+0x80, -0.33); //Suspension lower limit
setfloat(0x962f4c0+0x78, 6); //Suspension Damping level
setfloat(0x962f4c0+0x74, 4.5); //Suspension force level
setfloat(0x962f4c0+0x84, 0.7); //Suspension Bias
setfloat(0x962f4c0+0x88, 0.35); //Anti-dive Multiplier
setfloat(0x962f4c0+0x68, 31.9); //Steering Lock
setfloat(0x962f4c0+0xbc, 6000); //Vehilce Mass
setfloat(0x962f4c0+0xc0, 6666); //Turn Mass
setfloat(0x962f4c0+0xa0, 0); //Centre of Mass - X
setfloat(0x962f4c0+0xa4, -0.5); //Centre of Mass - Y
setfloat(0x962f4c0+0xa8, -1.2); //Centre of Mass - Z
setchar(0x09569B94, 255, 80, 0); // Exhuast
for(neon=0;neon<16;neon++)
{setchar(0x0972EFF0+4*neon,  255, 0, 0);}
//Fire Burn Out Smoke
setchar(0x9569c90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x80,  0x3f,  0x00,  0x00,  0x00,  0x00,  0xff,  0x20,  0x00);
// Nos to vcs 2
static On;
static going;
if(buttons & CTRL_CIRCLE &&!On) {
  On = 1;
}
if(On) {
static timepassed;
static init;
if(!init)
{
  lasttime = getchar( 0x08bb3b41 );
  init = 1;
}
if( lasttime != getchar( 0x08bb3b41 ) )
{
  timepassed++;
  lasttime = getchar( 0x08bb3b41 );
}
if( timepassed < 90 )
{
   going = 1;
}
else {
 On = 0;
 timepassed = 0;
 going = 0;
}
}
if(going) {
  setchar(0x09569B90,   0x10);
  setchar(0x09569B94,   255,   80,   0);
  speed = 5;                                                                                  
  thrust = speed * 0.00348;      
  if(buttons & CTRL_CROSS) {                            
     setfloat(pcar + 0x0140,   getfloat(pcar + 0x0140) + getfloat(pcar + 0x0010) * thrust);          
     setfloat(pcar + 0x0144,   getfloat(pcar + 0x0144) + getfloat(pcar + 0x0014) * thrust);
  }
}
else
{
  setchar(0x09569B90,   0x4);
  setchar(0x09569B94,  255,   80,   0);
} 