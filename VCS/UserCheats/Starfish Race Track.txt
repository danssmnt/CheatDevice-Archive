#cheat race track part 1
setshort(0x98a2ae6, 'V', 'e', 't', 't', 'e', ' ', 'S', 'p', 'e', 'e', 'd', 'w', 'a', 'y', ' ');
moveto(-649.03,-470.85,10.55);  object(0x1CB6,180,0,270);
move(0.01,-1.60,0.00);  object(0x1CB6,180,0,270);
move(0.01,-1.60,0.00);  object(0x1CB6,180,0,270);
move(0.01,-1.70,0.00);  object(0x1CB6,180,0,270);
move(-0.07,-0.18,0.00);  object(0x1CB6,180,0,270);
move(0.07,-1.59,0.00);  object(0x1CB6,180,0,266);
move(0.18,-1.59,0.00);  object(0x1CB6,180,0,262);
move(0.29,-1.56,0.00);  object(0x1CB6,180,0,258);
move(0.38,-1.50,0.00);  object(0x1CB6,180,0,254);
move(0.50,-1.51,0.00);  object(0x1CB6,180,0,250);
move(0.63,-1.52,0.00);  object(0x1CB6,180,0,246);
move(0.72,-1.44,0.00);  object(0x1CB6,180,0,242);
move(0.79,-1.34,0.00);  object(0x1CB6,180,0,238);
move(0.06,-0.09,0.00);  object(0x1CB6,180,0,237);
move(0.86,-1.25,0.00);  object(0x1CB6,180,0,233);
move(1.00,-1.26,0.00);  object(0x1CB6,180,0,229);
move(1.10,-1.20,0.00);  object(0x1CB6,180,0,225);
move(1.10,-1.04,0.00);  object(0x1CB6,180,0,222);
move(1.26,-1.04,0.00);  object(0x1CB6,180,0,217);
move(1.34,-0.95,0.00);  object(0x1CB6,180,0,213);
move(1.43,-0.86,0.00);  object(0x1CB6,180,0,209);
move(1.36,-0.70,0.00);  object(0x1CB6,180,0,205);
move(1.47,-0.63,0.00);  object(0x1CB6,180,0,201);
move(1.47,-0.52,0.00);  object(0x1CB6,180,0,197);
move(1.48,-0.41,0.00);  object(0x1CB6,180,0,194);
move(1.49,-0.30,0.00);  object(0x1CB6,180,0,190);
move(1.67,-0.22,0.00);  object(0x1CB6,180,0,185);
move(1.57,-0.10,0.00);  object(0x1CB6,180,0,182);
move(1.65,-0.02,0.00);  object(0x1CB6,180,0,180);
move(1.60,-0.01,0.00);  object(0x1CB6,180,0,180);
moveto(-462.59,-474.94,10.77);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.60,0.02,0.00);  object(0x1CB6,180,0,90);
move(1.28,110.73,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(-1.60,-0.02,0.00);  object(0x1CB6,180,0,90);
move(192.39,-126.41,0.00);  object(0x1CB6,180,0,180);
move(1.54,0.05,0.00);  object(0x1CB6,180,0,177);
move(1.67,0.15,0.00);  object(0x1CB6,180,0,173);
move(1.51,0.23,0.00);  object(0x1CB6,180,0,170);
move(1.43,0.30,0.00);  object(0x1CB6,180,0,167);
move(1.56,0.42,0.00);  object(0x1CB6,180,0,163);
move(1.60,0.54,0.00);  object(0x1CB6,180,0,159);
move(1.50,0.61,0.00);  object(0x1CB6,180,0,156);
move(1.56,0.75,0.00);  object(0x1CB6,180,0,152);
move(1.34,0.75,0.00);  object(0x1CB6,180,0,149);
move(1.27,0.81,0.00);  object(0x1CB6,180,0,146);
move(1.32,0.96,0.00);  object(0x1CB6,180,0,142);
move(1.32,1.09,0.00);  object(0x1CB6,180,0,139);
move(1.20,1.12,0.00);  object(0x1CB6,180,0,135);
move(1.05,1.11,0.00);  object(0x1CB6,180,0,132);
move(0.08,0.09,0.00);  object(0x1CB6,180,0,132);
move(0.99,1.19,0.00);  object(0x1CB6,180,0,128);
move(0.97,1.32,0.00);  object(0x1CB6,180,0,125);
move(0.93,1.67,0.00);  object(0x1CB6,180,0,121);
move(0.71,1.27,0.00);  object(0x1CB6,180,0,117);
move(0.61,1.26,0.00);  object(0x1CB6,180,0,114);
move(0.66,1.60,0.00);  object(0x1CB6,180,0,111);
move(0.53,1.58,0.00);  object(0x1CB6,180,0,107);
move(0.36,1.28,0.00);  object(0x1CB6,180,0,104);
move(0.31,1.38,0.00);  object(0x1CB6,180,0,101);
move(0.27,1.60,0.00);  object(0x1CB6,180,0,98);
move(0.17,1.59,0.00);  object(0x1CB6,180,0,94);
move(0.08,1.69,0.00);  object(0x1CB6,180,0,91);
move(-0.01,1.56,0.00);  object(0x1CB6,180,0,90);
move(-0.02,1.60,0.00);  object(0x1CB6,180,0,90);
move(-0.02,1.70,0.00);  object(0x1CB6,180,0,90);
move(-28.79,-31.33,0.00);  object(0x1CB6,180,0,180);
moveto(-268.72,-490.68,10.77);  object(0x1CB6,180,0,180);
move(-0.10,-0.00,0.00);  object(0x1CB6,180,0,180);
move(-1.50,-0.01,0.00);  object(0x1CB6,180,0,180);
move(-1.60,-0.01,0.00);  object(0x1CB6,180,0,180);
move(-1.70,-0.01,0.00);  object(0x1CB6,180,0,180);
move(-1.50,-0.01,0.00);  object(0x1CB6,180,0,180);
move(-1.70,-0.01,0.00);  object(0x1CB6,180,0,180);
move(-1.30,-0.01,0.00);  object(0x1CB6,180,0,180);
move(-1.70,-0.01,0.00);  object(0x1CB6,180,0,180);
moveto(-427.52,-337.51,10.87);  object(0x1CB6,180,0,0);
move(1.60,0.01,0.00);  object(0x1CB6,180,0,0);
move(1.70,0.01,0.00);  object(0x1CB6,180,0,0);
move(1.60,0.01,0.00);  object(0x1CB6,180,0,0);
move(95.80,-2.71,0.00);  object(0x1CB6,180,0,0);
move(-0.00,-1.47,0.00);  object(0x1CB6,180,0,0);
move(-0.00,-1.60,0.00);  object(0x1CB6,180,0,0);
move(-0.00,-1.60,0.00);  object(0x1CB6,180,0,0);
move(1.40,-0.74,0.00);  object(0x1CB6,180,0,18);
move(1.74,-0.56,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.60,-0.59,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.41,-0.52,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.50,-0.55,0.00);  object(0x1CB6,180,0,340);
move(1.38,-0.51,0.00);  object(0x1CB6,180,0,340);
move(12.70,-10.48,0.00);  object(0x1CB6,180,0,16);
move(0.90,-1.32,0.00);  object(0x1CB6,180,0,16);
move(0.90,-1.32,0.00);  object(0x1CB6,180,0,16);
move(0.90,-1.32,0.00);  object(0x1CB6,180,0,16);
move(0.90,-1.32,0.00);  object(0x1CB6,180,0,16);
move(0.90,-1.32,0.00);  object(0x1CB6,180,0,16);
move(0.90,-1.32,0.00);  object(0x1CB6,180,0,16);
move(0.90,-1.32,0.00);  object(0x1CB6,180,0,16);
move(18.73,-37.11,0.00);  object(0x1CB6,180,0,41);
move(0.24,-1.58,0.00);  object(0x1CB6,180,0,41);
move(0.24,-1.58,0.00);  object(0x1CB6,180,0,41);
move(1.26,-36.57,0.00);  object(0x1CB6,180,0,230);
move(1.60,-0.01,0.00);  object(0x1CB6,180,0,230);
move(-145.38,-8.99,0.00);  object(0x1CB6,180,0,318);
move(1.60,0.06,0.00);  object(0x1CB6,180,0,318);
move(1.60,0.06,0.00);  object(0x1CB6,180,0,318);
move(1.60,0.06,0.00);  object(0x1CB6,180,0,318);
move(1.60,0.06,0.00);  object(0x1CB6,180,0,318);
move(1.60,0.06,0.00);  object(0x1CB6,180,0,318);
move(1.60,0.06,0.00);  object(0x1CB6,180,0,318);
move(1.60,0.06,0.00);  object(0x1CB6,180,0,318);
move(1.50,0.06,0.00);  object(0x1CB6,180,0,318);
move(1.60,0.06,0.00);  object(0x1CB6,180,0,318);
move(1.60,0.06,0.00);  object(0x1CB6,180,0,318);
move(1.60,0.06,0.00);  object(0x1CB6,180,0,318);
move(1.60,0.06,0.00);  object(0x1CB6,180,0,318);
move(1.60,0.06,0.00);  object(0x1CB6,180,0,318);
move(-142.98,-3.10,0.00);  object(0x1CB6,180,0,321);
move(1.60,-0.02,0.00);  object(0x1CB6,180,0,321);
move(1.60,-0.02,0.00);  object(0x1CB6,180,0,321);
move(1.60,-0.02,0.00);  object(0x1CB6,180,0,321);
move(1.60,-0.02,0.00);  object(0x1CB6,180,0,321);
move(1.60,-0.02,0.00);  object(0x1CB6,180,0,321);
move(1.60,-0.02,0.00);  object(0x1CB6,180,0,321);
move(1.60,-0.02,0.00);  object(0x1CB6,180,0,321);
move(-83.85,-0.99,0.00);  object(0x1CB6,180,0,321);
move(1.60,-0.04,0.00);  object(0x1CB6,180,0,321);
move(1.60,-0.04,0.00);  object(0x1CB6,180,0,321);
move(-71.31,69.43,0.00);  object(0x1CB6,180,0,80);
move(-0.80,-1.38,0.00);  object(0x1CB6,180,0,80);
move(-0.80,-1.38,0.00);  object(0x1CB6,180,0,80);
move(-0.80,-1.38,0.00);  object(0x1CB6,180,0,80);
move(59.39,51.73,0.00);  object(0x1CB6,180,0,111);
move(-1.40,-0.77,0.00);  object(0x1CB6,180,0,111);
move(-1.40,-0.77,0.00);  object(0x1CB6,180,0,111);
move(-1.40,-0.77,0.00);  object(0x1CB6,180,0,111);
move(-1.40,-0.77,0.00);  object(0x1CB6,180,0,111);
move(-1.40,-0.77,0.00);  object(0x1CB6,180,0,111);
move(-1.40,-0.77,0.00);  object(0x1CB6,180,0,111);
move(-1.40,-0.77,0.00);  object(0x1CB6,180,0,111);
move(-1.40,-0.77,0.00);  object(0x1CB6,180,0,111);
move(84.27,19.79,0.00);  object(0x1CB6,180,0,136);
move(-1.60,-0.11,0.00);  object(0x1CB6,180,0,136);
move(-1.60,-0.11,0.00);  object(0x1CB6,180,0,136);
move(-1.60,-0.11,0.00);  object(0x1CB6,180,0,136);
move(-1.60,-0.11,0.00);  object(0x1CB6,180,0,136);
move(-1.60,-0.11,0.00);  object(0x1CB6,180,0,136);
move(-1.60,-0.11,0.00);  object(0x1CB6,180,0,136);
move(-1.60,-0.11,0.00);  object(0x1CB6,180,0,136);
move(-1.60,-0.11,0.00);  object(0x1CB6,180,0,136);
move(-1.60,-0.11,0.00);  object(0x1CB6,180,0,136);
move(90.86,4.34,0.00);  object(0x1CB6,180,0,138);
move(-1.60,-0.06,0.00);  object(0x1CB6,180,0,138);
move(-1.60,-0.06,0.00);  object(0x1CB6,180,0,138);
move(-1.60,-0.06,0.00);  object(0x1CB6,180,0,138);
move(-1.60,-0.06,0.00);  object(0x1CB6,180,0,138);
moveto(-460.74,-365.33,10.90);  object(0x1CB6,180,0,39);
move(-1.00,-1.25,0.00);  object(0x1CB6,180,0,39);
move(-1.00,-1.25,0.00);  object(0x1CB6,180,0,39);
move(-1.00,-1.25,0.00);  object(0x1CB6,180,0,39);
move(-1.00,-1.25,0.00);  object(0x1CB6,180,0,39);
move(-1.00,-1.25,0.00);  object(0x1CB6,180,0,39);
move(37.46,6.66,0.00);  object(0x1CB6,180,0,320);
move(1.03,-1.23,0.00);  object(0x1CB6,180,0,320);
move(1.03,-1.23,0.00);  object(0x1CB6,180,0,320);
move(1.03,-1.23,0.00);  object(0x1CB6,180,0,320);
move(1.03,-1.23,0.00);  object(0x1CB6,180,0,320);
move(143.46,-122.08,0.00);  object(0x1CB6,180,0,36);
move(-0.93,-1.30,0.00);  object(0x1CB6,180,0,36);
move(-0.93,-1.30,0.00);  object(0x1CB6,180,0,36);
move(-283.42,-7.91,0.00);  object(0x1CB6,180,0,270);
move(1.60,0.01,0.00);  object(0x1CB6,180,0,270);
move(1.60,0.01,0.00);  object(0x1CB6,180,0,270);
move(1.60,0.01,0.00);  object(0x1CB6,180,0,270);
move(1.60,0.01,0.00);  object(0x1CB6,180,0,270);
move(1.60,0.01,0.00);  object(0x1CB6,180,0,270);
move(1.60,0.01,0.00);  object(0x1CB6,180,0,270);
move(1.60,0.01,0.00);  object(0x1CB6,180,0,270);
move(-67.40,3.08,0.00);  object(0x1CB6,180,0,297);
move(1.42,-0.73,0.00);  object(0x1CB6,180,0,297);
move(1.42,-0.73,0.00);  object(0x1CB6,180,0,297);
move(1.42,-0.73,0.00);  object(0x1CB6,180,0,297);
move(1.42,-0.73,0.00);  object(0x1CB6,180,0,297);
move(-33.55,30.67,0.00);  object(0x1CB6,180,0,128);
move(-1.27,0.98,0.00);  object(0x1CB6,180,0,128);
move(-1.27,0.98,0.00);  object(0x1CB6,180,0,128);
move(-1.27,0.98,0.00);  object(0x1CB6,180,0,128);
move(-1.27,0.98,0.00);  object(0x1CB6,180,0,128);
move(-1.27,0.98,0.00);  object(0x1CB6,180,0,128);
move(-1.27,0.98,0.00);  object(0x1CB6,180,0,128);
move(-1.27,0.98,0.00);  object(0x1CB6,180,0,128);
move(194.97,-9.81,0.00);  object(0x1CB6,180,0,143);
move(-0.96,1.28,0.00);  object(0x1CB6,180,0,143);
move(-0.96,1.28,0.00);  object(0x1CB6,180,0,143);
move(-0.96,1.28,0.00);  object(0x1CB6,180,0,143);
move(34.06,-2.70,0.00);  object(0x1CB6,180,0,217);
move(0.96,1.28,0.00);  object(0x1CB6,180,0,217);
move(0.96,1.28,0.00);  object(0x1CB6,180,0,217);
// Speed Strips
moveto(-284.91,-470.12,3.65);  object(0x1CBA,90,0,270);
move(-1.00,-0.00,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.00,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.00,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.00,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.00,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.00,0.00);  object(0x1CBA,90,0,270);
move(-19.20,-10.04,0.00);  object(0x1CBA,90,0,270);
move(1.00,0.00,0.00);  object(0x1CBA,90,0,270);
move(-2.00,-0.00,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.00,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.00,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.00,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.00,0.00);  object(0x1CBA,90,0,270);
move(-161.45,-11.16,0.10);  object(0x1CBA,90,0,270);
move(-1.00,-0.01,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.01,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.01,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.01,0.00);  object(0x1CBA,90,0,270);
move(-1.00,-0.01,0.00);  object(0x1CBA,90,0,270);
move(-111.95,15.52,-0.10);  object(0x1CBA,90,0,266);
move(-1.00,-0.06,0.00);  object(0x1CBA,90,0,266);
move(-1.00,-0.06,0.00);  object(0x1CBA,90,0,266);
move(-1.00,-0.06,0.00);  object(0x1CBA,90,0,266);
move(-1.00,-0.06,0.00);  object(0x1CBA,90,0,266);
move(-1.00,-0.06,0.00);  object(0x1CBA,90,0,266);
move(-1.00,-0.06,0.00);  object(0x1CBA,90,0,266);
move(84.50,114.69,0.00);  object(0x1CBA,90,0,90);
move(1.00,0.00,0.00);  object(0x1CBA,90,0,90);
move(1.00,0.00,0.00);  object(0x1CBA,90,0,90);
move(1.00,0.00,0.00);  object(0x1CBA,90,0,90);
move(1.00,0.00,0.00);  object(0x1CBA,90,0,90);
move(1.00,0.00,0.00);  object(0x1CBA,90,0,90);
move(109.06,-3.27,0.00);  object(0x1CBA,90,0,90);
move(1.00,0.00,0.00);  object(0x1CBA,90,0,90);
move(1.00,0.00,0.00);  object(0x1CBA,90,0,90);
move(1.00,0.00,0.00);  object(0x1CBA,90,0,90);
move(1.00,0.00,0.00);  object(0x1CBA,90,0,90);
move(1.00,0.00,0.00);  object(0x1CBA,90,0,90);
move(1.00,0.00,0.00);  object(0x1CBA,90,0,90);
off()

#cheat Racer!
static gotten;
dx = x - getfloat(opp+0x30);
dy = y - getfloat(opp+0x34);
setfloat(opp + 0x30,   getfloat(opp + 0x30) + dx * 0.03);
setfloat(opp + 0x34,   getfloat(opp + 0x34) + dy * 0.03);  
setfloat(opp + 0x38, 11.30);
if(!gotten&&getint(pobj+0x150))
{
x = -638.01;
y = -486.57;
opp = getint(pobj + 0x150);
setfloat(opp + 0x30, -286.36, -479.83, 11.30);
gotten = 1;
}
if(x == -638.01&&y == -486.57&&getfloat(opp+0x30)==x&&getfloat(opp+0x34)==y)
{
x = -637.88;
y = -431.38;
}
if(x == -637.88&&y == -431.38&&getfloat(opp+0x30)==x&&getfloat(opp+0x34)==y)
{
x = -625.43;
y = -402.98;
}
if(x == -625.43&&y == -402.98&&getfloat(opp+0x30)==x&&getfloat(opp+0x34)==y)
{
x = -576.10;
y = -369.26;
}
if(x == -576.10&&y == -369.26&&getfloat(opp+0x30)==x&&getfloat(opp+0x34)==y)
{
x = -431.85;
y = -353.90;
}
if(x == -431.85&&y == -353.90&&getfloat(opp+0x30)==x&&getfloat(opp+0x34)==y)
{
x = -333.02;
y = -357.48;
}
if(x == -333.02&&y == -357.48&&getfloat(opp+0x30)==x&&getfloat(opp+0x34)==y)
{
x = -290.63;
y = -374.91;
}
if(x == -290.63&&y == -374.91&&getfloat(opp+0x30)==x&&getfloat(opp+0x34)==y)
{
x = -286.36;
y = -479.83;
}

#cheat Race Opponent!
static gotten;
static currentx;
static currenty;
checkpoint1x = -638.01;
checkpoint1y = -486.57;
checkpoint2x = -637.88;
checkpoint2y = -431.38;
checkpoint3x = -625.43;
checkpoint3y = -402.98;
checkpoint4x = -576.10;
checkpoint4y = -369.26;
checkpoint5x = -431.85;
checkpoint5y = -353.90;
checkpoint6x = -333.02;
checkpoint6y = -357.48;
checkpoint7x = -290.63;
checkpoint7y = -374.91;
if(!gotten&&getint(pobj+0x150))
{
currentx = checkpoint1x;
currenty = checkpoint1y;
opp = getint(pobj + 0x150);
dx = currentx - getfloat(opp+0x30);
dy = currenty - getfloat(opp+0x34);
setfloat(opp + 0x30, -286.36, -479.83, 11.30);
gotten = 1;
}
setfloat(opp + 0x30,   getfloat(opp + 0x30) + dx * 0.0009);
setfloat(opp + 0x34,   getfloat(opp + 0x34) + dy * 0.0009);  
setfloat(opp + 0x38, 11.30);
setfloat(opp + 0x140, 0, 0, 0);
checkx = currentx - getfloat(opp+0x30);
checky = currenty - getfloat(opp+0x34);
if(sqrt(checkx*checkx+checky*checky) < 5 )
{
 if(currentx == checkpoint1x)
 {
 currentx = checkpoint2x;
 currenty = checkpoint2y;
 dx = currentx - getfloat(opp+0x30);
 dy = currenty - getfloat(opp+0x34);
 }
 if(currentx == checkpoint2x)
 {
 currentx = checkpoint3x;
 currenty = checkpoint3y;
 dx = currentx - getfloat(opp+0x30);
 dy = currenty - getfloat(opp+0x34);
 }
 if(currentx == checkpoint3x)
 {
 currentx = checkpoint4x;
 currenty = checkpoint4y;
 dx = currentx - getfloat(opp+0x30);
 dy = currenty - getfloat(opp+0x34);
 }
 if(currentx == checkpoint4x)
 {
 currentx = checkpoint5x;
 currenty = checkpoint5y;
 dx = currentx - getfloat(opp+0x30);
 dy = currenty - getfloat(opp+0x34);
 }
 if(currentx == checkpoint5x)
 {
 currentx = checkpoint6x;
 currenty = checkpoint6y;
 dx = currentx - getfloat(opp+0x30);
 dy = currenty - getfloat(opp+0x34);
 }
 if(currentx == checkpoint6x)
 {
 currentx = checkpoint7x;
 currenty = checkpoint7y;
 dx = currentx - getfloat(opp+0x30);
 dy = currenty - getfloat(opp+0x34);
 }
 if(currentx == checkpoint7x)
 {
 currentx = checkpoint1x;
 currenty = checkpoint1y;
 dx = currentx - getfloat(opp+0x30);
 dy = currenty - getfloat(opp+0x34);
 }
}
#off
currentx = currenty = gotten = opp = 0;

#cheat Race Opponent!
static speed;
static lap;
static currentx;
static currenty;
checkpoint1x = -638.01;
checkpoint1y = -486.57;
checkpoint2x = -637.88;
checkpoint2y = -431.38;
checkpoint3x = -625.43;
checkpoint3y = -402.98;
checkpoint4x = -576.10;
checkpoint4y = -369.26;
checkpoint5x = -431.85;
checkpoint5y = -353.90;
checkpoint6x = -333.02;
checkpoint6y = -357.48;
checkpoint7x = -290.63;
checkpoint7y = -374.91;
if(!currentx&&getint(pobj+0x150))
{
currentx = checkpoint1x;
currenty = checkpoint1y;
opp = getint(pobj + 0x150);
dx = currentx - getfloat(opp+0x30);
dy = currenty - getfloat(opp+0x34);
setfloat(opp + 0x30, -286.36, -479.83, 11.30);
speed = 0.0009;
}
setfloat(opp + 0x30,   getfloat(opp + 0x30) + dx * speed);
setfloat(opp + 0x34,   getfloat(opp + 0x34) + dy * speed);  
setfloat(opp + 0x38, 11.30);
setfloat(opp + 0x140, 0, 0, 0);
checkx = currentx - getfloat(opp+0x30);
checky = currenty - getfloat(opp+0x34);
if(sqrt(checkx*checkx+checky*checky) < 5 )
{
 if(currentx == checkpoint1x && !lap)
 {
   currentx = checkpoint2x;
   currenty = checkpoint2y;
   lap = 1;
   speed = 0.005;
 }
 else if(currentx == checkpoint2x)
 {
   currentx = checkpoint3x;
   currenty = checkpoint3y;
   speed = 0.009;
 }
 else if(currentx == checkpoint3x)
 {
   currentx = checkpoint4x;
   currenty = checkpoint4y;
   speed = 0.005;
 }
 else if(currentx == checkpoint4x)
 {
   currentx = checkpoint5x;
   currenty = checkpoint5y;
   speed = 0.005;
 }
 else if(currentx == checkpoint5x)
 {
   currentx = checkpoint6x;
   currenty = checkpoint6y;
   speed = 0.005;
 }
 else if(currentx == checkpoint6x)
 {
   currentx = checkpoint7x;
   currenty = checkpoint7y;
   speed = 0.005;
 }
 else if(currentx == checkpoint7x)
 {
   currentx = checkpoint1x;
   currenty = checkpoint1y;
   speed = 0.0009;
 }
 dx = currentx - getfloat(opp+0x30);
 dy = currenty - getfloat(opp+0x34);
}
#off
currentx = currenty = gotten = opp = 0;