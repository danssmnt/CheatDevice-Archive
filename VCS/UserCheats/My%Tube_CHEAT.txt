#cheat LibertyM3
static obj;
static state;
top = 16.98;
bottom = 11.98;
if(!obj)
{
moveto(-1009.79,1199.87,11.98);
obj = object(0x1CB2,0,0,90);
moveto(-1057.80,1159.07,10.93);  object(0x1CA4,0,0,270);
move(-0.01,1.50,0.00);  object(0x1CA4,0,0,270);
move(0.00,0.00,0.00);  object(0x1CA4,0,0,270);
move(-0.01,2.20,0.00);  object(0x1CA4,0,0,270);
move(-0.00,1.00,0.00);  object(0x1CA4,0,0,270);
move(-0.01,1.60,0.00);  object(0x1CA4,0,0,270);
move(-0.01,1.60,0.00);  object(0x1CA4,0,0,270);
move(0.00,1.45,0.00);  object(0x1CA4,0,0,271);
move(0.04,1.60,0.00);  object(0x1CA4,0,0,271);
move(0.03,1.10,0.00);  object(0x1CA4,0,0,271);
move(0.03,1.10,0.00);  object(0x1CA4,0,0,271);
move(0.04,1.80,0.00);  object(0x1CA4,0,0,271);
move(0.02,0.90,0.00);  object(0x1CA4,0,0,271);
move(0.05,2.00,0.00);  object(0x1CA4,0,0,271);
move(0.02,0.70,0.00);  object(0x1CA4,0,0,271);
move(0.03,1.50,0.00);  object(0x1CA4,0,0,271);
move(0.03,1.20,0.00);  object(0x1CA4,0,0,271);
move(0.03,1.50,0.00);  object(0x1CA4,0,0,271);
move(0.03,1.50,0.00);  object(0x1CA4,0,0,271);
move(0.04,1.90,0.00);  object(0x1CA4,0,0,271);
move(-0.34,-27.91,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.20,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.30,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.50,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.50,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.10,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.50,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.40,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.90,0.00);  object(0x1CA4,0,0,271);
move(0.00,-0.90,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.30,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.10,0.00);  object(0x1CA4,0,0,271);
move(0.00,-0.90,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.50,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.20,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.40,0.00);  object(0x1CA4,0,0,271);
move(0.00,-0.90,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.30,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.50,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.00,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.10,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.90,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.90,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.40,0.00);  object(0x1CA4,0,0,271);
move(0.00,-2.30,0.00);  object(0x1CA4,0,0,271);
move(0.00,1.00,0.00);  object(0x1CA4,0,0,271);
move(0.00,-2.50,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.20,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.50,0.00);  object(0x1CA4,0,0,271);
move(0.00,-0.90,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.40,0.00);  object(0x1CA4,0,0,271);
move(0.00,-2.10,0.00);  object(0x1CA4,0,0,271);
move(0.00,1.20,0.00);  object(0x1CA4,0,0,271);
move(0.00,-3.00,0.00);  object(0x1CA4,0,0,271);
move(0.00,-1.60,0.00);  object(0x1CA4,0,0,271);
move(0.00,-0.90,0.00);  object(0x1CA4,0,0,271);
move(2.50,-2.49,0.00);  object(0x1CA4,0,0,180);
move(1.50,-0.01,0.00);  object(0x1CA4,0,0,180);
move(1.70,-0.01,0.00);  object(0x1CA4,0,0,180);
move(1.70,-0.01,0.00);  object(0x1CA4,0,0,180);
move(2.00,-0.01,0.00);  object(0x1CA4,0,0,180);
move(1.20,-0.01,0.00);  object(0x1CA4,0,0,180);
move(1.50,-0.01,0.00);  object(0x1CA4,0,0,180);
move(2.10,-0.01,0.00);  object(0x1CA4,0,0,180);
move(-0.69,0.06,0.00);  object(0x1CA4,0,0,179);
move(1.90,0.03,0.00);  object(0x1CA4,0,0,179);
move(2.00,0.03,0.00);  object(0x1CA4,0,0,179);
move(1.30,0.02,0.00);  object(0x1CA4,0,0,179);
move(1.90,0.03,0.00);  object(0x1CA4,0,0,179);
move(1.40,0.02,0.00);  object(0x1CA4,0,0,179);
move(2.20,0.03,0.00);  object(0x1CA4,0,0,179);
move(-0.80,-0.01,0.00);  object(0x1CA4,0,0,179);
move(2.50,0.04,0.00);  object(0x1CA4,0,0,179);
move(1.60,0.03,0.00);  object(0x1CA4,0,0,179);
move(0.60,0.01,0.00);  object(0x1CA4,0,0,179);
move(1.90,0.03,0.00);  object(0x1CA4,0,0,179);
move(1.30,0.02,0.00);  object(0x1CA4,0,0,179);
move(1.60,0.03,0.00);  object(0x1CA4,0,0,179);
move(1.80,0.03,0.00);  object(0x1CA4,0,0,179);
move(0.20,0.00,0.00);  object(0x1CA4,0,0,179);
move(2.44,2.64,0.00);  object(0x1CA4,0,0,91);
move(-0.00,-0.20,0.00);  object(0x1CA4,0,0,91);
move(0.03,1.50,0.00);  object(0x1CA4,0,0,91);
move(0.03,1.40,0.00);  object(0x1CA4,0,0,91);
move(-0.01,1.76,0.00);  object(0x1CA4,0,0,91);
move(-0.11,1.57,0.00);  object(0x1CA4,0,0,92);
move(0.05,1.80,0.00);  object(0x1CA4,0,0,92);
move(0.03,1.76,0.00);  object(0x1CA4,0,0,88);
move(-0.07,1.60,0.00);  object(0x1CA4,0,0,88);
move(-0.07,1.60,0.00);  object(0x1CA4,0,0,88);
move(-0.06,1.50,0.00);  object(0x1CA4,0,0,88);
move(-0.06,1.50,0.00);  object(0x1CA4,0,0,88);
move(-0.06,1.50,0.00);  object(0x1CA4,0,0,88);
move(-0.06,1.50,0.00);  object(0x1CA4,0,0,88);
move(-0.07,1.70,0.00);  object(0x1CA4,0,0,88);
move(-0.07,1.70,0.00);  object(0x1CA4,0,0,88);
move(-0.07,1.70,0.00);  object(0x1CA4,0,0,88);
move(-0.08,1.80,0.00);  object(0x1CA4,0,0,88);
move(-0.07,1.60,0.00);  object(0x1CA4,0,0,88);
move(0.58,4.30,0.00);  object(0x1CA4,0,0,88);
move(0.04,-1.00,0.00);  object(0x1CA4,0,0,88);
move(0.06,-1.60,0.00);  object(0x1CA4,0,0,88);
move(-0.53,2.20,0.00);  object(0x1CA4,0,0,96);
move(-33.84,44.53,0.00);  object(0x1CA4,0,0,1);
move(1.20,-0.03,0.00);  object(0x1CA4,0,0,1);
move(1.50,-0.03,0.00);  object(0x1CA4,0,0,1);
move(1.60,-0.04,0.00);  object(0x1CA4,0,0,1);
move(2.00,-0.05,0.00);  object(0x1CA4,0,0,1);
move(2.30,-0.05,0.00);  object(0x1CA4,0,0,1);
move(2.70,-0.06,0.00);  object(0x1CA4,0,0,1);
move(-1.30,0.03,0.00);  object(0x1CA4,0,0,1);
move(3.10,-0.07,0.00);  object(0x1CA4,0,0,1);
move(2.10,-0.05,0.00);  object(0x1CA4,0,0,1);
move(0.90,-0.02,0.00);  object(0x1CA4,0,0,1);
move(2.00,-0.05,0.00);  object(0x1CA4,0,0,1);
move(1.30,-0.03,0.00);  object(0x1CA4,0,0,1);
move(1.40,-0.03,0.00);  object(0x1CA4,0,0,1);
move(1.80,-0.04,0.00);  object(0x1CA4,0,0,1);
move(1.90,-0.04,0.00);  object(0x1CA4,0,0,1);
move(4.00,-0.09,0.00);  object(0x1CA4,0,0,1);
move(2.33,0.20,0.00);  object(0x1CA4,0,0,355);
move(0.80,0.07,0.00);  object(0x1CA4,0,0,355);
//End Of First layer wall&begin of front wall
moveto(-1009.79,1199.87,11.98);
move(-10.16,-0.01,0.00);  object(0x1CB2,0,0,90);
move(-13.47,0.22,-1.80);  object(0x1CB2,345,0,90);
move(-13.43,-0.10,-3.60);  object(0x1CB2,345,0,90);
move(-12.17,-0.10,-3.40);  object(0x1CB2,345,0,90);
move(48.83,1.50,14.90);  object(0x1CB2,0,330,90);
move(-10.16,0.39,0.00);  object(0x1CB2,0,330,90);

//End of front wall&Begin of add ons
moveto(-1013.14,1157.84,17.39);  object(0x1CB4,0,0,31);
move(41.14,58.87,45.80);  object(0x1CF7,0,0,83);
moveto(-994.55,1018.29,10.57);  object(0x02BA,0,0,356);
move(-1.80,-0.12,0.00);  object(0x02BA,0,0,356);
move(-1.70,-0.12,0.00);  object(0x02BA,0,0,356);
move(-2.10,-0.14,0.00);  object(0x02BA,0,0,356);
move(-1.60,-0.11,0.00);  object(0x02BA,0,0,356);
move(2.59,0.18,0.00);  object(0x02BA,0,0,356);
move(2.79,0.19,0.00);  object(0x02BA,0,0,356);
move(-12.05,27.02,-2.60);  object(0x02A5,0,0,179);
move(8.91,-24.95,1.80);  object(0x0264,0,0,177);
move(2.32,8.20,0.00);  object(0x0264,0,0,177);
move(-4.29,-4.77,0.00);  object(0x0264,0,0,178);
move(6.17,-4.49,0.10);  object(0x0264,0,0,174);
move(-14.79,143.00,3.90);  object(0x1D45,0,0,90);
move(-0.04,15.80,0.00);  object(0x1D45,0,0,90);
move(-23.50,-65.57,-4.00);  object(0x1D39,0,0,232);
move(0.96,6.03,0.00);  object(0x1D39,0,0,326);
move(5.74,-0.84,0.00);  object(0x1D39,0,0,52);
move(-1.35,15.60,-1.90);  object(0x1D39,0,0,351);
move(33.19,-106.10,8.40);  object(0x1D45,0,0,0);
move(-35.60,92.02,-6.50);  object(0x1CFE,0,0,73);
move(0.27,-7.70,0.00);  object(0x1CFE,0,0,38);
move(4.45,4.49,0.00);  object(0x1CFE,0,0,38);
move(-0.88,-3.25,0.00);  object(0x1D00,0,0,87);
move(-1.41,1.59,0.00);  object(0x1CF9,0,0,108);
moveto(-1018.08,1145.47,8.99);  
move(9.05,9.52,4.60);  object(0x01B8,210,0,176);
move(-8.63,15.67,0.80);  object(0x01B8,0,0,350);
move(-0.06,-8.28,0.00);  object(0x01B8,0,0,350);
move(-0.21,-7.75,0.00);  object(0x01B8,0,0,350);
move(-12.68,-43.16,-4.90);  object(0x01B8,0,0,252);
move(-0.08,7.84,0.00);  object(0x01B8,0,0,51);
moveto(-1004.02,1190.75,9.95);  object(0x01C5,0,0,89);
move(-0.04,2.80,0.00);  object(0x01C5,0,0,89);
move(-11.09,50.66,-1.90);  object(0x01C6,0,0,257);
move(6.81,3.59,0.20);  object(0x01C6,5,0,247);
move(-8.18,-40.24,1.30);  object(0x01CB,0,0,218);
move(-0.22,9.57,0.00);  object(0x01CB,0,0,218);
move(-10.16,-103.29,0.70);  object(0x01CD,0,0,285);
move(23.69,113.53,-0.80);  object(0x01FF,0,0,91);
move(1.35,0.57,1.10);  object(0x0204,0,0,309);
move(2.81,-124.90,1.90);  object(0x020C,0,0,287);
move(-1.23,0.10,0.00);  object(0x020C,0,0,287);
move(2.76,-0.21,0.00);  object(0x020C,0,0,287);
moveto(-1027.01,1113.77,9.78);  object(0x1CA5,0,0,231);
moveto(-1026.84,1111.48,9.79);  object(0x1CCC,0,0,178);
move(5.83,5.29,0.00);  object(0x1CD4,0,0,90);
move(0.00,0.00,0.30);  object(0x1CD4,0,0,90);
move(-3.68,-7.14,0.00);  object(0x1CE1,0,0,177);
move(-1.77,-0.03,0.00);  object(0x1CE2,0,0,178);
moveto(-1019.65,1233.93,7.39);  object(0x1D07,0,0,219);
moveto(-997.66,1109.72,17.93);  object(0x1CB4,0,0,86);
move(-0.22,4.65,0.00);  object(0x1CB4,0,0,37);
move(0.69,-85.90,-20.00);  object(0x1CB5,0,0,339);
move(2.03,-3.44,0.00);  object(0x1CB5,0,0,107);
move(1.18,0.37,0.50);  object(0x1CE5,25,0,353);
move(0.46,1.12,0.50);  object(0x1CE5,0,270,3);
move(-1.70,0.09,0.00);  object(0x1CE5,0,270,3);
move(-0.10,0.01,0.10);  object(0x1CE5,0,315,3);
move(-0.50,0.03,0.00);  object(0x1CE5,0,50,3);
move(-0.10,0.01,0.00);  object(0x1CE5,0,90,3);
move(-0.70,0.04,0.00);  object(0x1CE5,0,90,3);
move(0.10,-0.01,0.20);  object(0x1CE5,0,230,3);
move(-0.10,0.01,-0.50);  object(0x1CE5,0,230,3);
move(0.00,0.00,0.30);  object(0x1CE5,0,230,3);
move(-18.94,-89.57,-7.50);  object(0x1CEA,0,0,291);
//Lighting
moveto(-1022.56,1161.30,16.69);  object(0x01B8,0,0,299);
move(-0.16,6.30,0.00);  object(0x01B8,0,0,299);
move(-0.18,6.90,0.00);  object(0x01B8,0,0,299);
move(-0.15,5.80,0.00);  object(0x01B8,0,0,299);
move(0.82,-32.19,0.00);  object(0x01B8,0,0,300);
move(4.72,30.05,-2.30);  object(0x01B8,0,0,331);
move(-0.12,7.17,0.00);  object(0x01B8,0,0,11);
move(-34.76,-68.53,0.30);  object(0x01B8,0,0,247);
move(2.43,14.36,0.00);  object(0x01B8,0,0,13);
move(16.25,20.05,0.00);  object(0x01B8,0,0,57);
move(-13.51,18.89,0.00);  object(0x01B8,0,0,20);
move(1.77,8.12,0.00);  object(0x01B8,0,0,26);
move(10.15,-7.31,0.00);  object(0x01B8,0,0,106);
move(-5.48,-23.47,0.00);  object(0x01B8,0,0,167);
move(-6.93,6.98,0.00);  object(0x01B8,0,0,354);
move(3.19,11.19,0.00);  object(0x01B8,0,0,28);
move(-1.55,-8.78,0.00);  object(0x01B8,0,0,11);
move(0.28,3.05,0.00);  object(0x01B8,0,0,19);
move(-0.21,14.67,-0.10);  object(0x01B8,0,0,286);
move(48.27,-147.81,-5.70);  object(0x01B8,0,0,165);
move(-2.26,-3.82,-5.70);  object(0x01B8,0,0,196);
move(3.11,-0.22,0.00);  object(0x01B8,0,0,174);
move(-7.30,19.43,1.70);  object(0x01B8,0,0,313);
move(-8.48,-0.04,1.70);  object(0x01B8,0,0,304);
//roof
moveto(-1028.18,1184.35,13.69);  object(0x1CB2,0,70,90);
move(-12.95,-0.00,0.00);  object(0x1CB2,0,70,90);
move(-8.76,0.08,0.00);  object(0x1CB2,0,70,90);
move(21.70,-72.14,0.00);  object(0x1CB2,0,70,269);
move(-13.60,0.29,0.00);  object(0x1CB2,0,70,271);
move(-7.40,0.19,0.00);  object(0x1CB2,0,70,271);
move(0.18,6.35,1.00);  object(0x1CB2,0,90,91);
move(0.10,6.72,0.00);  object(0x1CB2,0,90,91);
move(0.08,6.62,0.00);  object(0x1CB2,0,90,91);
move(0.04,6.74,0.00);  object(0x1CB2,0,90,91);
move(0.12,6.61,0.00);  object(0x1CB2,0,90,91);
move(0.11,6.72,0.00);  object(0x1CB2,0,90,91);
move(0.09,6.62,0.00);  object(0x1CB2,0,90,91);
move(0.05,6.63,0.00);  object(0x1CB2,0,90,91);
move(-0.47,12.69,0.00);  object(0x1CB2,0,90,91);
move(-0.11,-6.72,0.00);  object(0x1CB2,0,90,91);
move(-0.13,-6.71,0.00);  object(0x1CB2,0,90,91);
move(-0.11,-6.72,0.00);  object(0x1CB2,0,90,91);
moveto(-1034.50,1178.15,14.78);  object(0x1CB2,0,90,90);
move(0.03,-6.70,0.00);  object(0x1CB2,0,90,90);
move(0.12,-6.76,0.00);  object(0x1CB2,0,90,90);
move(0.02,-6.69,0.00);  object(0x1CB2,0,90,90);
move(-0.05,-6.65,0.00);  object(0x1CB2,0,90,90);
moveto(-1034.68,1118.51,14.79);  object(0x1CB2,0,90,90);
move(6.51,-5.87,-1.20);  object(0x1CB2,0,115,90);
move(-0.01,6.40,1.40);  object(0x1CB2,0,90,90);
move(-0.10,58.77,-0.20);  object(0x1CB2,0,90,90);
move(0.01,-6.70,0.00);  object(0x1CB2,0,90,90);
move(0.05,-6.73,0.00);  object(0x1CB2,0,90,90);
move(0.03,-6.62,0.00);  object(0x1CB2,0,90,90);
move(-0.03,-6.68,0.00);  object(0x1CB2,0,90,90);
move(-6.15,-31.99,0.00);  object(0x1CB2,0,90,91);
moveto(-1028.18,1184.35,13.80);  object(0x1CB2,0,70,90);
move(-12.95,-0.00,0.00);  object(0x1CB2,0,70,90);
move(-8.76,0.08,0.00);  object(0x1CB2,0,70,90);
move(21.70,-72.14,0.00);  object(0x1CB2,0,70,269);
move(-13.60,0.29,0.00);  object(0x1CB2,0,70,271);
move(-7.40,0.19,0.00);  object(0x1CB2,0,70,271);
move(0.18,6.35,1.00);  object(0x1CB2,0,90,91);
move(0.10,6.72,0.00);  object(0x1CB2,0,90,91);
move(0.08,6.62,0.00);  object(0x1CB2,0,90,91);
move(0.04,6.74,0.00);  object(0x1CB2,0,90,91);
move(0.12,6.61,0.00);  object(0x1CB2,0,90,91);
move(0.11,6.72,0.00);  object(0x1CB2,0,90,91);
move(0.09,6.62,0.00);  object(0x1CB2,0,90,91);
move(0.05,6.63,0.00);  object(0x1CB2,0,90,91);
move(-0.47,12.69,0.00);  object(0x1CB2,0,90,91);
move(-0.11,-6.72,0.00);  object(0x1CB2,0,90,91);
move(-0.13,-6.71,0.00);  object(0x1CB2,0,90,91);
move(-0.11,-6.72,0.00);  object(0x1CB2,0,90,91);
moveto(-1034.50,1178.15,14.89);  object(0x1CB2,0,90,90);
move(0.03,-6.70,0.00);  object(0x1CB2,0,90,90);
move(0.12,-6.76,0.00);  object(0x1CB2,0,90,90);
move(0.02,-6.69,0.00);  object(0x1CB2,0,90,90);
move(-0.05,-6.65,0.00);  object(0x1CB2,0,90,90);
moveto(-1034.68,1118.51,14.90);  object(0x1CB2,0,90,90);
move(6.51,-5.87,-1.20);  object(0x1CB2,0,115,90);
move(-0.01,6.40,1.40);  object(0x1CB2,0,90,90);
move(-0.10,58.77,-0.20);  object(0x1CB2,0,90,90);
move(0.01,-6.70,0.00);  object(0x1CB2,0,90,90);
move(0.05,-6.73,0.00);  object(0x1CB2,0,90,90);
move(0.03,-6.62,0.00);  object(0x1CB2,0,90,90);
move(-0.03,-6.68,0.00);  object(0x1CB2,0,90,90);
move(-6.15,-31.99,0.00);  object(0x1CB2,0,90,91);
moveto(-1028.18,1184.35,13.86);  object(0x1CB2,0,70,90);
move(-12.95,-0.00,0.00);  object(0x1CB2,0,70,90);
move(-8.76,0.08,0.00);  object(0x1CB2,0,70,90);
move(21.70,-72.14,0.00);  object(0x1CB2,0,70,269);
move(-13.60,0.29,0.00);  object(0x1CB2,0,70,271);
move(-7.40,0.19,0.00);  object(0x1CB2,0,70,271);
move(0.18,6.35,1.00);  object(0x1CB2,0,90,91);
move(0.10,6.72,0.00);  object(0x1CB2,0,90,91);
move(0.08,6.62,0.00);  object(0x1CB2,0,90,91);
move(0.04,6.74,0.00);  object(0x1CB2,0,90,91);
move(0.12,6.61,0.00);  object(0x1CB2,0,90,91);
move(0.11,6.72,0.00);  object(0x1CB2,0,90,91);
move(0.09,6.62,0.00);  object(0x1CB2,0,90,91);
move(0.05,6.63,0.00);  object(0x1CB2,0,90,91);
move(-0.47,12.69,0.00);  object(0x1CB2,0,90,91);
move(-0.11,-6.72,0.00);  object(0x1CB2,0,90,91);
move(-0.13,-6.71,0.00);  object(0x1CB2,0,90,91);
move(-0.11,-6.72,0.00);  object(0x1CB2,0,90,91);
moveto(-1034.50,1178.15,14.95);  object(0x1CB2,0,90,90);
move(0.03,-6.70,0.00);  object(0x1CB2,0,90,90);
move(0.12,-6.76,0.00);  object(0x1CB2,0,90,90);
move(0.02,-6.69,0.00);  object(0x1CB2,0,90,90);
move(-0.05,-6.65,0.00);  object(0x1CB2,0,90,90);
moveto(-1034.68,1118.51,14.96);  object(0x1CB2,0,90,90);
move(6.51,-5.87,-1.20);  object(0x1CB2,0,115,90);
move(-0.01,6.40,1.40);  object(0x1CB2,0,90,90);
move(-0.10,58.77,-0.20);  object(0x1CB2,0,90,90);
move(0.01,-6.70,0.00);  object(0x1CB2,0,90,90);
move(0.05,-6.73,0.00);  object(0x1CB2,0,90,90);
move(0.03,-6.62,0.00);  object(0x1CB2,0,90,90);
move(-0.03,-6.68,0.00);  object(0x1CB2,0,90,90);
move(-6.15,-31.99,0.00);  object(0x1CB2,0,90,91);
moveto(-1035.17,1125.56,14.79);  object(0x1CB2,0,90,271);
move(6.90,-0.03,0.00);  object(0x1CB2,0,90,270);
moveto(-1035.17,1125.56,14.91);  object(0x1CB2,0,90,271);
move(6.90,-0.03,0.00);  object(0x1CB2,0,90,270);
moveto(-1035.17,1125.56,14.99);  object(0x1CB2,0,90,271);
move(6.90,-0.03,0.00);  object(0x1CB2,0,90,270);
moveto(-1050.50,1169.43,14.92);  object(0x1CB2,0,90,270);
move(0.01,-6.44,0.00);  object(0x1CB2,0,90,270);
move(0.01,-6.25,0.00);  object(0x1CB2,0,90,270);
move(0.01,-5.88,0.00);  object(0x1CB2,0,90,270);
move(0.01,-6.57,0.00);  object(0x1CB2,0,90,270);
move(0.01,-6.29,0.00);  object(0x1CB2,0,90,270);
move(0.01,-6.80,0.00);  object(0x1CB2,0,90,270);
move(0.01,-6.76,0.00);  object(0x1CB2,0,90,270);
move(0.01,-5.96,0.00);  object(0x1CB2,0,90,270);
move(0.01,-6.11,-1.10);  object(0x1CB2,0,70,270);
move(-0.11,63.38,1.10);  object(0x1CB2,0,90,270);
move(-0.00,3.33,-0.10);  object(0x1CB2,0,90,270);
//Glass Windows
moveto(-1057.43,1127.02,13.29);  object(0x029F,0,0,90);
move(-0.02,-4.20,0.00);  object(0x029F,0,0,90);
move(-0.01,-4.40,0.00);  object(0x029F,0,0,90);
move(0.01,-3.70,-0.60);  object(0x029F,0,20,90);
move(0.02,-2.20,-0.70);  object(0x029F,0,20,90);
move(-0.08,18.70,1.20);  object(0x029F,0,0,90);
move(-0.04,4.40,0.00);  object(0x029F,0,0,90);
move(-0.04,4.40,0.00);  object(0x029F,0,0,90);
move(0.02,4.40,0.00);  object(0x029F,0,0,90);
move(-0.00,4.40,0.00);  object(0x029F,0,0,90);
move(0.00,4.40,0.00);  object(0x029F,0,0,90);
move(-0.04,4.40,0.00);  object(0x029F,0,0,90);
move(0.02,4.40,0.00);  object(0x029F,0,0,90);
move(-0.02,4.40,0.00);  object(0x029F,0,0,90);
move(-0.04,4.40,0.00);  object(0x029F,0,0,90);
move(-0.04,4.40,0.00);  object(0x029F,0,0,90);
move(-0.04,4.30,-1.70);  object(0x029F,0,0,90);
move(0.47,3.00,-0.40);  object(0x029F,0,340,90);
move(-0.10,2.50,-0.90);  object(0x029F,0,340,90);
//Gun Range Building
moveto(-1002.54,1100.15,9.09);  object(0x1CD6,270,180,90);
move(-0.01,-5.01,0.00);  object(0x1CD6,270,180,90);
move(5.18,-0.04,0.00);  object(0x1CD6,270,180,90);
move(-0.15,5.03,0.00);  object(0x1CD6,270,180,90);
move(-5.05,-4.95,0.00);  object(0x1CD6,180,0,270);
move(0.04,2.23,0.00);  object(0x1CD6,180,0,270);
move(2.67,5.11,0.00);  object(0x1CD6,180,0,180);
move(4.42,-0.19,0.00);  object(0x1CD6,180,0,180);
move(-4.33,-9.79,-3.30);  object(0x1CD6,180,0,179);
move(2.84,0.07,0.00);  object(0x1CD6,180,0,179);
move(2.47,2.89,2.60);  object(0x1CD6,180,0,90);
move(0.03,4.26,0.00);  object(0x1CD6,180,0,90);
move(-3.02,-5.48,5.70);  object(0x1CD6,90,180,90);
move(3.29,-0.29,0.00);  object(0x1CD6,90,180,90);
move(-3.25,5.29,0.00);  object(0x1CD6,90,180,90);
move(0.07,0.80,0.00);  object(0x1CD6,90,180,90);
move(3.71,-0.03,0.00);  object(0x1CD6,90,180,90);
move(-0.19,-2.20,0.00);  object(0x1CD6,90,180,90);
move(-3.37,-5.31,-3.60);  object(0x1CD6,90,180,90);
move(2.80,-0.01,0.00);  object(0x1CD6,90,180,90);
move(-0.01,-2.45,-2.50);  object(0x1CD6,90,90,90);
move(-2.80,0.01,0.00);  object(0x1CD6,90,90,90);
move(-5.20,0.12,0.00);  object(0x1CD6,90,90,177);
move(7.78,6.99,3.20);  object(0x1CD6,0,90,90);
move(-0.02,-2.00,0.00);  object(0x1CD6,0,90,90);
move(-0.02,-2.29,0.00);  object(0x1CD6,0,90,90);
move(-5.39,3.70,-1.96);  object(0x1CD6,270,0,180);
move(5.27,0.04,0.00);  object(0x1CD6,270,0,180);
move(-0.93,0.01,0.10);  object(0x1CD6,5,0,180);
move(-4.24,-0.01,0.00);  object(0x1CD6,5,0,180);
move(0.19,-0.74,0.30);  object(0x1CD6,90,180,0);
move(5.02,-0.02,0.00);  object(0x1CD6,90,180,0);
move(-2.40,-0.14,-5.00);  object(0x1CD6,0,180,0);
move(-2.71,-0.02,0.00);  object(0x1CD6,0,180,0);
move(2.53,-1.24,6.00);  object(0x015B,280,0,30);
move(-3.73,-1.67,0.10);  object(0x015C,315,335,15);
move(6.41,3.98,0.70);  object(0x0160,0,350,260);
move(-0.02,0.03,-0.40);  object(0x0165,0,350,265);
move(-4.84,5.68,0.00);  object(0x0166,0,350,170);
move(0.60,0.00,0.00);  object(0x0166,0,350,170);
move(-1.20,0.00,0.00);  object(0x0166,0,350,170);
move(1.80,0.00,0.00);  object(0x0166,0,350,170);
move(-2.29,-7.63,-0.40);  object(0x016F,0,330,90);
move(3.88,-0.36,0.00);  object(0x016F,0,330,90);
move(-1.69,2.42,3.34);  object(0x01B8,0,0,265);
move(-1.46,-0.42,-4.34);  object(0x1CD6,270,180,180);
move(3.00,-0.01,0.00);  object(0x1CD6,270,180,180);
setfloat(pobj + 0x30, -1008.98, 1238.38, 8.87);
}
else
{
  selectobject(obj);
  if(state == 0)
  {
       if(getfloat(pplayer+0x30) < -1003.13 &&getfloat(pplayer+0x30) > -1016.14 &&getfloat(pplayer+0x34) < 
1216.08&&getfloat(pplayer+0x34) > 1198.02) state = 1;
       else state = 2;
  }
if(state == 1)
{
     if(getfloat(obj+0x38) >= top) state = 0;
     else setfloat(obj + 0x38, getfloat(obj+0x38) + 0.04);

}
else if(state == 2)
{
     if(getfloat(obj+0x38) <= bottom) state = 0;
     else setfloat(obj + 0x38, getfloat(obj+0x38) - 0.04);

}
propagateobject();
}
//Cars,Bikes
pspawn = 0x08E81290;
setint(pspawn,   254);    
setfloat(pspawn + 4,   -1045, 1181, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   266);    
setfloat(pspawn + 4,   -1047, 1179, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   270);    
setfloat(pspawn + 4,   -1045, 1177, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   272);    
setfloat(pspawn + 4,   -1047, 1175, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   279);    
setfloat(pspawn + 4,   -1045, 1173, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   259);    
setfloat(pspawn + 4,   -1047, 1171, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   245);    
setfloat(pspawn + 4,   -1045, 1169, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   232);    
setfloat(pspawn + 4,   -1047, 1167, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   231);    
setfloat(pspawn + 4,   -1045, 1165, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   230);    
setfloat(pspawn + 4,   -1047, 1163, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   212);    
setfloat(pspawn + 4,   -1045, 1161, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   205);    
setfloat(pspawn + 4,   -1047, 1159, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   198);    
setfloat(pspawn + 4,   -1045, 1157, 10.80, 274);
pspawn += 0x30;
setint(pspawn,   170);    
setfloat(pspawn + 4,   -1047, 1155, 10.80, 274);
pspawn += 0x30;
setint(pspawn,  253);    
setfloat(pspawn + 4,    -1053.59,1115.93,10.26, 250);
pspawn += 0x30;
setint(pspawn,  255);    
setfloat(pspawn + 4,    -1049.60,1130.58,10.27, 255);
pspawn += 0x30;
setint(pspawn, 265);    
setfloat(pspawn + 4,    -1039.07,1145.61,10.27, 230);
pspawn += 0x30;
setint(pspawn, 269);    
setfloat(pspawn + 4,    -1033.42,1151.45,10.27, 220);
pspawn += 0x30;
setint(pspawn, 270);    
setfloat(pspawn + 4,    -1034.38,1170.63,10.27, 210);
pspawn += 0x30;
//Choppers,Planes
setint(pspawn,   213);    
setfloat(pspawn + 4,   -1030.72,1134.32,10.27, 200);
pspawn += 0x30;
setint(pspawn,   222);    
setfloat(pspawn + 4,   -1025.65,1175.40,16.07, 220);
pspawn += 0x30;
//Weapons
pickup = 0x08C6A330;
setfloat(pickup, -1102.57, 312.34, 12.62);
setint(pickup+0x2C, 1000000);
setshort(pickup+0x34, 0x0167);
setchar(pickup+0x38, 0x0B);
pickup += 0x40;
setfloat(pickup, -1011, 1210.14, 9.72);
setint(pickup+0x2C, 1000000);
setshort(pickup+0x34, 0x0156);
setchar(pickup+0x38, 0x0B);
pickup += 0x40;
setfloat(pickup, -1010.08, 1198.47, 10.02);
setint(pickup+0x2C, 1000000);
setshort(pickup+0x34, 0x0170);
setchar(pickup+0x38, 0x0B);
pickup += 0x40;
setfloat(pickup, -1009, 1198.21, 10.01);
setint(pickup+0x2C, 1000000);
setshort(pickup+0x34, 0x0166);
setchar(pickup+0x38, 0x0B);
pickup += 0x40;
setfloat(pickup, -1008, 1198.21, 10.01);
setint(pickup+0x2C, 1000000);
setshort(pickup+0x34, 0x016C);
setchar(pickup+0x38, 0x0B);
pickup += 0x40;
setfloat(pickup, -1007, 1198.21, 10.02);
setint(pickup+0x2C, 1000000);
setshort(pickup+0x34, 0x016F);
setchar(pickup+0x38, 0x0B);
pickup += 0x40;
setfloat(pickup, -1013, 1198.21, 10);
setint(pickup+0x2C, 1000000);
setshort(pickup+0x34, 0x0165);
setchar(pickup+0x38, 0x0B);
pickup += 0x40;
setfloat(pickup, -1014, 1198.21, 10.01);
setint(pickup+0x2C, 1000000);
setshort(pickup+0x34, 0x0156);
setchar(pickup+0x38, 0x0B);
pickup += 0x40;
setfloat(pickup, -1015, 1198.21, 10.01);
setint(pickup+0x2C, 1000000);
setshort(pickup+0x34, 0x01D3);
setchar(pickup+0x38, 0x03);
//Bribes
for(i = 0; i < 6; i++){
    pickup += 0x40;
    setfloat(pickup, -1017.81-i*3, 1198.21, 13);
    setint(pickup+0x2C, 1000000);
    setshort(pickup+0x34, 0x01DA);
    setchar(pickup+0x38, 0x03);
}
for(add = 0x08C69FB0; add <= 0x8C6A1F0; add+=0x40)
    setint(add+0x2C, 1000000);
off();



#cheat Angry Ped
static mark;
mark = 0x08BF7B40;
pped = getint(0x08BA1D70);
static yourped;
if(pped&&!yourped)
yourped=pped;
if(yourped){
setchar(yourped+0x578, 0x0);
setchar(yourped+0x87c, 0x1e);
setchar(yourped+0x789, 0x00);
setchar(yourped+0x894, 0x8);
setint(yourped+0x890, pplayer);
setchar(mark+0x16, 0x80, 0x3F);
setchar(mark+0x1A, 0x01);
setchar(mark+0x1C, 0x02);
setchar(0x08C62FEC, 255, 0, 0);
setchar(0x08C6307C, 255, 0, 0);
setchar(0x08C62ECC, 255, 0, 0);
setchar(0x08C62F5C, 255, 0, 0);
setfloat(mark, getfloat(yourped+0x30), getfloat(yourped+0x34), getfloat(yourped+0x38) +
1);
health = getfloat(yourped+0x4e4);
if(health == 0){
setchar (0x08C62FEC, 0, 0, 0);
setchar (0x08C6307C, 0, 0, 0);
setchar (0x08C62ECC, 0, 0, 0);
setchar (0x08C62F5C, 0, 0, 0);
setfloat(mark, 0, 0, 0);
setshort(0x08e90DD8, 1, 'P', 'a', 'w', 'n', 'e', 'd', ' ', 'h', 'i', 'm',
' ', '!',0);
setint(0x08bde55c, getint(0x08bde55c)+5);
setfloat(yourped+0x4e4, 0);
yourped=0;}}
#off
setchar(mark+0x2c, 30, 255, 255);
setshort(0x08e90DD8, 1, 'L', 'o', 'o', 's', 'e', 'r', ' ', '!',0);
setchar(yourped+0x894, 0x0);
setchar(yourped+0x8B4, 0x0);
yourped=0;



#cheat Make A Custom Mission
setchar(0x09F69054, 1);
static mission;
if(!mission)
{
mission = 0;
}
setchar(0x08E93604, 0x01);
setshort(0x08E92FFC, 'C', 'u', 's', 't', 'o', 'm', ' ', 'M', 'i', 's',
's', 'i', 'o', 'n');
setshort(0x08E931FC, 'C', 'u', 's', 't', 'o', 'm', ' ', 'M', 'i', 's',
's', 'i', 'o', 'n');
setshort(0x08E933FC, 'C', 'u', 's', 't', 'o', 'm', ' ', 'M', 'i', 's',
's', 'i', 'o', 'n');
marker = 0x08BF7B40;
setfloat(marker, -1077.40, 312.63, 11.26);
setchar(marker+0x16, 0x80, 0x3F);
setchar(marker+0x1A, 0x01);
setchar(marker+0x1C, 0x06);
marker += 0x20;
X1 = -1077.40;
Y1 = 312.63;
setshort(0x08e90bd8, 1, 'G', 'e', 't', ' ', 'T', 'o', ' ', 'T', 'h', 'e', ' ', 'C', 'o', 'm', 'p', 'o', 'u', 'n', 'd', '!', 0);
checkx1 = X1 - getfloat(pplayer + 0x30);
checky1 = Y1 - getfloat(pplayer + 0x34);
if(sqrt(checkx1 * checkx1 + checky1 * checky1) < 2)
{
mission = 1;
}
if(mission == 1)
{
setchar(0x08E937B5, 0x01);
setshort(0x08e90DD8, 1, '~', 'h', '~', 'M', 'I', 'S', 'S', 'I', 'O', 'N', ' ', 'P', 'A', 'S', 'S', 'E', 'D', '!', '~', 'W', '~', 0);
off();
}
#off
setchar(0x08E93604, 0x00);


#cheat try and get as high a media attention as you can with just a sniper
setshort(0x08bb41ac, 1);
setchar(pplayer+0x658, 0x1E);
setchar(pplayer+0x789, 0x08);
setint(pplayer+0x664, 0x00ffffff);
setint(0x089bb648, 0);
setint(0x089bb65c, 0);
setint(0x089bb66c, 0);
teleport(-1099.99, -252.05, 24.54);


#cheat Black Sky
sethex(0x08B8EAC6, 0, 0, 0);

#cheat Black Sky
setshort(0x08B8EAC4, 0, 0, 0);

#cheat Savable Teleport (L+[] to Save, L+O to Tele)
//Creates a savable teleport. You can save your game after using this cheat to save the
//location to memory.
if(press & CTRL_CIRCLE && buttons & CTRL_LTRIGGER && getint(0x08BB41C0) == 0xFFFFFFFF)
setfloat(pobj+0x30,getfloat(0x08BB41C4),getfloat(0x08BB41C8),getfloat(0x08BB41CC));
if(press & CTRL_SQUARE && buttons & CTRL_LTRIGGER){
setint(0x08BB41C0, 0xFFFFFFFF);
setfloat(0x08BB41C4, getfloat(pobj + 0x30));
setfloat(0x08BB41C8, getfloat(pobj + 0x34));
setfloat(0x08BB41CC, getfloat(pobj + 0x38));
}

#cheat Save/Loaded Cheated
//If you have cheated before, it will teleport you to Leaf Links. If you haven't, it will save that it has.
if(getint(0x08BB41B4) == 0xFFFFFFFF){
    teleport(0,0,0);
} else {
    setint(0x08BB41B4, 0xFFFFFFFF);
    off();
}


#cheat All spawned pedestrians attack you
for(add = 0x08E78C90; (ped = getint(add)); add+=0x4)
     if(ped != 0x098b4a40){
          setint(ped + 0x890, pplayer);
          setchar(ped+0x894, 0x8);
     }


#cheat Kill all spawned pedestrians and their occupied vehicles
for(add = 0x08E78C90; (ped = getint(add)); add+=0x4){
   if(ped != 0x098b4a40)
       setfloat(ped+0x4e4, 0);
   car = getint(ped+0x480);
   if(car)
       setfloat(car+0x27c, 0);
}



#cheat Blow Up all Peds!
for(add = 0x08E78C90, explosion = 0x08BBBD50; (ped = getint(add)); add+=0x4, explosion +=0x50){
   if(ped != 0x098b4a40 && getfloat(ped + 0x4e4) > 0){
       setfloat(ped + 0x4e4, 0);
       setchar(explosion,  0x0a);
       setfloat(explosion+0x10,  getfloat(ped+0x30),  getfloat(ped+0x34),  getfloat(ped+0x38));
       setint(explosion+0x28,  pobj);
       setfloat(explosion+0x20,  5.0);
       setfloat(explosion+0x1c,  1);
       setchar(explosion+0x30,  0x30,  0xe4,  0x31,  0x4A,  0xf0);
       setchar(explosion+0x35,  0x1);
       setchar(explosion+0x3D,  0x1);
       setshort(explosion+0x42,  0x4316);
   }
}



#cheat Ring of Peds
count = 0;
for(add = 0x08E78C90; (ped = getint(add)); add+=0x4)
   if(ped != 0x098b4a40 && !getint(ped+0x480))
       count++;
count2 = 0;
for(add = 0x08E78C90; (ped = getint(add)) && count2 < count; add+=0x4)
   if(ped != 0x098b4a40 && !getint(ped+0x480)){
       setfloat(ped + 0x30, getfloat(pobj+0x30) + 2*count*cos(360/count*count2),
                            getfloat(pobj+0x34) + 2*count*sin(360/count*count2)
                            getfloat(pobj+0x38));
       setfloat(ped + 0x140, 0, 0, 0);
       setfloat(ped + 0x70, 0, 0, 0); 
       count2++;
   }



#cheat Kill all spawned pedestrians
for(add = 0x08E78C90; (ped = getint(add)); add+=0x4)
   if(ped != 0x098b4a40)
       setfloat(ped+0x4e4, 0);



cheat Spawn all pickups around you
count = 0;
for(i = 0x014B; i <= 0x01DA; i++)
    if(i != 0x0159 && i != 0x016B && i != 0x016D && i != 0x016E && i != 0x01B3 && i != 0x01D1 && !(i > 0x0170 && i < 0x01B5) 
      && !(i > 0x01B5 && i < 0x01D2) && !(i > 0x01D4 && i < 0x01DA) ) {
         pickup = 0x08C6A330 + count*0x40;
         setfloat(pickup, getfloat(pobj+0x30) + 15*cos(count*360/40), getfloat(pobj+0x34) + 20*sin(count*360/40), getfloat(pobj+0x38));
         setint(pickup+0x2C, 1000000);
         setshort(pickup+0x34, i);
         setchar(pickup+0x38, 0x03);
         count++;
    }
off();



#cheat Pickup Spawn above Vic
setfloat(0x08C6A17, getfloat(pplayer+0x30), getfloat(pplayer+0x34), getfloat(pplayer+0x38));
setint(0x08C6A19C, 100); // Amount of ammo for the pickup (Set to FF for non weapon pickups)
setchar(0x08C6A1A4, 0x57); // Object ID
setchar(0x08C6A1A6, 0x02); // Don't know what it's for (Goes up each time you collect it)
setchar(0x08C6A1A8, 0x02); // Pickup Type (01 = Buyable; 02 = One Time; 03 = Respawning)
setchar(0x08C6A1A9, 0x00); // 00 = Pickup spawns; 01 = Pickup won't spawn



#cheat Push Vehicles
setfloat(pplayer + 0xD0, 250000.0); //Pedestrian's Weight or Mass
setfloat(pplayer + 0xE0, 0.2); //Force exempt on object with lower weight when colliding
#off
setfloat(pplayer + 0xD0, 70.0);
setfloat(pplayer + 0xE0, 0.05);

#cheat Throw Vehicles
setfloat(pplayer + 0xD0, 250000.0);
setfloat(pplayer + 0xE0, 50.0);
#off
setfloat(pplayer + 0xD0, 70.0);
setfloat(pplayer + 0xE0, 0.05);

#cheat Larger Jumps
setfloat(pplayer + 0xD0, 15.0);
#off
setfloat(pplayer + 0xD0, 70.0);

#cheat Super Jumps
setfloat(pplayer + 0xD0, 1.0);
#off
setfloat(pplayer + 0xD0, 70.0);

#cheat Insanely High Jumps
setfloat(pplayer + 0xD0, .01);
#off
setfloat(pplayer + 0xD0, 70.0);

#cheat Marker Placement
mark = 0x08c62EA0; //Starting address
setfloat(mark, getfloat(pobj+0x30), getfloat(pobj+0x34),  getfloat(pobj+0x38) + 1); //X, Y, Z coords
setchar(mark+0x2c, 0, 0, 255); //Color
setchar(mark+0x3B, 0x3F);
setchar(mark+0x4F, 0x02);

#cheat Force people out of their car
coll = getint(pobj+0x150);
if(coll&&getshort(coll+0x56) >= 170 && getshort(coll+0x56) <= 280){
for(i=0; i<4; i++){
person=getint(coll+0x384+(i*0x4));
if(person!=pplayer&&person){
  setchar(person + 0x894, 0x10);
     }
}
}

#cheat Camera Test
setfloat(0x08BC8030, 0, 0, 0); //No idea what this is...
setfloat(0x08BC80B0, 0, 0, 1440); //Rotation
//setfloat(0x08BC8070, 0, 0, 180); //Zoom?
setfloat(0x08BC7E8C, 180);
setfloat(0x08BC7E90, 180);
setfloat(0x08BC7FDC, 180);
setfloat(0x08BC7FB8, 180);

#cheat Camera Test
setfloat(0x08BC8030, 0, 0, 0); //No idea what this is...
setfloat(0x08BC80B0, 0, 1080, 0); //Rotation
//setfloat(0x08BC8070, 0, 180, 0); //Zoom?
setfloat(0x08BC7E8C, 90);

#cheat Camera Test
setfloat(0x08BC8030, 0, 0, 0); //No idea what this is...
setfloat(0x08BC80B0, 1080, 0, 0); //Rotation
setfloat(0x08C7F18, -0.9);
//setfloat(0x08BC8070, 180, 0, 0); //Zoom?
setfloat(0x08BC7E8C, 90);


#cheat Set fire at where car is hit
setchar(0x08be3a20, 1);
setfloat(0x08be3a30, getfloat(pcar+0x30) + getfloat(pcar+0x120), getfloat(pcar+0x34) + getfloat(pcar+0x124), getfloat(pcar+0x38) + getfloat(pcar+0x128));

#cheat Set fire at where car is hit
setchar(0x08be3a20, 1);
setfloat(0x08be3a30, getfloat(pcar+0x30) - getfloat(pcar+0x120), getfloat(pcar+0x34) - getfloat(pcar+0x124), getfloat(pcar+0x38) - getfloat(pcar+0x128));


#cheat Passengers!
if(buttons & CTRL_DOWN)
for(i=0; 0x098b4a40+i<=0x098ecf90; i+=0xd10) {
   if(0x098b4a40 + i != pplayer && !(getint(0x098b4a40 + i + 0x480)) && pcar) { 
       setchar(0x098b4a40 + i + 0x5BC, 0x21);
       setint(0x098b4a40 + i +0x484, pcar);
       setint(0x098b4a40 + i +0x450, pcar);
   }
}



#cheat Make Target Follow You!
pped = getint(0x08BA1D70); //Pointer to aimed at ped
static yourped;
static fix;
if(pped&&!yourped)
   yourped=pped; //If aimed at a ped, save its address in the memory
if(yourped){
   setfloat(yourped+0x4e4, 10000);
   setchar(yourped+0x63C, 0x22);
   setchar(yourped+0x87c, 0x1e);
   //setchar(yourped+0x8B4, 0x0);
   //setchar(yourped+0x8C4, 0x0);
   setint(yourped+0x648, 1000);
   setchar(yourped+0x789, 0x7);
   if(!pcar){
       if(getint(yourped+0x480)){
           setchar(yourped+0x894, 0x10);
           fix=1;
       } else{
           if(pped && pped != yourped){
               setchar(yourped+0x894, 0x8);
               setint(yourped+0x890, pped);
               fix=1;
           } else {
               if(fix){
                   setchar(yourped+0x894, 0x01);
                   fix=0;
               }
               setchar(yourped+0x894, 0xC); //If not in a car, make that ped follow you
               setint(yourped+0x890, pplayer); //Lets the ped know who to follow
           }
       }
       
   }
   else{
       if(!getint(yourped+0x480))
           setchar(yourped+0x894, 0x11); //If in a car, make that ped get in the car
       setint(yourped+0x484, pcar);  //Makes the ped know what car to get into
       setint(yourped+0x450, pcar);
   }
   if(buttons & CTRL_LTRIGGER && press & CTRL_TRIANGLE){
       setfloat(yourped+0x4e4, 0);
       yourped=0;
   }
}


#cheat Force Chain V2
static init;
static old;
static counter;
static savemoney;
if(!init){
savemoney = getint(0x08bde55c);
}

if(!init || buttons & CTRL_CIRCLE){
if(pcar)
cur = pcar;
else cur = pplayer;
init = 1;
counter = 0;
}
if(cur == pcar || cur == pplayer){
if(pcar)
cur = pcar;
else cur = pplayer;
}
get = getint(cur + 0x150);
if(get && get != old){
if(getshort(get + 0x56) < 280 && getshort(get + 0x56) > 150){
touch = getint(cur + 0x150);
boost = 5;
thrust = boost * 0.00333;
setfloat(touch + 0x0140,   getfloat(touch + 0x0140) + getfloat(cur + 0x0010) + thrust);
setfloat(touch + 0x0144,   getfloat(touch + 0x0144) + getfloat(cur + 0x0014) + thrust);
setfloat(touch + 0x0148,   getfloat(touch + 0x0148) + getfloat(cur + 0x0018) * thrust);
old = cur;
cur = touch;
counter++;
}
}
if(counter>0){
setint(0x08bde55c, counter, counter);
} else {
setint(0x08bde55c, savemoney, savemoney);
}
#off
setint(0x08bde55c, savemoney);



#cheat Box Text
setchar(0x08E93604, 0x1);
setshort(0x08E92FFC, '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '~', 'n', '~', 'B', 'a', 'a', 0);

#cheat Bottom Left Corner
setshort(0x08BF81FE, 'T', 'e', 's', 't', 0);


